/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/**
 * This file exports the `Payment` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from '@prisma/client/runtime/library';
import type * as $Enums from '../enums';
import type * as Prisma from '../internal/prismaNamespace';

/**
 * Model Payment
 *
 */
export type PaymentModel = runtime.Types.Result.DefaultSelection<Prisma.$PaymentPayload>;

export type AggregatePayment = {
    _count: PaymentCountAggregateOutputType | null;
    _avg: PaymentAvgAggregateOutputType | null;
    _sum: PaymentSumAggregateOutputType | null;
    _min: PaymentMinAggregateOutputType | null;
    _max: PaymentMaxAggregateOutputType | null;
};

export type PaymentAvgAggregateOutputType = {
    id: number | null;
    billId: number | null;
    appointmentId: number | null;
    discount: number | null;
    totalAmount: number | null;
    amountPaid: number | null;
    receiptNumber: number | null;
};

export type PaymentSumAggregateOutputType = {
    id: number | null;
    billId: number | null;
    appointmentId: number | null;
    discount: number | null;
    totalAmount: number | null;
    amountPaid: number | null;
    receiptNumber: number | null;
};

export type PaymentMinAggregateOutputType = {
    id: number | null;
    billId: number | null;
    patientId: string | null;
    appointmentId: number | null;
    billDate: Date | null;
    paymentDate: Date | null;
    discount: number | null;
    totalAmount: number | null;
    amountPaid: number | null;
    paymentMethod: $Enums.PaymentMethod | null;
    status: $Enums.PaymentStatus | null;
    receiptNumber: number | null;
    createdAt: Date | null;
    updatedAt: Date | null;
};

export type PaymentMaxAggregateOutputType = {
    id: number | null;
    billId: number | null;
    patientId: string | null;
    appointmentId: number | null;
    billDate: Date | null;
    paymentDate: Date | null;
    discount: number | null;
    totalAmount: number | null;
    amountPaid: number | null;
    paymentMethod: $Enums.PaymentMethod | null;
    status: $Enums.PaymentStatus | null;
    receiptNumber: number | null;
    createdAt: Date | null;
    updatedAt: Date | null;
};

export type PaymentCountAggregateOutputType = {
    id: number;
    billId: number;
    patientId: number;
    appointmentId: number;
    billDate: number;
    paymentDate: number;
    discount: number;
    totalAmount: number;
    amountPaid: number;
    paymentMethod: number;
    status: number;
    receiptNumber: number;
    createdAt: number;
    updatedAt: number;
    _all: number;
};

export type PaymentAvgAggregateInputType = {
    id?: true;
    billId?: true;
    appointmentId?: true;
    discount?: true;
    totalAmount?: true;
    amountPaid?: true;
    receiptNumber?: true;
};

export type PaymentSumAggregateInputType = {
    id?: true;
    billId?: true;
    appointmentId?: true;
    discount?: true;
    totalAmount?: true;
    amountPaid?: true;
    receiptNumber?: true;
};

export type PaymentMinAggregateInputType = {
    id?: true;
    billId?: true;
    patientId?: true;
    appointmentId?: true;
    billDate?: true;
    paymentDate?: true;
    discount?: true;
    totalAmount?: true;
    amountPaid?: true;
    paymentMethod?: true;
    status?: true;
    receiptNumber?: true;
    createdAt?: true;
    updatedAt?: true;
};

export type PaymentMaxAggregateInputType = {
    id?: true;
    billId?: true;
    patientId?: true;
    appointmentId?: true;
    billDate?: true;
    paymentDate?: true;
    discount?: true;
    totalAmount?: true;
    amountPaid?: true;
    paymentMethod?: true;
    status?: true;
    receiptNumber?: true;
    createdAt?: true;
    updatedAt?: true;
};

export type PaymentCountAggregateInputType = {
    id?: true;
    billId?: true;
    patientId?: true;
    appointmentId?: true;
    billDate?: true;
    paymentDate?: true;
    discount?: true;
    totalAmount?: true;
    amountPaid?: true;
    paymentMethod?: true;
    status?: true;
    receiptNumber?: true;
    createdAt?: true;
    updatedAt?: true;
    _all?: true;
};

export type PaymentAggregateArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Filter which Payment to aggregate.
     */
    where?: Prisma.PaymentWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Payments to fetch.
     */
    orderBy?: Prisma.PaymentOrderByWithRelationInput | Prisma.PaymentOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the start position
     */
    cursor?: Prisma.PaymentWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `Â±n` Payments from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Payments.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Count returned Payments
     **/
    _count?: true | PaymentCountAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to average
     **/
    _avg?: PaymentAvgAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to sum
     **/
    _sum?: PaymentSumAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the minimum value
     **/
    _min?: PaymentMinAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the maximum value
     **/
    _max?: PaymentMaxAggregateInputType;
};

export type GetPaymentAggregateType<T extends PaymentAggregateArgs> = {
    [P in keyof T & keyof AggregatePayment]: P extends '_count' | 'count'
        ? T[P] extends true
            ? number
            : Prisma.GetScalarType<T[P], AggregatePayment[P]>
        : Prisma.GetScalarType<T[P], AggregatePayment[P]>;
};

export type PaymentGroupByArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    where?: Prisma.PaymentWhereInput;
    orderBy?: Prisma.PaymentOrderByWithAggregationInput | Prisma.PaymentOrderByWithAggregationInput[];
    by: Prisma.PaymentScalarFieldEnum[] | Prisma.PaymentScalarFieldEnum;
    having?: Prisma.PaymentScalarWhereWithAggregatesInput;
    take?: number;
    skip?: number;
    _count?: PaymentCountAggregateInputType | true;
    _avg?: PaymentAvgAggregateInputType;
    _sum?: PaymentSumAggregateInputType;
    _min?: PaymentMinAggregateInputType;
    _max?: PaymentMaxAggregateInputType;
};

export type PaymentGroupByOutputType = {
    id: number;
    billId: number | null;
    patientId: string;
    appointmentId: number;
    billDate: Date;
    paymentDate: Date;
    discount: number;
    totalAmount: number;
    amountPaid: number;
    paymentMethod: $Enums.PaymentMethod;
    status: $Enums.PaymentStatus;
    receiptNumber: number;
    createdAt: Date;
    updatedAt: Date;
    _count: PaymentCountAggregateOutputType | null;
    _avg: PaymentAvgAggregateOutputType | null;
    _sum: PaymentSumAggregateOutputType | null;
    _min: PaymentMinAggregateOutputType | null;
    _max: PaymentMaxAggregateOutputType | null;
};

type GetPaymentGroupByPayload<T extends PaymentGroupByArgs> = Prisma.PrismaPromise<
    Array<
        Prisma.PickEnumerable<PaymentGroupByOutputType, T['by']> & {
            [P in keyof T & keyof PaymentGroupByOutputType]: P extends '_count'
                ? T[P] extends boolean
                    ? number
                    : Prisma.GetScalarType<T[P], PaymentGroupByOutputType[P]>
                : Prisma.GetScalarType<T[P], PaymentGroupByOutputType[P]>;
        }
    >
>;

export type PaymentWhereInput = {
    AND?: Prisma.PaymentWhereInput | Prisma.PaymentWhereInput[];
    OR?: Prisma.PaymentWhereInput[];
    NOT?: Prisma.PaymentWhereInput | Prisma.PaymentWhereInput[];
    id?: Prisma.IntFilter<'Payment'> | number;
    billId?: Prisma.IntNullableFilter<'Payment'> | number | null;
    patientId?: Prisma.StringFilter<'Payment'> | string;
    appointmentId?: Prisma.IntFilter<'Payment'> | number;
    billDate?: Prisma.DateTimeFilter<'Payment'> | Date | string;
    paymentDate?: Prisma.DateTimeFilter<'Payment'> | Date | string;
    discount?: Prisma.FloatFilter<'Payment'> | number;
    totalAmount?: Prisma.FloatFilter<'Payment'> | number;
    amountPaid?: Prisma.FloatFilter<'Payment'> | number;
    paymentMethod?: Prisma.EnumPaymentMethodFilter<'Payment'> | $Enums.PaymentMethod;
    status?: Prisma.EnumPaymentStatusFilter<'Payment'> | $Enums.PaymentStatus;
    receiptNumber?: Prisma.IntFilter<'Payment'> | number;
    createdAt?: Prisma.DateTimeFilter<'Payment'> | Date | string;
    updatedAt?: Prisma.DateTimeFilter<'Payment'> | Date | string;
    appointment?: Prisma.XOR<Prisma.AppointmentScalarRelationFilter, Prisma.AppointmentWhereInput>;
    patient?: Prisma.XOR<Prisma.PatientScalarRelationFilter, Prisma.PatientWhereInput>;
    bills?: Prisma.PatientBillsListRelationFilter;
};

export type PaymentOrderByWithRelationInput = {
    id?: Prisma.SortOrder;
    billId?: Prisma.SortOrderInput | Prisma.SortOrder;
    patientId?: Prisma.SortOrder;
    appointmentId?: Prisma.SortOrder;
    billDate?: Prisma.SortOrder;
    paymentDate?: Prisma.SortOrder;
    discount?: Prisma.SortOrder;
    totalAmount?: Prisma.SortOrder;
    amountPaid?: Prisma.SortOrder;
    paymentMethod?: Prisma.SortOrder;
    status?: Prisma.SortOrder;
    receiptNumber?: Prisma.SortOrder;
    createdAt?: Prisma.SortOrder;
    updatedAt?: Prisma.SortOrder;
    appointment?: Prisma.AppointmentOrderByWithRelationInput;
    patient?: Prisma.PatientOrderByWithRelationInput;
    bills?: Prisma.PatientBillsOrderByRelationAggregateInput;
};

export type PaymentWhereUniqueInput = Prisma.AtLeast<
    {
        id?: number;
        appointmentId?: number;
        AND?: Prisma.PaymentWhereInput | Prisma.PaymentWhereInput[];
        OR?: Prisma.PaymentWhereInput[];
        NOT?: Prisma.PaymentWhereInput | Prisma.PaymentWhereInput[];
        billId?: Prisma.IntNullableFilter<'Payment'> | number | null;
        patientId?: Prisma.StringFilter<'Payment'> | string;
        billDate?: Prisma.DateTimeFilter<'Payment'> | Date | string;
        paymentDate?: Prisma.DateTimeFilter<'Payment'> | Date | string;
        discount?: Prisma.FloatFilter<'Payment'> | number;
        totalAmount?: Prisma.FloatFilter<'Payment'> | number;
        amountPaid?: Prisma.FloatFilter<'Payment'> | number;
        paymentMethod?: Prisma.EnumPaymentMethodFilter<'Payment'> | $Enums.PaymentMethod;
        status?: Prisma.EnumPaymentStatusFilter<'Payment'> | $Enums.PaymentStatus;
        receiptNumber?: Prisma.IntFilter<'Payment'> | number;
        createdAt?: Prisma.DateTimeFilter<'Payment'> | Date | string;
        updatedAt?: Prisma.DateTimeFilter<'Payment'> | Date | string;
        appointment?: Prisma.XOR<Prisma.AppointmentScalarRelationFilter, Prisma.AppointmentWhereInput>;
        patient?: Prisma.XOR<Prisma.PatientScalarRelationFilter, Prisma.PatientWhereInput>;
        bills?: Prisma.PatientBillsListRelationFilter;
    },
    'id' | 'appointmentId'
>;

export type PaymentOrderByWithAggregationInput = {
    id?: Prisma.SortOrder;
    billId?: Prisma.SortOrderInput | Prisma.SortOrder;
    patientId?: Prisma.SortOrder;
    appointmentId?: Prisma.SortOrder;
    billDate?: Prisma.SortOrder;
    paymentDate?: Prisma.SortOrder;
    discount?: Prisma.SortOrder;
    totalAmount?: Prisma.SortOrder;
    amountPaid?: Prisma.SortOrder;
    paymentMethod?: Prisma.SortOrder;
    status?: Prisma.SortOrder;
    receiptNumber?: Prisma.SortOrder;
    createdAt?: Prisma.SortOrder;
    updatedAt?: Prisma.SortOrder;
    _count?: Prisma.PaymentCountOrderByAggregateInput;
    _avg?: Prisma.PaymentAvgOrderByAggregateInput;
    _max?: Prisma.PaymentMaxOrderByAggregateInput;
    _min?: Prisma.PaymentMinOrderByAggregateInput;
    _sum?: Prisma.PaymentSumOrderByAggregateInput;
};

export type PaymentScalarWhereWithAggregatesInput = {
    AND?: Prisma.PaymentScalarWhereWithAggregatesInput | Prisma.PaymentScalarWhereWithAggregatesInput[];
    OR?: Prisma.PaymentScalarWhereWithAggregatesInput[];
    NOT?: Prisma.PaymentScalarWhereWithAggregatesInput | Prisma.PaymentScalarWhereWithAggregatesInput[];
    id?: Prisma.IntWithAggregatesFilter<'Payment'> | number;
    billId?: Prisma.IntNullableWithAggregatesFilter<'Payment'> | number | null;
    patientId?: Prisma.StringWithAggregatesFilter<'Payment'> | string;
    appointmentId?: Prisma.IntWithAggregatesFilter<'Payment'> | number;
    billDate?: Prisma.DateTimeWithAggregatesFilter<'Payment'> | Date | string;
    paymentDate?: Prisma.DateTimeWithAggregatesFilter<'Payment'> | Date | string;
    discount?: Prisma.FloatWithAggregatesFilter<'Payment'> | number;
    totalAmount?: Prisma.FloatWithAggregatesFilter<'Payment'> | number;
    amountPaid?: Prisma.FloatWithAggregatesFilter<'Payment'> | number;
    paymentMethod?: Prisma.EnumPaymentMethodWithAggregatesFilter<'Payment'> | $Enums.PaymentMethod;
    status?: Prisma.EnumPaymentStatusWithAggregatesFilter<'Payment'> | $Enums.PaymentStatus;
    receiptNumber?: Prisma.IntWithAggregatesFilter<'Payment'> | number;
    createdAt?: Prisma.DateTimeWithAggregatesFilter<'Payment'> | Date | string;
    updatedAt?: Prisma.DateTimeWithAggregatesFilter<'Payment'> | Date | string;
};

export type PaymentCreateInput = {
    billId?: number | null;
    billDate: Date | string;
    paymentDate: Date | string;
    discount: number;
    totalAmount: number;
    amountPaid: number;
    paymentMethod?: $Enums.PaymentMethod;
    status?: $Enums.PaymentStatus;
    receiptNumber?: number;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    appointment: Prisma.AppointmentCreateNestedOneWithoutBillsInput;
    patient: Prisma.PatientCreateNestedOneWithoutPaymentsInput;
    bills?: Prisma.PatientBillsCreateNestedManyWithoutPaymentInput;
};

export type PaymentUncheckedCreateInput = {
    id?: number;
    billId?: number | null;
    patientId: string;
    appointmentId: number;
    billDate: Date | string;
    paymentDate: Date | string;
    discount: number;
    totalAmount: number;
    amountPaid: number;
    paymentMethod?: $Enums.PaymentMethod;
    status?: $Enums.PaymentStatus;
    receiptNumber?: number;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    bills?: Prisma.PatientBillsUncheckedCreateNestedManyWithoutPaymentInput;
};

export type PaymentUpdateInput = {
    billId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
    billDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    paymentDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    discount?: Prisma.FloatFieldUpdateOperationsInput | number;
    totalAmount?: Prisma.FloatFieldUpdateOperationsInput | number;
    amountPaid?: Prisma.FloatFieldUpdateOperationsInput | number;
    paymentMethod?: Prisma.EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod;
    status?: Prisma.EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus;
    receiptNumber?: Prisma.IntFieldUpdateOperationsInput | number;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    appointment?: Prisma.AppointmentUpdateOneRequiredWithoutBillsNestedInput;
    patient?: Prisma.PatientUpdateOneRequiredWithoutPaymentsNestedInput;
    bills?: Prisma.PatientBillsUpdateManyWithoutPaymentNestedInput;
};

export type PaymentUncheckedUpdateInput = {
    id?: Prisma.IntFieldUpdateOperationsInput | number;
    billId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
    patientId?: Prisma.StringFieldUpdateOperationsInput | string;
    appointmentId?: Prisma.IntFieldUpdateOperationsInput | number;
    billDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    paymentDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    discount?: Prisma.FloatFieldUpdateOperationsInput | number;
    totalAmount?: Prisma.FloatFieldUpdateOperationsInput | number;
    amountPaid?: Prisma.FloatFieldUpdateOperationsInput | number;
    paymentMethod?: Prisma.EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod;
    status?: Prisma.EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus;
    receiptNumber?: Prisma.IntFieldUpdateOperationsInput | number;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    bills?: Prisma.PatientBillsUncheckedUpdateManyWithoutPaymentNestedInput;
};

export type PaymentCreateManyInput = {
    id?: number;
    billId?: number | null;
    patientId: string;
    appointmentId: number;
    billDate: Date | string;
    paymentDate: Date | string;
    discount: number;
    totalAmount: number;
    amountPaid: number;
    paymentMethod?: $Enums.PaymentMethod;
    status?: $Enums.PaymentStatus;
    receiptNumber?: number;
    createdAt?: Date | string;
    updatedAt?: Date | string;
};

export type PaymentUpdateManyMutationInput = {
    billId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
    billDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    paymentDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    discount?: Prisma.FloatFieldUpdateOperationsInput | number;
    totalAmount?: Prisma.FloatFieldUpdateOperationsInput | number;
    amountPaid?: Prisma.FloatFieldUpdateOperationsInput | number;
    paymentMethod?: Prisma.EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod;
    status?: Prisma.EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus;
    receiptNumber?: Prisma.IntFieldUpdateOperationsInput | number;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type PaymentUncheckedUpdateManyInput = {
    id?: Prisma.IntFieldUpdateOperationsInput | number;
    billId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
    patientId?: Prisma.StringFieldUpdateOperationsInput | string;
    appointmentId?: Prisma.IntFieldUpdateOperationsInput | number;
    billDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    paymentDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    discount?: Prisma.FloatFieldUpdateOperationsInput | number;
    totalAmount?: Prisma.FloatFieldUpdateOperationsInput | number;
    amountPaid?: Prisma.FloatFieldUpdateOperationsInput | number;
    paymentMethod?: Prisma.EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod;
    status?: Prisma.EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus;
    receiptNumber?: Prisma.IntFieldUpdateOperationsInput | number;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type PaymentListRelationFilter = {
    every?: Prisma.PaymentWhereInput;
    some?: Prisma.PaymentWhereInput;
    none?: Prisma.PaymentWhereInput;
};

export type PaymentOrderByRelationAggregateInput = {
    _count?: Prisma.SortOrder;
};

export type PaymentCountOrderByAggregateInput = {
    id?: Prisma.SortOrder;
    billId?: Prisma.SortOrder;
    patientId?: Prisma.SortOrder;
    appointmentId?: Prisma.SortOrder;
    billDate?: Prisma.SortOrder;
    paymentDate?: Prisma.SortOrder;
    discount?: Prisma.SortOrder;
    totalAmount?: Prisma.SortOrder;
    amountPaid?: Prisma.SortOrder;
    paymentMethod?: Prisma.SortOrder;
    status?: Prisma.SortOrder;
    receiptNumber?: Prisma.SortOrder;
    createdAt?: Prisma.SortOrder;
    updatedAt?: Prisma.SortOrder;
};

export type PaymentAvgOrderByAggregateInput = {
    id?: Prisma.SortOrder;
    billId?: Prisma.SortOrder;
    appointmentId?: Prisma.SortOrder;
    discount?: Prisma.SortOrder;
    totalAmount?: Prisma.SortOrder;
    amountPaid?: Prisma.SortOrder;
    receiptNumber?: Prisma.SortOrder;
};

export type PaymentMaxOrderByAggregateInput = {
    id?: Prisma.SortOrder;
    billId?: Prisma.SortOrder;
    patientId?: Prisma.SortOrder;
    appointmentId?: Prisma.SortOrder;
    billDate?: Prisma.SortOrder;
    paymentDate?: Prisma.SortOrder;
    discount?: Prisma.SortOrder;
    totalAmount?: Prisma.SortOrder;
    amountPaid?: Prisma.SortOrder;
    paymentMethod?: Prisma.SortOrder;
    status?: Prisma.SortOrder;
    receiptNumber?: Prisma.SortOrder;
    createdAt?: Prisma.SortOrder;
    updatedAt?: Prisma.SortOrder;
};

export type PaymentMinOrderByAggregateInput = {
    id?: Prisma.SortOrder;
    billId?: Prisma.SortOrder;
    patientId?: Prisma.SortOrder;
    appointmentId?: Prisma.SortOrder;
    billDate?: Prisma.SortOrder;
    paymentDate?: Prisma.SortOrder;
    discount?: Prisma.SortOrder;
    totalAmount?: Prisma.SortOrder;
    amountPaid?: Prisma.SortOrder;
    paymentMethod?: Prisma.SortOrder;
    status?: Prisma.SortOrder;
    receiptNumber?: Prisma.SortOrder;
    createdAt?: Prisma.SortOrder;
    updatedAt?: Prisma.SortOrder;
};

export type PaymentSumOrderByAggregateInput = {
    id?: Prisma.SortOrder;
    billId?: Prisma.SortOrder;
    appointmentId?: Prisma.SortOrder;
    discount?: Prisma.SortOrder;
    totalAmount?: Prisma.SortOrder;
    amountPaid?: Prisma.SortOrder;
    receiptNumber?: Prisma.SortOrder;
};

export type PaymentScalarRelationFilter = {
    is?: Prisma.PaymentWhereInput;
    isNot?: Prisma.PaymentWhereInput;
};

export type PaymentCreateNestedManyWithoutPatientInput = {
    create?:
        | Prisma.XOR<Prisma.PaymentCreateWithoutPatientInput, Prisma.PaymentUncheckedCreateWithoutPatientInput>
        | Prisma.PaymentCreateWithoutPatientInput[]
        | Prisma.PaymentUncheckedCreateWithoutPatientInput[];
    connectOrCreate?:
        | Prisma.PaymentCreateOrConnectWithoutPatientInput
        | Prisma.PaymentCreateOrConnectWithoutPatientInput[];
    createMany?: Prisma.PaymentCreateManyPatientInputEnvelope;
    connect?: Prisma.PaymentWhereUniqueInput | Prisma.PaymentWhereUniqueInput[];
};

export type PaymentUncheckedCreateNestedManyWithoutPatientInput = {
    create?:
        | Prisma.XOR<Prisma.PaymentCreateWithoutPatientInput, Prisma.PaymentUncheckedCreateWithoutPatientInput>
        | Prisma.PaymentCreateWithoutPatientInput[]
        | Prisma.PaymentUncheckedCreateWithoutPatientInput[];
    connectOrCreate?:
        | Prisma.PaymentCreateOrConnectWithoutPatientInput
        | Prisma.PaymentCreateOrConnectWithoutPatientInput[];
    createMany?: Prisma.PaymentCreateManyPatientInputEnvelope;
    connect?: Prisma.PaymentWhereUniqueInput | Prisma.PaymentWhereUniqueInput[];
};

export type PaymentUpdateManyWithoutPatientNestedInput = {
    create?:
        | Prisma.XOR<Prisma.PaymentCreateWithoutPatientInput, Prisma.PaymentUncheckedCreateWithoutPatientInput>
        | Prisma.PaymentCreateWithoutPatientInput[]
        | Prisma.PaymentUncheckedCreateWithoutPatientInput[];
    connectOrCreate?:
        | Prisma.PaymentCreateOrConnectWithoutPatientInput
        | Prisma.PaymentCreateOrConnectWithoutPatientInput[];
    upsert?:
        | Prisma.PaymentUpsertWithWhereUniqueWithoutPatientInput
        | Prisma.PaymentUpsertWithWhereUniqueWithoutPatientInput[];
    createMany?: Prisma.PaymentCreateManyPatientInputEnvelope;
    set?: Prisma.PaymentWhereUniqueInput | Prisma.PaymentWhereUniqueInput[];
    disconnect?: Prisma.PaymentWhereUniqueInput | Prisma.PaymentWhereUniqueInput[];
    delete?: Prisma.PaymentWhereUniqueInput | Prisma.PaymentWhereUniqueInput[];
    connect?: Prisma.PaymentWhereUniqueInput | Prisma.PaymentWhereUniqueInput[];
    update?:
        | Prisma.PaymentUpdateWithWhereUniqueWithoutPatientInput
        | Prisma.PaymentUpdateWithWhereUniqueWithoutPatientInput[];
    updateMany?:
        | Prisma.PaymentUpdateManyWithWhereWithoutPatientInput
        | Prisma.PaymentUpdateManyWithWhereWithoutPatientInput[];
    deleteMany?: Prisma.PaymentScalarWhereInput | Prisma.PaymentScalarWhereInput[];
};

export type PaymentUncheckedUpdateManyWithoutPatientNestedInput = {
    create?:
        | Prisma.XOR<Prisma.PaymentCreateWithoutPatientInput, Prisma.PaymentUncheckedCreateWithoutPatientInput>
        | Prisma.PaymentCreateWithoutPatientInput[]
        | Prisma.PaymentUncheckedCreateWithoutPatientInput[];
    connectOrCreate?:
        | Prisma.PaymentCreateOrConnectWithoutPatientInput
        | Prisma.PaymentCreateOrConnectWithoutPatientInput[];
    upsert?:
        | Prisma.PaymentUpsertWithWhereUniqueWithoutPatientInput
        | Prisma.PaymentUpsertWithWhereUniqueWithoutPatientInput[];
    createMany?: Prisma.PaymentCreateManyPatientInputEnvelope;
    set?: Prisma.PaymentWhereUniqueInput | Prisma.PaymentWhereUniqueInput[];
    disconnect?: Prisma.PaymentWhereUniqueInput | Prisma.PaymentWhereUniqueInput[];
    delete?: Prisma.PaymentWhereUniqueInput | Prisma.PaymentWhereUniqueInput[];
    connect?: Prisma.PaymentWhereUniqueInput | Prisma.PaymentWhereUniqueInput[];
    update?:
        | Prisma.PaymentUpdateWithWhereUniqueWithoutPatientInput
        | Prisma.PaymentUpdateWithWhereUniqueWithoutPatientInput[];
    updateMany?:
        | Prisma.PaymentUpdateManyWithWhereWithoutPatientInput
        | Prisma.PaymentUpdateManyWithWhereWithoutPatientInput[];
    deleteMany?: Prisma.PaymentScalarWhereInput | Prisma.PaymentScalarWhereInput[];
};

export type PaymentCreateNestedManyWithoutAppointmentInput = {
    create?:
        | Prisma.XOR<Prisma.PaymentCreateWithoutAppointmentInput, Prisma.PaymentUncheckedCreateWithoutAppointmentInput>
        | Prisma.PaymentCreateWithoutAppointmentInput[]
        | Prisma.PaymentUncheckedCreateWithoutAppointmentInput[];
    connectOrCreate?:
        | Prisma.PaymentCreateOrConnectWithoutAppointmentInput
        | Prisma.PaymentCreateOrConnectWithoutAppointmentInput[];
    createMany?: Prisma.PaymentCreateManyAppointmentInputEnvelope;
    connect?: Prisma.PaymentWhereUniqueInput | Prisma.PaymentWhereUniqueInput[];
};

export type PaymentUncheckedCreateNestedManyWithoutAppointmentInput = {
    create?:
        | Prisma.XOR<Prisma.PaymentCreateWithoutAppointmentInput, Prisma.PaymentUncheckedCreateWithoutAppointmentInput>
        | Prisma.PaymentCreateWithoutAppointmentInput[]
        | Prisma.PaymentUncheckedCreateWithoutAppointmentInput[];
    connectOrCreate?:
        | Prisma.PaymentCreateOrConnectWithoutAppointmentInput
        | Prisma.PaymentCreateOrConnectWithoutAppointmentInput[];
    createMany?: Prisma.PaymentCreateManyAppointmentInputEnvelope;
    connect?: Prisma.PaymentWhereUniqueInput | Prisma.PaymentWhereUniqueInput[];
};

export type PaymentUpdateManyWithoutAppointmentNestedInput = {
    create?:
        | Prisma.XOR<Prisma.PaymentCreateWithoutAppointmentInput, Prisma.PaymentUncheckedCreateWithoutAppointmentInput>
        | Prisma.PaymentCreateWithoutAppointmentInput[]
        | Prisma.PaymentUncheckedCreateWithoutAppointmentInput[];
    connectOrCreate?:
        | Prisma.PaymentCreateOrConnectWithoutAppointmentInput
        | Prisma.PaymentCreateOrConnectWithoutAppointmentInput[];
    upsert?:
        | Prisma.PaymentUpsertWithWhereUniqueWithoutAppointmentInput
        | Prisma.PaymentUpsertWithWhereUniqueWithoutAppointmentInput[];
    createMany?: Prisma.PaymentCreateManyAppointmentInputEnvelope;
    set?: Prisma.PaymentWhereUniqueInput | Prisma.PaymentWhereUniqueInput[];
    disconnect?: Prisma.PaymentWhereUniqueInput | Prisma.PaymentWhereUniqueInput[];
    delete?: Prisma.PaymentWhereUniqueInput | Prisma.PaymentWhereUniqueInput[];
    connect?: Prisma.PaymentWhereUniqueInput | Prisma.PaymentWhereUniqueInput[];
    update?:
        | Prisma.PaymentUpdateWithWhereUniqueWithoutAppointmentInput
        | Prisma.PaymentUpdateWithWhereUniqueWithoutAppointmentInput[];
    updateMany?:
        | Prisma.PaymentUpdateManyWithWhereWithoutAppointmentInput
        | Prisma.PaymentUpdateManyWithWhereWithoutAppointmentInput[];
    deleteMany?: Prisma.PaymentScalarWhereInput | Prisma.PaymentScalarWhereInput[];
};

export type PaymentUncheckedUpdateManyWithoutAppointmentNestedInput = {
    create?:
        | Prisma.XOR<Prisma.PaymentCreateWithoutAppointmentInput, Prisma.PaymentUncheckedCreateWithoutAppointmentInput>
        | Prisma.PaymentCreateWithoutAppointmentInput[]
        | Prisma.PaymentUncheckedCreateWithoutAppointmentInput[];
    connectOrCreate?:
        | Prisma.PaymentCreateOrConnectWithoutAppointmentInput
        | Prisma.PaymentCreateOrConnectWithoutAppointmentInput[];
    upsert?:
        | Prisma.PaymentUpsertWithWhereUniqueWithoutAppointmentInput
        | Prisma.PaymentUpsertWithWhereUniqueWithoutAppointmentInput[];
    createMany?: Prisma.PaymentCreateManyAppointmentInputEnvelope;
    set?: Prisma.PaymentWhereUniqueInput | Prisma.PaymentWhereUniqueInput[];
    disconnect?: Prisma.PaymentWhereUniqueInput | Prisma.PaymentWhereUniqueInput[];
    delete?: Prisma.PaymentWhereUniqueInput | Prisma.PaymentWhereUniqueInput[];
    connect?: Prisma.PaymentWhereUniqueInput | Prisma.PaymentWhereUniqueInput[];
    update?:
        | Prisma.PaymentUpdateWithWhereUniqueWithoutAppointmentInput
        | Prisma.PaymentUpdateWithWhereUniqueWithoutAppointmentInput[];
    updateMany?:
        | Prisma.PaymentUpdateManyWithWhereWithoutAppointmentInput
        | Prisma.PaymentUpdateManyWithWhereWithoutAppointmentInput[];
    deleteMany?: Prisma.PaymentScalarWhereInput | Prisma.PaymentScalarWhereInput[];
};

export type FloatFieldUpdateOperationsInput = {
    set?: number;
    increment?: number;
    decrement?: number;
    multiply?: number;
    divide?: number;
};

export type EnumPaymentMethodFieldUpdateOperationsInput = {
    set?: $Enums.PaymentMethod;
};

export type EnumPaymentStatusFieldUpdateOperationsInput = {
    set?: $Enums.PaymentStatus;
};

export type PaymentCreateNestedOneWithoutBillsInput = {
    create?: Prisma.XOR<Prisma.PaymentCreateWithoutBillsInput, Prisma.PaymentUncheckedCreateWithoutBillsInput>;
    connectOrCreate?: Prisma.PaymentCreateOrConnectWithoutBillsInput;
    connect?: Prisma.PaymentWhereUniqueInput;
};

export type PaymentUpdateOneRequiredWithoutBillsNestedInput = {
    create?: Prisma.XOR<Prisma.PaymentCreateWithoutBillsInput, Prisma.PaymentUncheckedCreateWithoutBillsInput>;
    connectOrCreate?: Prisma.PaymentCreateOrConnectWithoutBillsInput;
    upsert?: Prisma.PaymentUpsertWithoutBillsInput;
    connect?: Prisma.PaymentWhereUniqueInput;
    update?: Prisma.XOR<
        Prisma.XOR<Prisma.PaymentUpdateToOneWithWhereWithoutBillsInput, Prisma.PaymentUpdateWithoutBillsInput>,
        Prisma.PaymentUncheckedUpdateWithoutBillsInput
    >;
};

export type PaymentCreateWithoutPatientInput = {
    billId?: number | null;
    billDate: Date | string;
    paymentDate: Date | string;
    discount: number;
    totalAmount: number;
    amountPaid: number;
    paymentMethod?: $Enums.PaymentMethod;
    status?: $Enums.PaymentStatus;
    receiptNumber?: number;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    appointment: Prisma.AppointmentCreateNestedOneWithoutBillsInput;
    bills?: Prisma.PatientBillsCreateNestedManyWithoutPaymentInput;
};

export type PaymentUncheckedCreateWithoutPatientInput = {
    id?: number;
    billId?: number | null;
    appointmentId: number;
    billDate: Date | string;
    paymentDate: Date | string;
    discount: number;
    totalAmount: number;
    amountPaid: number;
    paymentMethod?: $Enums.PaymentMethod;
    status?: $Enums.PaymentStatus;
    receiptNumber?: number;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    bills?: Prisma.PatientBillsUncheckedCreateNestedManyWithoutPaymentInput;
};

export type PaymentCreateOrConnectWithoutPatientInput = {
    where: Prisma.PaymentWhereUniqueInput;
    create: Prisma.XOR<Prisma.PaymentCreateWithoutPatientInput, Prisma.PaymentUncheckedCreateWithoutPatientInput>;
};

export type PaymentCreateManyPatientInputEnvelope = {
    data: Prisma.PaymentCreateManyPatientInput | Prisma.PaymentCreateManyPatientInput[];
    skipDuplicates?: boolean;
};

export type PaymentUpsertWithWhereUniqueWithoutPatientInput = {
    where: Prisma.PaymentWhereUniqueInput;
    update: Prisma.XOR<Prisma.PaymentUpdateWithoutPatientInput, Prisma.PaymentUncheckedUpdateWithoutPatientInput>;
    create: Prisma.XOR<Prisma.PaymentCreateWithoutPatientInput, Prisma.PaymentUncheckedCreateWithoutPatientInput>;
};

export type PaymentUpdateWithWhereUniqueWithoutPatientInput = {
    where: Prisma.PaymentWhereUniqueInput;
    data: Prisma.XOR<Prisma.PaymentUpdateWithoutPatientInput, Prisma.PaymentUncheckedUpdateWithoutPatientInput>;
};

export type PaymentUpdateManyWithWhereWithoutPatientInput = {
    where: Prisma.PaymentScalarWhereInput;
    data: Prisma.XOR<Prisma.PaymentUpdateManyMutationInput, Prisma.PaymentUncheckedUpdateManyWithoutPatientInput>;
};

export type PaymentScalarWhereInput = {
    AND?: Prisma.PaymentScalarWhereInput | Prisma.PaymentScalarWhereInput[];
    OR?: Prisma.PaymentScalarWhereInput[];
    NOT?: Prisma.PaymentScalarWhereInput | Prisma.PaymentScalarWhereInput[];
    id?: Prisma.IntFilter<'Payment'> | number;
    billId?: Prisma.IntNullableFilter<'Payment'> | number | null;
    patientId?: Prisma.StringFilter<'Payment'> | string;
    appointmentId?: Prisma.IntFilter<'Payment'> | number;
    billDate?: Prisma.DateTimeFilter<'Payment'> | Date | string;
    paymentDate?: Prisma.DateTimeFilter<'Payment'> | Date | string;
    discount?: Prisma.FloatFilter<'Payment'> | number;
    totalAmount?: Prisma.FloatFilter<'Payment'> | number;
    amountPaid?: Prisma.FloatFilter<'Payment'> | number;
    paymentMethod?: Prisma.EnumPaymentMethodFilter<'Payment'> | $Enums.PaymentMethod;
    status?: Prisma.EnumPaymentStatusFilter<'Payment'> | $Enums.PaymentStatus;
    receiptNumber?: Prisma.IntFilter<'Payment'> | number;
    createdAt?: Prisma.DateTimeFilter<'Payment'> | Date | string;
    updatedAt?: Prisma.DateTimeFilter<'Payment'> | Date | string;
};

export type PaymentCreateWithoutAppointmentInput = {
    billId?: number | null;
    billDate: Date | string;
    paymentDate: Date | string;
    discount: number;
    totalAmount: number;
    amountPaid: number;
    paymentMethod?: $Enums.PaymentMethod;
    status?: $Enums.PaymentStatus;
    receiptNumber?: number;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    patient: Prisma.PatientCreateNestedOneWithoutPaymentsInput;
    bills?: Prisma.PatientBillsCreateNestedManyWithoutPaymentInput;
};

export type PaymentUncheckedCreateWithoutAppointmentInput = {
    id?: number;
    billId?: number | null;
    patientId: string;
    billDate: Date | string;
    paymentDate: Date | string;
    discount: number;
    totalAmount: number;
    amountPaid: number;
    paymentMethod?: $Enums.PaymentMethod;
    status?: $Enums.PaymentStatus;
    receiptNumber?: number;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    bills?: Prisma.PatientBillsUncheckedCreateNestedManyWithoutPaymentInput;
};

export type PaymentCreateOrConnectWithoutAppointmentInput = {
    where: Prisma.PaymentWhereUniqueInput;
    create: Prisma.XOR<
        Prisma.PaymentCreateWithoutAppointmentInput,
        Prisma.PaymentUncheckedCreateWithoutAppointmentInput
    >;
};

export type PaymentCreateManyAppointmentInputEnvelope = {
    data: Prisma.PaymentCreateManyAppointmentInput | Prisma.PaymentCreateManyAppointmentInput[];
    skipDuplicates?: boolean;
};

export type PaymentUpsertWithWhereUniqueWithoutAppointmentInput = {
    where: Prisma.PaymentWhereUniqueInput;
    update: Prisma.XOR<
        Prisma.PaymentUpdateWithoutAppointmentInput,
        Prisma.PaymentUncheckedUpdateWithoutAppointmentInput
    >;
    create: Prisma.XOR<
        Prisma.PaymentCreateWithoutAppointmentInput,
        Prisma.PaymentUncheckedCreateWithoutAppointmentInput
    >;
};

export type PaymentUpdateWithWhereUniqueWithoutAppointmentInput = {
    where: Prisma.PaymentWhereUniqueInput;
    data: Prisma.XOR<Prisma.PaymentUpdateWithoutAppointmentInput, Prisma.PaymentUncheckedUpdateWithoutAppointmentInput>;
};

export type PaymentUpdateManyWithWhereWithoutAppointmentInput = {
    where: Prisma.PaymentScalarWhereInput;
    data: Prisma.XOR<Prisma.PaymentUpdateManyMutationInput, Prisma.PaymentUncheckedUpdateManyWithoutAppointmentInput>;
};

export type PaymentCreateWithoutBillsInput = {
    billId?: number | null;
    billDate: Date | string;
    paymentDate: Date | string;
    discount: number;
    totalAmount: number;
    amountPaid: number;
    paymentMethod?: $Enums.PaymentMethod;
    status?: $Enums.PaymentStatus;
    receiptNumber?: number;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    appointment: Prisma.AppointmentCreateNestedOneWithoutBillsInput;
    patient: Prisma.PatientCreateNestedOneWithoutPaymentsInput;
};

export type PaymentUncheckedCreateWithoutBillsInput = {
    id?: number;
    billId?: number | null;
    patientId: string;
    appointmentId: number;
    billDate: Date | string;
    paymentDate: Date | string;
    discount: number;
    totalAmount: number;
    amountPaid: number;
    paymentMethod?: $Enums.PaymentMethod;
    status?: $Enums.PaymentStatus;
    receiptNumber?: number;
    createdAt?: Date | string;
    updatedAt?: Date | string;
};

export type PaymentCreateOrConnectWithoutBillsInput = {
    where: Prisma.PaymentWhereUniqueInput;
    create: Prisma.XOR<Prisma.PaymentCreateWithoutBillsInput, Prisma.PaymentUncheckedCreateWithoutBillsInput>;
};

export type PaymentUpsertWithoutBillsInput = {
    update: Prisma.XOR<Prisma.PaymentUpdateWithoutBillsInput, Prisma.PaymentUncheckedUpdateWithoutBillsInput>;
    create: Prisma.XOR<Prisma.PaymentCreateWithoutBillsInput, Prisma.PaymentUncheckedCreateWithoutBillsInput>;
    where?: Prisma.PaymentWhereInput;
};

export type PaymentUpdateToOneWithWhereWithoutBillsInput = {
    where?: Prisma.PaymentWhereInput;
    data: Prisma.XOR<Prisma.PaymentUpdateWithoutBillsInput, Prisma.PaymentUncheckedUpdateWithoutBillsInput>;
};

export type PaymentUpdateWithoutBillsInput = {
    billId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
    billDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    paymentDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    discount?: Prisma.FloatFieldUpdateOperationsInput | number;
    totalAmount?: Prisma.FloatFieldUpdateOperationsInput | number;
    amountPaid?: Prisma.FloatFieldUpdateOperationsInput | number;
    paymentMethod?: Prisma.EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod;
    status?: Prisma.EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus;
    receiptNumber?: Prisma.IntFieldUpdateOperationsInput | number;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    appointment?: Prisma.AppointmentUpdateOneRequiredWithoutBillsNestedInput;
    patient?: Prisma.PatientUpdateOneRequiredWithoutPaymentsNestedInput;
};

export type PaymentUncheckedUpdateWithoutBillsInput = {
    id?: Prisma.IntFieldUpdateOperationsInput | number;
    billId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
    patientId?: Prisma.StringFieldUpdateOperationsInput | string;
    appointmentId?: Prisma.IntFieldUpdateOperationsInput | number;
    billDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    paymentDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    discount?: Prisma.FloatFieldUpdateOperationsInput | number;
    totalAmount?: Prisma.FloatFieldUpdateOperationsInput | number;
    amountPaid?: Prisma.FloatFieldUpdateOperationsInput | number;
    paymentMethod?: Prisma.EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod;
    status?: Prisma.EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus;
    receiptNumber?: Prisma.IntFieldUpdateOperationsInput | number;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type PaymentCreateManyPatientInput = {
    id?: number;
    billId?: number | null;
    appointmentId: number;
    billDate: Date | string;
    paymentDate: Date | string;
    discount: number;
    totalAmount: number;
    amountPaid: number;
    paymentMethod?: $Enums.PaymentMethod;
    status?: $Enums.PaymentStatus;
    receiptNumber?: number;
    createdAt?: Date | string;
    updatedAt?: Date | string;
};

export type PaymentUpdateWithoutPatientInput = {
    billId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
    billDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    paymentDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    discount?: Prisma.FloatFieldUpdateOperationsInput | number;
    totalAmount?: Prisma.FloatFieldUpdateOperationsInput | number;
    amountPaid?: Prisma.FloatFieldUpdateOperationsInput | number;
    paymentMethod?: Prisma.EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod;
    status?: Prisma.EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus;
    receiptNumber?: Prisma.IntFieldUpdateOperationsInput | number;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    appointment?: Prisma.AppointmentUpdateOneRequiredWithoutBillsNestedInput;
    bills?: Prisma.PatientBillsUpdateManyWithoutPaymentNestedInput;
};

export type PaymentUncheckedUpdateWithoutPatientInput = {
    id?: Prisma.IntFieldUpdateOperationsInput | number;
    billId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
    appointmentId?: Prisma.IntFieldUpdateOperationsInput | number;
    billDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    paymentDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    discount?: Prisma.FloatFieldUpdateOperationsInput | number;
    totalAmount?: Prisma.FloatFieldUpdateOperationsInput | number;
    amountPaid?: Prisma.FloatFieldUpdateOperationsInput | number;
    paymentMethod?: Prisma.EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod;
    status?: Prisma.EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus;
    receiptNumber?: Prisma.IntFieldUpdateOperationsInput | number;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    bills?: Prisma.PatientBillsUncheckedUpdateManyWithoutPaymentNestedInput;
};

export type PaymentUncheckedUpdateManyWithoutPatientInput = {
    id?: Prisma.IntFieldUpdateOperationsInput | number;
    billId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
    appointmentId?: Prisma.IntFieldUpdateOperationsInput | number;
    billDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    paymentDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    discount?: Prisma.FloatFieldUpdateOperationsInput | number;
    totalAmount?: Prisma.FloatFieldUpdateOperationsInput | number;
    amountPaid?: Prisma.FloatFieldUpdateOperationsInput | number;
    paymentMethod?: Prisma.EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod;
    status?: Prisma.EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus;
    receiptNumber?: Prisma.IntFieldUpdateOperationsInput | number;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type PaymentCreateManyAppointmentInput = {
    id?: number;
    billId?: number | null;
    patientId: string;
    billDate: Date | string;
    paymentDate: Date | string;
    discount: number;
    totalAmount: number;
    amountPaid: number;
    paymentMethod?: $Enums.PaymentMethod;
    status?: $Enums.PaymentStatus;
    receiptNumber?: number;
    createdAt?: Date | string;
    updatedAt?: Date | string;
};

export type PaymentUpdateWithoutAppointmentInput = {
    billId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
    billDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    paymentDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    discount?: Prisma.FloatFieldUpdateOperationsInput | number;
    totalAmount?: Prisma.FloatFieldUpdateOperationsInput | number;
    amountPaid?: Prisma.FloatFieldUpdateOperationsInput | number;
    paymentMethod?: Prisma.EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod;
    status?: Prisma.EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus;
    receiptNumber?: Prisma.IntFieldUpdateOperationsInput | number;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    patient?: Prisma.PatientUpdateOneRequiredWithoutPaymentsNestedInput;
    bills?: Prisma.PatientBillsUpdateManyWithoutPaymentNestedInput;
};

export type PaymentUncheckedUpdateWithoutAppointmentInput = {
    id?: Prisma.IntFieldUpdateOperationsInput | number;
    billId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
    patientId?: Prisma.StringFieldUpdateOperationsInput | string;
    billDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    paymentDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    discount?: Prisma.FloatFieldUpdateOperationsInput | number;
    totalAmount?: Prisma.FloatFieldUpdateOperationsInput | number;
    amountPaid?: Prisma.FloatFieldUpdateOperationsInput | number;
    paymentMethod?: Prisma.EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod;
    status?: Prisma.EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus;
    receiptNumber?: Prisma.IntFieldUpdateOperationsInput | number;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    bills?: Prisma.PatientBillsUncheckedUpdateManyWithoutPaymentNestedInput;
};

export type PaymentUncheckedUpdateManyWithoutAppointmentInput = {
    id?: Prisma.IntFieldUpdateOperationsInput | number;
    billId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
    patientId?: Prisma.StringFieldUpdateOperationsInput | string;
    billDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    paymentDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    discount?: Prisma.FloatFieldUpdateOperationsInput | number;
    totalAmount?: Prisma.FloatFieldUpdateOperationsInput | number;
    amountPaid?: Prisma.FloatFieldUpdateOperationsInput | number;
    paymentMethod?: Prisma.EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod;
    status?: Prisma.EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus;
    receiptNumber?: Prisma.IntFieldUpdateOperationsInput | number;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

/**
 * Count Type PaymentCountOutputType
 */

export type PaymentCountOutputType = {
    bills: number;
};

export type PaymentCountOutputTypeSelect<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    bills?: boolean | PaymentCountOutputTypeCountBillsArgs;
};

/**
 * PaymentCountOutputType without action
 */
export type PaymentCountOutputTypeDefaultArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the PaymentCountOutputType
     */
    select?: Prisma.PaymentCountOutputTypeSelect<ExtArgs> | null;
};

/**
 * PaymentCountOutputType without action
 */
export type PaymentCountOutputTypeCountBillsArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    where?: Prisma.PatientBillsWhereInput;
};

export type PaymentSelect<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
    {
        id?: boolean;
        billId?: boolean;
        patientId?: boolean;
        appointmentId?: boolean;
        billDate?: boolean;
        paymentDate?: boolean;
        discount?: boolean;
        totalAmount?: boolean;
        amountPaid?: boolean;
        paymentMethod?: boolean;
        status?: boolean;
        receiptNumber?: boolean;
        createdAt?: boolean;
        updatedAt?: boolean;
        appointment?: boolean | Prisma.AppointmentDefaultArgs<ExtArgs>;
        patient?: boolean | Prisma.PatientDefaultArgs<ExtArgs>;
        bills?: boolean | Prisma.Payment$billsArgs<ExtArgs>;
        _count?: boolean | Prisma.PaymentCountOutputTypeDefaultArgs<ExtArgs>;
    },
    ExtArgs['result']['payment']
>;

export type PaymentSelectCreateManyAndReturn<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
    {
        id?: boolean;
        billId?: boolean;
        patientId?: boolean;
        appointmentId?: boolean;
        billDate?: boolean;
        paymentDate?: boolean;
        discount?: boolean;
        totalAmount?: boolean;
        amountPaid?: boolean;
        paymentMethod?: boolean;
        status?: boolean;
        receiptNumber?: boolean;
        createdAt?: boolean;
        updatedAt?: boolean;
        appointment?: boolean | Prisma.AppointmentDefaultArgs<ExtArgs>;
        patient?: boolean | Prisma.PatientDefaultArgs<ExtArgs>;
    },
    ExtArgs['result']['payment']
>;

export type PaymentSelectUpdateManyAndReturn<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
    {
        id?: boolean;
        billId?: boolean;
        patientId?: boolean;
        appointmentId?: boolean;
        billDate?: boolean;
        paymentDate?: boolean;
        discount?: boolean;
        totalAmount?: boolean;
        amountPaid?: boolean;
        paymentMethod?: boolean;
        status?: boolean;
        receiptNumber?: boolean;
        createdAt?: boolean;
        updatedAt?: boolean;
        appointment?: boolean | Prisma.AppointmentDefaultArgs<ExtArgs>;
        patient?: boolean | Prisma.PatientDefaultArgs<ExtArgs>;
    },
    ExtArgs['result']['payment']
>;

export type PaymentSelectScalar = {
    id?: boolean;
    billId?: boolean;
    patientId?: boolean;
    appointmentId?: boolean;
    billDate?: boolean;
    paymentDate?: boolean;
    discount?: boolean;
    totalAmount?: boolean;
    amountPaid?: boolean;
    paymentMethod?: boolean;
    status?: boolean;
    receiptNumber?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
};

export type PaymentOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
    runtime.Types.Extensions.GetOmit<
        | 'id'
        | 'billId'
        | 'patientId'
        | 'appointmentId'
        | 'billDate'
        | 'paymentDate'
        | 'discount'
        | 'totalAmount'
        | 'amountPaid'
        | 'paymentMethod'
        | 'status'
        | 'receiptNumber'
        | 'createdAt'
        | 'updatedAt',
        ExtArgs['result']['payment']
    >;
export type PaymentInclude<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    appointment?: boolean | Prisma.AppointmentDefaultArgs<ExtArgs>;
    patient?: boolean | Prisma.PatientDefaultArgs<ExtArgs>;
    bills?: boolean | Prisma.Payment$billsArgs<ExtArgs>;
    _count?: boolean | Prisma.PaymentCountOutputTypeDefaultArgs<ExtArgs>;
};
export type PaymentIncludeCreateManyAndReturn<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    appointment?: boolean | Prisma.AppointmentDefaultArgs<ExtArgs>;
    patient?: boolean | Prisma.PatientDefaultArgs<ExtArgs>;
};
export type PaymentIncludeUpdateManyAndReturn<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    appointment?: boolean | Prisma.AppointmentDefaultArgs<ExtArgs>;
    patient?: boolean | Prisma.PatientDefaultArgs<ExtArgs>;
};

export type $PaymentPayload<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    name: 'Payment';
    objects: {
        appointment: Prisma.$AppointmentPayload<ExtArgs>;
        patient: Prisma.$PatientPayload<ExtArgs>;
        bills: Prisma.$PatientBillsPayload<ExtArgs>[];
    };
    scalars: runtime.Types.Extensions.GetPayloadResult<
        {
            id: number;
            billId: number | null;
            patientId: string;
            appointmentId: number;
            billDate: Date;
            paymentDate: Date;
            discount: number;
            totalAmount: number;
            amountPaid: number;
            paymentMethod: $Enums.PaymentMethod;
            status: $Enums.PaymentStatus;
            receiptNumber: number;
            createdAt: Date;
            updatedAt: Date;
        },
        ExtArgs['result']['payment']
    >;
    composites: {};
};

export type PaymentGetPayload<S extends boolean | null | undefined | PaymentDefaultArgs> =
    runtime.Types.Result.GetResult<Prisma.$PaymentPayload, S>;

export type PaymentCountArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = Omit<PaymentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: PaymentCountAggregateInputType | true;
};

export interface PaymentDelegate<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
    GlobalOmitOptions = {}
> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Payment']; meta: { name: 'Payment' } };
    /**
     * Find zero or one Payment that matches the filter.
     * @param {PaymentFindUniqueArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PaymentFindUniqueArgs>(
        args: Prisma.SelectSubset<T, PaymentFindUniqueArgs<ExtArgs>>
    ): Prisma.Prisma__PaymentClient<
        runtime.Types.Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, 'findUnique', GlobalOmitOptions> | null,
        null,
        ExtArgs,
        GlobalOmitOptions
    >;

    /**
     * Find one Payment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PaymentFindUniqueOrThrowArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PaymentFindUniqueOrThrowArgs>(
        args: Prisma.SelectSubset<T, PaymentFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma.Prisma__PaymentClient<
        runtime.Types.Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, 'findUniqueOrThrow', GlobalOmitOptions>,
        never,
        ExtArgs,
        GlobalOmitOptions
    >;

    /**
     * Find the first Payment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentFindFirstArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PaymentFindFirstArgs>(
        args?: Prisma.SelectSubset<T, PaymentFindFirstArgs<ExtArgs>>
    ): Prisma.Prisma__PaymentClient<
        runtime.Types.Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, 'findFirst', GlobalOmitOptions> | null,
        null,
        ExtArgs,
        GlobalOmitOptions
    >;

    /**
     * Find the first Payment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentFindFirstOrThrowArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PaymentFindFirstOrThrowArgs>(
        args?: Prisma.SelectSubset<T, PaymentFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma.Prisma__PaymentClient<
        runtime.Types.Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, 'findFirstOrThrow', GlobalOmitOptions>,
        never,
        ExtArgs,
        GlobalOmitOptions
    >;

    /**
     * Find zero or more Payments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Payments
     * const payments = await prisma.payment.findMany()
     *
     * // Get first 10 Payments
     * const payments = await prisma.payment.findMany({ take: 10 })
     *
     * // Only select the `id`
     * const paymentWithIdOnly = await prisma.payment.findMany({ select: { id: true } })
     *
     */
    findMany<T extends PaymentFindManyArgs>(
        args?: Prisma.SelectSubset<T, PaymentFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<
        runtime.Types.Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, 'findMany', GlobalOmitOptions>
    >;

    /**
     * Create a Payment.
     * @param {PaymentCreateArgs} args - Arguments to create a Payment.
     * @example
     * // Create one Payment
     * const Payment = await prisma.payment.create({
     *   data: {
     *     // ... data to create a Payment
     *   }
     * })
     *
     */
    create<T extends PaymentCreateArgs>(
        args: Prisma.SelectSubset<T, PaymentCreateArgs<ExtArgs>>
    ): Prisma.Prisma__PaymentClient<
        runtime.Types.Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, 'create', GlobalOmitOptions>,
        never,
        ExtArgs,
        GlobalOmitOptions
    >;

    /**
     * Create many Payments.
     * @param {PaymentCreateManyArgs} args - Arguments to create many Payments.
     * @example
     * // Create many Payments
     * const payment = await prisma.payment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     */
    createMany<T extends PaymentCreateManyArgs>(
        args?: Prisma.SelectSubset<T, PaymentCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<Prisma.BatchPayload>;

    /**
     * Create many Payments and returns the data saved in the database.
     * @param {PaymentCreateManyAndReturnArgs} args - Arguments to create many Payments.
     * @example
     * // Create many Payments
     * const payment = await prisma.payment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     * // Create many Payments and only return the `id`
     * const paymentWithIdOnly = await prisma.payment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     *
     */
    createManyAndReturn<T extends PaymentCreateManyAndReturnArgs>(
        args?: Prisma.SelectSubset<T, PaymentCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<
        runtime.Types.Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, 'createManyAndReturn', GlobalOmitOptions>
    >;

    /**
     * Delete a Payment.
     * @param {PaymentDeleteArgs} args - Arguments to delete one Payment.
     * @example
     * // Delete one Payment
     * const Payment = await prisma.payment.delete({
     *   where: {
     *     // ... filter to delete one Payment
     *   }
     * })
     *
     */
    delete<T extends PaymentDeleteArgs>(
        args: Prisma.SelectSubset<T, PaymentDeleteArgs<ExtArgs>>
    ): Prisma.Prisma__PaymentClient<
        runtime.Types.Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, 'delete', GlobalOmitOptions>,
        never,
        ExtArgs,
        GlobalOmitOptions
    >;

    /**
     * Update one Payment.
     * @param {PaymentUpdateArgs} args - Arguments to update one Payment.
     * @example
     * // Update one Payment
     * const payment = await prisma.payment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     */
    update<T extends PaymentUpdateArgs>(
        args: Prisma.SelectSubset<T, PaymentUpdateArgs<ExtArgs>>
    ): Prisma.Prisma__PaymentClient<
        runtime.Types.Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, 'update', GlobalOmitOptions>,
        never,
        ExtArgs,
        GlobalOmitOptions
    >;

    /**
     * Delete zero or more Payments.
     * @param {PaymentDeleteManyArgs} args - Arguments to filter Payments to delete.
     * @example
     * // Delete a few Payments
     * const { count } = await prisma.payment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     *
     */
    deleteMany<T extends PaymentDeleteManyArgs>(
        args?: Prisma.SelectSubset<T, PaymentDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<Prisma.BatchPayload>;

    /**
     * Update zero or more Payments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Payments
     * const payment = await prisma.payment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     */
    updateMany<T extends PaymentUpdateManyArgs>(
        args: Prisma.SelectSubset<T, PaymentUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<Prisma.BatchPayload>;

    /**
     * Update zero or more Payments and returns the data updated in the database.
     * @param {PaymentUpdateManyAndReturnArgs} args - Arguments to update many Payments.
     * @example
     * // Update many Payments
     * const payment = await prisma.payment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     * // Update zero or more Payments and only return the `id`
     * const paymentWithIdOnly = await prisma.payment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     *
     */
    updateManyAndReturn<T extends PaymentUpdateManyAndReturnArgs>(
        args: Prisma.SelectSubset<T, PaymentUpdateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<
        runtime.Types.Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, 'updateManyAndReturn', GlobalOmitOptions>
    >;

    /**
     * Create or update one Payment.
     * @param {PaymentUpsertArgs} args - Arguments to update or create a Payment.
     * @example
     * // Update or create a Payment
     * const payment = await prisma.payment.upsert({
     *   create: {
     *     // ... data to create a Payment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Payment we want to update
     *   }
     * })
     */
    upsert<T extends PaymentUpsertArgs>(
        args: Prisma.SelectSubset<T, PaymentUpsertArgs<ExtArgs>>
    ): Prisma.Prisma__PaymentClient<
        runtime.Types.Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, 'upsert', GlobalOmitOptions>,
        never,
        ExtArgs,
        GlobalOmitOptions
    >;

    /**
     * Count the number of Payments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentCountArgs} args - Arguments to filter Payments to count.
     * @example
     * // Count the number of Payments
     * const count = await prisma.payment.count({
     *   where: {
     *     // ... the filter for the Payments we want to count
     *   }
     * })
     **/
    count<T extends PaymentCountArgs>(
        args?: Prisma.Subset<T, PaymentCountArgs>
    ): Prisma.PrismaPromise<
        T extends runtime.Types.Utils.Record<'select', any>
            ? T['select'] extends true
                ? number
                : Prisma.GetScalarType<T['select'], PaymentCountAggregateOutputType>
            : number
    >;

    /**
     * Allows you to perform aggregations operations on a Payment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
     **/
    aggregate<T extends PaymentAggregateArgs>(
        args: Prisma.Subset<T, PaymentAggregateArgs>
    ): Prisma.PrismaPromise<GetPaymentAggregateType<T>>;

    /**
     * Group by Payment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     *
     **/
    groupBy<
        T extends PaymentGroupByArgs,
        HasSelectOrTake extends Prisma.Or<
            Prisma.Extends<'skip', Prisma.Keys<T>>,
            Prisma.Extends<'take', Prisma.Keys<T>>
        >,
        OrderByArg extends Prisma.True extends HasSelectOrTake
            ? { orderBy: PaymentGroupByArgs['orderBy'] }
            : { orderBy?: PaymentGroupByArgs['orderBy'] },
        OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
        ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
        ByValid extends Prisma.Has<ByFields, OrderFields>,
        HavingFields extends Prisma.GetHavingFields<T['having']>,
        HavingValid extends Prisma.Has<ByFields, HavingFields>,
        ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
        InputErrors extends ByEmpty extends Prisma.True
            ? `Error: "by" must not be empty.`
            : HavingValid extends Prisma.False
              ? {
                    [P in HavingFields]: P extends ByFields
                        ? never
                        : P extends string
                          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                          : [Error, 'Field ', P, ` in "having" needs to be provided in "by"`];
                }[HavingFields]
              : 'take' extends Prisma.Keys<T>
                ? 'orderBy' extends Prisma.Keys<T>
                    ? ByValid extends Prisma.True
                        ? {}
                        : {
                              [P in OrderFields]: P extends ByFields
                                  ? never
                                  : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                          }[OrderFields]
                    : 'Error: If you provide "take", you also need to provide "orderBy"'
                : 'skip' extends Prisma.Keys<T>
                  ? 'orderBy' extends Prisma.Keys<T>
                      ? ByValid extends Prisma.True
                          ? {}
                          : {
                                [P in OrderFields]: P extends ByFields
                                    ? never
                                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                            }[OrderFields]
                      : 'Error: If you provide "skip", you also need to provide "orderBy"'
                  : ByValid extends Prisma.True
                    ? {}
                    : {
                          [P in OrderFields]: P extends ByFields
                              ? never
                              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                      }[OrderFields]
    >(
        args: Prisma.SubsetIntersection<T, PaymentGroupByArgs, OrderByArg> & InputErrors
    ): {} extends InputErrors ? GetPaymentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>;
    /**
     * Fields of the Payment model
     */
    readonly fields: PaymentFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Payment.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__PaymentClient<
    T,
    Null = never,
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
    GlobalOmitOptions = {}
> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    appointment<T extends Prisma.AppointmentDefaultArgs<ExtArgs> = {}>(
        args?: Prisma.Subset<T, Prisma.AppointmentDefaultArgs<ExtArgs>>
    ): Prisma.Prisma__AppointmentClient<
        | runtime.Types.Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, 'findUniqueOrThrow', GlobalOmitOptions>
        | Null,
        Null,
        ExtArgs,
        GlobalOmitOptions
    >;
    patient<T extends Prisma.PatientDefaultArgs<ExtArgs> = {}>(
        args?: Prisma.Subset<T, Prisma.PatientDefaultArgs<ExtArgs>>
    ): Prisma.Prisma__PatientClient<
        | runtime.Types.Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, 'findUniqueOrThrow', GlobalOmitOptions>
        | Null,
        Null,
        ExtArgs,
        GlobalOmitOptions
    >;
    bills<T extends Prisma.Payment$billsArgs<ExtArgs> = {}>(
        args?: Prisma.Subset<T, Prisma.Payment$billsArgs<ExtArgs>>
    ): Prisma.PrismaPromise<
        runtime.Types.Result.GetResult<Prisma.$PatientBillsPayload<ExtArgs>, T, 'findMany', GlobalOmitOptions> | Null
    >;
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(
        onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null,
        onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null
    ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(
        onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null
    ): runtime.Types.Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the Payment model
 */
export interface PaymentFieldRefs {
    readonly id: Prisma.FieldRef<'Payment', 'Int'>;
    readonly billId: Prisma.FieldRef<'Payment', 'Int'>;
    readonly patientId: Prisma.FieldRef<'Payment', 'String'>;
    readonly appointmentId: Prisma.FieldRef<'Payment', 'Int'>;
    readonly billDate: Prisma.FieldRef<'Payment', 'DateTime'>;
    readonly paymentDate: Prisma.FieldRef<'Payment', 'DateTime'>;
    readonly discount: Prisma.FieldRef<'Payment', 'Float'>;
    readonly totalAmount: Prisma.FieldRef<'Payment', 'Float'>;
    readonly amountPaid: Prisma.FieldRef<'Payment', 'Float'>;
    readonly paymentMethod: Prisma.FieldRef<'Payment', 'PaymentMethod'>;
    readonly status: Prisma.FieldRef<'Payment', 'PaymentStatus'>;
    readonly receiptNumber: Prisma.FieldRef<'Payment', 'Int'>;
    readonly createdAt: Prisma.FieldRef<'Payment', 'DateTime'>;
    readonly updatedAt: Prisma.FieldRef<'Payment', 'DateTime'>;
}

// Custom InputTypes
/**
 * Payment findUnique
 */
export type PaymentFindUniqueArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: Prisma.PaymentSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Payment
     */
    omit?: Prisma.PaymentOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.PaymentInclude<ExtArgs> | null;
    /**
     * Filter, which Payment to fetch.
     */
    where: Prisma.PaymentWhereUniqueInput;
};

/**
 * Payment findUniqueOrThrow
 */
export type PaymentFindUniqueOrThrowArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: Prisma.PaymentSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Payment
     */
    omit?: Prisma.PaymentOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.PaymentInclude<ExtArgs> | null;
    /**
     * Filter, which Payment to fetch.
     */
    where: Prisma.PaymentWhereUniqueInput;
};

/**
 * Payment findFirst
 */
export type PaymentFindFirstArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: Prisma.PaymentSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Payment
     */
    omit?: Prisma.PaymentOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.PaymentInclude<ExtArgs> | null;
    /**
     * Filter, which Payment to fetch.
     */
    where?: Prisma.PaymentWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Payments to fetch.
     */
    orderBy?: Prisma.PaymentOrderByWithRelationInput | Prisma.PaymentOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for Payments.
     */
    cursor?: Prisma.PaymentWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `Â±n` Payments from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Payments.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of Payments.
     */
    distinct?: Prisma.PaymentScalarFieldEnum | Prisma.PaymentScalarFieldEnum[];
};

/**
 * Payment findFirstOrThrow
 */
export type PaymentFindFirstOrThrowArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: Prisma.PaymentSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Payment
     */
    omit?: Prisma.PaymentOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.PaymentInclude<ExtArgs> | null;
    /**
     * Filter, which Payment to fetch.
     */
    where?: Prisma.PaymentWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Payments to fetch.
     */
    orderBy?: Prisma.PaymentOrderByWithRelationInput | Prisma.PaymentOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for Payments.
     */
    cursor?: Prisma.PaymentWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `Â±n` Payments from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Payments.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of Payments.
     */
    distinct?: Prisma.PaymentScalarFieldEnum | Prisma.PaymentScalarFieldEnum[];
};

/**
 * Payment findMany
 */
export type PaymentFindManyArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: Prisma.PaymentSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Payment
     */
    omit?: Prisma.PaymentOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.PaymentInclude<ExtArgs> | null;
    /**
     * Filter, which Payments to fetch.
     */
    where?: Prisma.PaymentWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Payments to fetch.
     */
    orderBy?: Prisma.PaymentOrderByWithRelationInput | Prisma.PaymentOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for listing Payments.
     */
    cursor?: Prisma.PaymentWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `Â±n` Payments from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Payments.
     */
    skip?: number;
    distinct?: Prisma.PaymentScalarFieldEnum | Prisma.PaymentScalarFieldEnum[];
};

/**
 * Payment create
 */
export type PaymentCreateArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: Prisma.PaymentSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Payment
     */
    omit?: Prisma.PaymentOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.PaymentInclude<ExtArgs> | null;
    /**
     * The data needed to create a Payment.
     */
    data: Prisma.XOR<Prisma.PaymentCreateInput, Prisma.PaymentUncheckedCreateInput>;
};

/**
 * Payment createMany
 */
export type PaymentCreateManyArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * The data used to create many Payments.
     */
    data: Prisma.PaymentCreateManyInput | Prisma.PaymentCreateManyInput[];
    skipDuplicates?: boolean;
};

/**
 * Payment createManyAndReturn
 */
export type PaymentCreateManyAndReturnArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: Prisma.PaymentSelectCreateManyAndReturn<ExtArgs> | null;
    /**
     * Omit specific fields from the Payment
     */
    omit?: Prisma.PaymentOmit<ExtArgs> | null;
    /**
     * The data used to create many Payments.
     */
    data: Prisma.PaymentCreateManyInput | Prisma.PaymentCreateManyInput[];
    skipDuplicates?: boolean;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.PaymentIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * Payment update
 */
export type PaymentUpdateArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: Prisma.PaymentSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Payment
     */
    omit?: Prisma.PaymentOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.PaymentInclude<ExtArgs> | null;
    /**
     * The data needed to update a Payment.
     */
    data: Prisma.XOR<Prisma.PaymentUpdateInput, Prisma.PaymentUncheckedUpdateInput>;
    /**
     * Choose, which Payment to update.
     */
    where: Prisma.PaymentWhereUniqueInput;
};

/**
 * Payment updateMany
 */
export type PaymentUpdateManyArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * The data used to update Payments.
     */
    data: Prisma.XOR<Prisma.PaymentUpdateManyMutationInput, Prisma.PaymentUncheckedUpdateManyInput>;
    /**
     * Filter which Payments to update
     */
    where?: Prisma.PaymentWhereInput;
    /**
     * Limit how many Payments to update.
     */
    limit?: number;
};

/**
 * Payment updateManyAndReturn
 */
export type PaymentUpdateManyAndReturnArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: Prisma.PaymentSelectUpdateManyAndReturn<ExtArgs> | null;
    /**
     * Omit specific fields from the Payment
     */
    omit?: Prisma.PaymentOmit<ExtArgs> | null;
    /**
     * The data used to update Payments.
     */
    data: Prisma.XOR<Prisma.PaymentUpdateManyMutationInput, Prisma.PaymentUncheckedUpdateManyInput>;
    /**
     * Filter which Payments to update
     */
    where?: Prisma.PaymentWhereInput;
    /**
     * Limit how many Payments to update.
     */
    limit?: number;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.PaymentIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * Payment upsert
 */
export type PaymentUpsertArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: Prisma.PaymentSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Payment
     */
    omit?: Prisma.PaymentOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.PaymentInclude<ExtArgs> | null;
    /**
     * The filter to search for the Payment to update in case it exists.
     */
    where: Prisma.PaymentWhereUniqueInput;
    /**
     * In case the Payment found by the `where` argument doesn't exist, create a new Payment with this data.
     */
    create: Prisma.XOR<Prisma.PaymentCreateInput, Prisma.PaymentUncheckedCreateInput>;
    /**
     * In case the Payment was found with the provided `where` argument, update it with this data.
     */
    update: Prisma.XOR<Prisma.PaymentUpdateInput, Prisma.PaymentUncheckedUpdateInput>;
};

/**
 * Payment delete
 */
export type PaymentDeleteArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: Prisma.PaymentSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Payment
     */
    omit?: Prisma.PaymentOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.PaymentInclude<ExtArgs> | null;
    /**
     * Filter which Payment to delete.
     */
    where: Prisma.PaymentWhereUniqueInput;
};

/**
 * Payment deleteMany
 */
export type PaymentDeleteManyArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Filter which Payments to delete
     */
    where?: Prisma.PaymentWhereInput;
    /**
     * Limit how many Payments to delete.
     */
    limit?: number;
};

/**
 * Payment.bills
 */
export type Payment$billsArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the PatientBills
     */
    select?: Prisma.PatientBillsSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the PatientBills
     */
    omit?: Prisma.PatientBillsOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.PatientBillsInclude<ExtArgs> | null;
    where?: Prisma.PatientBillsWhereInput;
    orderBy?: Prisma.PatientBillsOrderByWithRelationInput | Prisma.PatientBillsOrderByWithRelationInput[];
    cursor?: Prisma.PatientBillsWhereUniqueInput;
    take?: number;
    skip?: number;
    distinct?: Prisma.PatientBillsScalarFieldEnum | Prisma.PatientBillsScalarFieldEnum[];
};

/**
 * Payment without action
 */
export type PaymentDefaultArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: Prisma.PaymentSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Payment
     */
    omit?: Prisma.PaymentOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.PaymentInclude<ExtArgs> | null;
};
