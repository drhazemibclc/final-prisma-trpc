/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/**
 * This file exports the `Doctor` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from '@prisma/client/runtime/library';
import type * as $Enums from '../enums';
import type * as Prisma from '../internal/prismaNamespace';

/**
 * Model Doctor
 *
 */
export type DoctorModel = runtime.Types.Result.DefaultSelection<Prisma.$DoctorPayload>;

export type AggregateDoctor = {
    _count: DoctorCountAggregateOutputType | null;
    _min: DoctorMinAggregateOutputType | null;
    _max: DoctorMaxAggregateOutputType | null;
};

export type DoctorMinAggregateOutputType = {
    id: string | null;
    email: string | null;
    name: string | null;
    userId: string | null;
    specialization: string | null;
    licenseNumber: string | null;
    phone: string | null;
    address: string | null;
    department: string | null;
    img: string | null;
    colorCode: string | null;
    availabilityStatus: string | null;
    type: $Enums.JOBTYPE | null;
    role: $Enums.Role | null;
    createdAt: Date | null;
    updatedAt: Date | null;
};

export type DoctorMaxAggregateOutputType = {
    id: string | null;
    email: string | null;
    name: string | null;
    userId: string | null;
    specialization: string | null;
    licenseNumber: string | null;
    phone: string | null;
    address: string | null;
    department: string | null;
    img: string | null;
    colorCode: string | null;
    availabilityStatus: string | null;
    type: $Enums.JOBTYPE | null;
    role: $Enums.Role | null;
    createdAt: Date | null;
    updatedAt: Date | null;
};

export type DoctorCountAggregateOutputType = {
    id: number;
    email: number;
    name: number;
    userId: number;
    specialization: number;
    licenseNumber: number;
    phone: number;
    address: number;
    department: number;
    img: number;
    colorCode: number;
    availabilityStatus: number;
    type: number;
    role: number;
    createdAt: number;
    updatedAt: number;
    _all: number;
};

export type DoctorMinAggregateInputType = {
    id?: true;
    email?: true;
    name?: true;
    userId?: true;
    specialization?: true;
    licenseNumber?: true;
    phone?: true;
    address?: true;
    department?: true;
    img?: true;
    colorCode?: true;
    availabilityStatus?: true;
    type?: true;
    role?: true;
    createdAt?: true;
    updatedAt?: true;
};

export type DoctorMaxAggregateInputType = {
    id?: true;
    email?: true;
    name?: true;
    userId?: true;
    specialization?: true;
    licenseNumber?: true;
    phone?: true;
    address?: true;
    department?: true;
    img?: true;
    colorCode?: true;
    availabilityStatus?: true;
    type?: true;
    role?: true;
    createdAt?: true;
    updatedAt?: true;
};

export type DoctorCountAggregateInputType = {
    id?: true;
    email?: true;
    name?: true;
    userId?: true;
    specialization?: true;
    licenseNumber?: true;
    phone?: true;
    address?: true;
    department?: true;
    img?: true;
    colorCode?: true;
    availabilityStatus?: true;
    type?: true;
    role?: true;
    createdAt?: true;
    updatedAt?: true;
    _all?: true;
};

export type DoctorAggregateArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Filter which Doctor to aggregate.
     */
    where?: Prisma.DoctorWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Doctors to fetch.
     */
    orderBy?: Prisma.DoctorOrderByWithRelationInput | Prisma.DoctorOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the start position
     */
    cursor?: Prisma.DoctorWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `Â±n` Doctors from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Doctors.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Count returned Doctors
     **/
    _count?: true | DoctorCountAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the minimum value
     **/
    _min?: DoctorMinAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the maximum value
     **/
    _max?: DoctorMaxAggregateInputType;
};

export type GetDoctorAggregateType<T extends DoctorAggregateArgs> = {
    [P in keyof T & keyof AggregateDoctor]: P extends '_count' | 'count'
        ? T[P] extends true
            ? number
            : Prisma.GetScalarType<T[P], AggregateDoctor[P]>
        : Prisma.GetScalarType<T[P], AggregateDoctor[P]>;
};

export type DoctorGroupByArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    where?: Prisma.DoctorWhereInput;
    orderBy?: Prisma.DoctorOrderByWithAggregationInput | Prisma.DoctorOrderByWithAggregationInput[];
    by: Prisma.DoctorScalarFieldEnum[] | Prisma.DoctorScalarFieldEnum;
    having?: Prisma.DoctorScalarWhereWithAggregatesInput;
    take?: number;
    skip?: number;
    _count?: DoctorCountAggregateInputType | true;
    _min?: DoctorMinAggregateInputType;
    _max?: DoctorMaxAggregateInputType;
};

export type DoctorGroupByOutputType = {
    id: string;
    email: string;
    name: string;
    userId: string;
    specialization: string;
    licenseNumber: string | null;
    phone: string | null;
    address: string | null;
    department: string | null;
    img: string | null;
    colorCode: string | null;
    availabilityStatus: string | null;
    type: $Enums.JOBTYPE;
    role: $Enums.Role | null;
    createdAt: Date;
    updatedAt: Date;
    _count: DoctorCountAggregateOutputType | null;
    _min: DoctorMinAggregateOutputType | null;
    _max: DoctorMaxAggregateOutputType | null;
};

type GetDoctorGroupByPayload<T extends DoctorGroupByArgs> = Prisma.PrismaPromise<
    Array<
        Prisma.PickEnumerable<DoctorGroupByOutputType, T['by']> & {
            [P in keyof T & keyof DoctorGroupByOutputType]: P extends '_count'
                ? T[P] extends boolean
                    ? number
                    : Prisma.GetScalarType<T[P], DoctorGroupByOutputType[P]>
                : Prisma.GetScalarType<T[P], DoctorGroupByOutputType[P]>;
        }
    >
>;

export type DoctorWhereInput = {
    AND?: Prisma.DoctorWhereInput | Prisma.DoctorWhereInput[];
    OR?: Prisma.DoctorWhereInput[];
    NOT?: Prisma.DoctorWhereInput | Prisma.DoctorWhereInput[];
    id?: Prisma.StringFilter<'Doctor'> | string;
    email?: Prisma.StringFilter<'Doctor'> | string;
    name?: Prisma.StringFilter<'Doctor'> | string;
    userId?: Prisma.StringFilter<'Doctor'> | string;
    specialization?: Prisma.StringFilter<'Doctor'> | string;
    licenseNumber?: Prisma.StringNullableFilter<'Doctor'> | string | null;
    phone?: Prisma.StringNullableFilter<'Doctor'> | string | null;
    address?: Prisma.StringNullableFilter<'Doctor'> | string | null;
    department?: Prisma.StringNullableFilter<'Doctor'> | string | null;
    img?: Prisma.StringNullableFilter<'Doctor'> | string | null;
    colorCode?: Prisma.StringNullableFilter<'Doctor'> | string | null;
    availabilityStatus?: Prisma.StringNullableFilter<'Doctor'> | string | null;
    type?: Prisma.EnumJOBTYPEFilter<'Doctor'> | $Enums.JOBTYPE;
    role?: Prisma.EnumRoleNullableFilter<'Doctor'> | $Enums.Role | null;
    createdAt?: Prisma.DateTimeFilter<'Doctor'> | Date | string;
    updatedAt?: Prisma.DateTimeFilter<'Doctor'> | Date | string;
    user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>;
    workingDays?: Prisma.WorkingDaysListRelationFilter;
    appointments?: Prisma.AppointmentListRelationFilter;
    ratings?: Prisma.RatingListRelationFilter;
    diagnosis?: Prisma.DiagnosisListRelationFilter;
    Prescription?: Prisma.PrescriptionListRelationFilter;
};

export type DoctorOrderByWithRelationInput = {
    id?: Prisma.SortOrder;
    email?: Prisma.SortOrder;
    name?: Prisma.SortOrder;
    userId?: Prisma.SortOrder;
    specialization?: Prisma.SortOrder;
    licenseNumber?: Prisma.SortOrderInput | Prisma.SortOrder;
    phone?: Prisma.SortOrderInput | Prisma.SortOrder;
    address?: Prisma.SortOrderInput | Prisma.SortOrder;
    department?: Prisma.SortOrderInput | Prisma.SortOrder;
    img?: Prisma.SortOrderInput | Prisma.SortOrder;
    colorCode?: Prisma.SortOrderInput | Prisma.SortOrder;
    availabilityStatus?: Prisma.SortOrderInput | Prisma.SortOrder;
    type?: Prisma.SortOrder;
    role?: Prisma.SortOrderInput | Prisma.SortOrder;
    createdAt?: Prisma.SortOrder;
    updatedAt?: Prisma.SortOrder;
    user?: Prisma.UserOrderByWithRelationInput;
    workingDays?: Prisma.WorkingDaysOrderByRelationAggregateInput;
    appointments?: Prisma.AppointmentOrderByRelationAggregateInput;
    ratings?: Prisma.RatingOrderByRelationAggregateInput;
    diagnosis?: Prisma.DiagnosisOrderByRelationAggregateInput;
    Prescription?: Prisma.PrescriptionOrderByRelationAggregateInput;
};

export type DoctorWhereUniqueInput = Prisma.AtLeast<
    {
        id?: string;
        email?: string;
        userId?: string;
        AND?: Prisma.DoctorWhereInput | Prisma.DoctorWhereInput[];
        OR?: Prisma.DoctorWhereInput[];
        NOT?: Prisma.DoctorWhereInput | Prisma.DoctorWhereInput[];
        name?: Prisma.StringFilter<'Doctor'> | string;
        specialization?: Prisma.StringFilter<'Doctor'> | string;
        licenseNumber?: Prisma.StringNullableFilter<'Doctor'> | string | null;
        phone?: Prisma.StringNullableFilter<'Doctor'> | string | null;
        address?: Prisma.StringNullableFilter<'Doctor'> | string | null;
        department?: Prisma.StringNullableFilter<'Doctor'> | string | null;
        img?: Prisma.StringNullableFilter<'Doctor'> | string | null;
        colorCode?: Prisma.StringNullableFilter<'Doctor'> | string | null;
        availabilityStatus?: Prisma.StringNullableFilter<'Doctor'> | string | null;
        type?: Prisma.EnumJOBTYPEFilter<'Doctor'> | $Enums.JOBTYPE;
        role?: Prisma.EnumRoleNullableFilter<'Doctor'> | $Enums.Role | null;
        createdAt?: Prisma.DateTimeFilter<'Doctor'> | Date | string;
        updatedAt?: Prisma.DateTimeFilter<'Doctor'> | Date | string;
        user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>;
        workingDays?: Prisma.WorkingDaysListRelationFilter;
        appointments?: Prisma.AppointmentListRelationFilter;
        ratings?: Prisma.RatingListRelationFilter;
        diagnosis?: Prisma.DiagnosisListRelationFilter;
        Prescription?: Prisma.PrescriptionListRelationFilter;
    },
    'id' | 'email' | 'userId'
>;

export type DoctorOrderByWithAggregationInput = {
    id?: Prisma.SortOrder;
    email?: Prisma.SortOrder;
    name?: Prisma.SortOrder;
    userId?: Prisma.SortOrder;
    specialization?: Prisma.SortOrder;
    licenseNumber?: Prisma.SortOrderInput | Prisma.SortOrder;
    phone?: Prisma.SortOrderInput | Prisma.SortOrder;
    address?: Prisma.SortOrderInput | Prisma.SortOrder;
    department?: Prisma.SortOrderInput | Prisma.SortOrder;
    img?: Prisma.SortOrderInput | Prisma.SortOrder;
    colorCode?: Prisma.SortOrderInput | Prisma.SortOrder;
    availabilityStatus?: Prisma.SortOrderInput | Prisma.SortOrder;
    type?: Prisma.SortOrder;
    role?: Prisma.SortOrderInput | Prisma.SortOrder;
    createdAt?: Prisma.SortOrder;
    updatedAt?: Prisma.SortOrder;
    _count?: Prisma.DoctorCountOrderByAggregateInput;
    _max?: Prisma.DoctorMaxOrderByAggregateInput;
    _min?: Prisma.DoctorMinOrderByAggregateInput;
};

export type DoctorScalarWhereWithAggregatesInput = {
    AND?: Prisma.DoctorScalarWhereWithAggregatesInput | Prisma.DoctorScalarWhereWithAggregatesInput[];
    OR?: Prisma.DoctorScalarWhereWithAggregatesInput[];
    NOT?: Prisma.DoctorScalarWhereWithAggregatesInput | Prisma.DoctorScalarWhereWithAggregatesInput[];
    id?: Prisma.StringWithAggregatesFilter<'Doctor'> | string;
    email?: Prisma.StringWithAggregatesFilter<'Doctor'> | string;
    name?: Prisma.StringWithAggregatesFilter<'Doctor'> | string;
    userId?: Prisma.StringWithAggregatesFilter<'Doctor'> | string;
    specialization?: Prisma.StringWithAggregatesFilter<'Doctor'> | string;
    licenseNumber?: Prisma.StringNullableWithAggregatesFilter<'Doctor'> | string | null;
    phone?: Prisma.StringNullableWithAggregatesFilter<'Doctor'> | string | null;
    address?: Prisma.StringNullableWithAggregatesFilter<'Doctor'> | string | null;
    department?: Prisma.StringNullableWithAggregatesFilter<'Doctor'> | string | null;
    img?: Prisma.StringNullableWithAggregatesFilter<'Doctor'> | string | null;
    colorCode?: Prisma.StringNullableWithAggregatesFilter<'Doctor'> | string | null;
    availabilityStatus?: Prisma.StringNullableWithAggregatesFilter<'Doctor'> | string | null;
    type?: Prisma.EnumJOBTYPEWithAggregatesFilter<'Doctor'> | $Enums.JOBTYPE;
    role?: Prisma.EnumRoleNullableWithAggregatesFilter<'Doctor'> | $Enums.Role | null;
    createdAt?: Prisma.DateTimeWithAggregatesFilter<'Doctor'> | Date | string;
    updatedAt?: Prisma.DateTimeWithAggregatesFilter<'Doctor'> | Date | string;
};

export type DoctorCreateInput = {
    id: string;
    email: string;
    name: string;
    specialization: string;
    licenseNumber?: string | null;
    phone?: string | null;
    address?: string | null;
    department?: string | null;
    img?: string | null;
    colorCode?: string | null;
    availabilityStatus?: string | null;
    type?: $Enums.JOBTYPE;
    role?: $Enums.Role | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    user: Prisma.UserCreateNestedOneWithoutDoctorInput;
    workingDays?: Prisma.WorkingDaysCreateNestedManyWithoutDoctorInput;
    appointments?: Prisma.AppointmentCreateNestedManyWithoutDoctorInput;
    ratings?: Prisma.RatingCreateNestedManyWithoutDoctorInput;
    diagnosis?: Prisma.DiagnosisCreateNestedManyWithoutDoctorInput;
    Prescription?: Prisma.PrescriptionCreateNestedManyWithoutDoctorInput;
};

export type DoctorUncheckedCreateInput = {
    id: string;
    email: string;
    name: string;
    userId: string;
    specialization: string;
    licenseNumber?: string | null;
    phone?: string | null;
    address?: string | null;
    department?: string | null;
    img?: string | null;
    colorCode?: string | null;
    availabilityStatus?: string | null;
    type?: $Enums.JOBTYPE;
    role?: $Enums.Role | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    workingDays?: Prisma.WorkingDaysUncheckedCreateNestedManyWithoutDoctorInput;
    appointments?: Prisma.AppointmentUncheckedCreateNestedManyWithoutDoctorInput;
    ratings?: Prisma.RatingUncheckedCreateNestedManyWithoutDoctorInput;
    diagnosis?: Prisma.DiagnosisUncheckedCreateNestedManyWithoutDoctorInput;
    Prescription?: Prisma.PrescriptionUncheckedCreateNestedManyWithoutDoctorInput;
};

export type DoctorUpdateInput = {
    id?: Prisma.StringFieldUpdateOperationsInput | string;
    email?: Prisma.StringFieldUpdateOperationsInput | string;
    name?: Prisma.StringFieldUpdateOperationsInput | string;
    specialization?: Prisma.StringFieldUpdateOperationsInput | string;
    licenseNumber?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    department?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    img?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    colorCode?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    availabilityStatus?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    type?: Prisma.EnumJOBTYPEFieldUpdateOperationsInput | $Enums.JOBTYPE;
    role?: Prisma.NullableEnumRoleFieldUpdateOperationsInput | $Enums.Role | null;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    user?: Prisma.UserUpdateOneRequiredWithoutDoctorNestedInput;
    workingDays?: Prisma.WorkingDaysUpdateManyWithoutDoctorNestedInput;
    appointments?: Prisma.AppointmentUpdateManyWithoutDoctorNestedInput;
    ratings?: Prisma.RatingUpdateManyWithoutDoctorNestedInput;
    diagnosis?: Prisma.DiagnosisUpdateManyWithoutDoctorNestedInput;
    Prescription?: Prisma.PrescriptionUpdateManyWithoutDoctorNestedInput;
};

export type DoctorUncheckedUpdateInput = {
    id?: Prisma.StringFieldUpdateOperationsInput | string;
    email?: Prisma.StringFieldUpdateOperationsInput | string;
    name?: Prisma.StringFieldUpdateOperationsInput | string;
    userId?: Prisma.StringFieldUpdateOperationsInput | string;
    specialization?: Prisma.StringFieldUpdateOperationsInput | string;
    licenseNumber?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    department?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    img?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    colorCode?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    availabilityStatus?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    type?: Prisma.EnumJOBTYPEFieldUpdateOperationsInput | $Enums.JOBTYPE;
    role?: Prisma.NullableEnumRoleFieldUpdateOperationsInput | $Enums.Role | null;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    workingDays?: Prisma.WorkingDaysUncheckedUpdateManyWithoutDoctorNestedInput;
    appointments?: Prisma.AppointmentUncheckedUpdateManyWithoutDoctorNestedInput;
    ratings?: Prisma.RatingUncheckedUpdateManyWithoutDoctorNestedInput;
    diagnosis?: Prisma.DiagnosisUncheckedUpdateManyWithoutDoctorNestedInput;
    Prescription?: Prisma.PrescriptionUncheckedUpdateManyWithoutDoctorNestedInput;
};

export type DoctorCreateManyInput = {
    id: string;
    email: string;
    name: string;
    userId: string;
    specialization: string;
    licenseNumber?: string | null;
    phone?: string | null;
    address?: string | null;
    department?: string | null;
    img?: string | null;
    colorCode?: string | null;
    availabilityStatus?: string | null;
    type?: $Enums.JOBTYPE;
    role?: $Enums.Role | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
};

export type DoctorUpdateManyMutationInput = {
    id?: Prisma.StringFieldUpdateOperationsInput | string;
    email?: Prisma.StringFieldUpdateOperationsInput | string;
    name?: Prisma.StringFieldUpdateOperationsInput | string;
    specialization?: Prisma.StringFieldUpdateOperationsInput | string;
    licenseNumber?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    department?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    img?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    colorCode?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    availabilityStatus?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    type?: Prisma.EnumJOBTYPEFieldUpdateOperationsInput | $Enums.JOBTYPE;
    role?: Prisma.NullableEnumRoleFieldUpdateOperationsInput | $Enums.Role | null;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type DoctorUncheckedUpdateManyInput = {
    id?: Prisma.StringFieldUpdateOperationsInput | string;
    email?: Prisma.StringFieldUpdateOperationsInput | string;
    name?: Prisma.StringFieldUpdateOperationsInput | string;
    userId?: Prisma.StringFieldUpdateOperationsInput | string;
    specialization?: Prisma.StringFieldUpdateOperationsInput | string;
    licenseNumber?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    department?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    img?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    colorCode?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    availabilityStatus?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    type?: Prisma.EnumJOBTYPEFieldUpdateOperationsInput | $Enums.JOBTYPE;
    role?: Prisma.NullableEnumRoleFieldUpdateOperationsInput | $Enums.Role | null;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type DoctorListRelationFilter = {
    every?: Prisma.DoctorWhereInput;
    some?: Prisma.DoctorWhereInput;
    none?: Prisma.DoctorWhereInput;
};

export type DoctorOrderByRelationAggregateInput = {
    _count?: Prisma.SortOrder;
};

export type DoctorCountOrderByAggregateInput = {
    id?: Prisma.SortOrder;
    email?: Prisma.SortOrder;
    name?: Prisma.SortOrder;
    userId?: Prisma.SortOrder;
    specialization?: Prisma.SortOrder;
    licenseNumber?: Prisma.SortOrder;
    phone?: Prisma.SortOrder;
    address?: Prisma.SortOrder;
    department?: Prisma.SortOrder;
    img?: Prisma.SortOrder;
    colorCode?: Prisma.SortOrder;
    availabilityStatus?: Prisma.SortOrder;
    type?: Prisma.SortOrder;
    role?: Prisma.SortOrder;
    createdAt?: Prisma.SortOrder;
    updatedAt?: Prisma.SortOrder;
};

export type DoctorMaxOrderByAggregateInput = {
    id?: Prisma.SortOrder;
    email?: Prisma.SortOrder;
    name?: Prisma.SortOrder;
    userId?: Prisma.SortOrder;
    specialization?: Prisma.SortOrder;
    licenseNumber?: Prisma.SortOrder;
    phone?: Prisma.SortOrder;
    address?: Prisma.SortOrder;
    department?: Prisma.SortOrder;
    img?: Prisma.SortOrder;
    colorCode?: Prisma.SortOrder;
    availabilityStatus?: Prisma.SortOrder;
    type?: Prisma.SortOrder;
    role?: Prisma.SortOrder;
    createdAt?: Prisma.SortOrder;
    updatedAt?: Prisma.SortOrder;
};

export type DoctorMinOrderByAggregateInput = {
    id?: Prisma.SortOrder;
    email?: Prisma.SortOrder;
    name?: Prisma.SortOrder;
    userId?: Prisma.SortOrder;
    specialization?: Prisma.SortOrder;
    licenseNumber?: Prisma.SortOrder;
    phone?: Prisma.SortOrder;
    address?: Prisma.SortOrder;
    department?: Prisma.SortOrder;
    img?: Prisma.SortOrder;
    colorCode?: Prisma.SortOrder;
    availabilityStatus?: Prisma.SortOrder;
    type?: Prisma.SortOrder;
    role?: Prisma.SortOrder;
    createdAt?: Prisma.SortOrder;
    updatedAt?: Prisma.SortOrder;
};

export type DoctorScalarRelationFilter = {
    is?: Prisma.DoctorWhereInput;
    isNot?: Prisma.DoctorWhereInput;
};

export type DoctorNullableScalarRelationFilter = {
    is?: Prisma.DoctorWhereInput | null;
    isNot?: Prisma.DoctorWhereInput | null;
};

export type DoctorCreateNestedManyWithoutUserInput = {
    create?:
        | Prisma.XOR<Prisma.DoctorCreateWithoutUserInput, Prisma.DoctorUncheckedCreateWithoutUserInput>
        | Prisma.DoctorCreateWithoutUserInput[]
        | Prisma.DoctorUncheckedCreateWithoutUserInput[];
    connectOrCreate?: Prisma.DoctorCreateOrConnectWithoutUserInput | Prisma.DoctorCreateOrConnectWithoutUserInput[];
    createMany?: Prisma.DoctorCreateManyUserInputEnvelope;
    connect?: Prisma.DoctorWhereUniqueInput | Prisma.DoctorWhereUniqueInput[];
};

export type DoctorUncheckedCreateNestedManyWithoutUserInput = {
    create?:
        | Prisma.XOR<Prisma.DoctorCreateWithoutUserInput, Prisma.DoctorUncheckedCreateWithoutUserInput>
        | Prisma.DoctorCreateWithoutUserInput[]
        | Prisma.DoctorUncheckedCreateWithoutUserInput[];
    connectOrCreate?: Prisma.DoctorCreateOrConnectWithoutUserInput | Prisma.DoctorCreateOrConnectWithoutUserInput[];
    createMany?: Prisma.DoctorCreateManyUserInputEnvelope;
    connect?: Prisma.DoctorWhereUniqueInput | Prisma.DoctorWhereUniqueInput[];
};

export type DoctorUpdateManyWithoutUserNestedInput = {
    create?:
        | Prisma.XOR<Prisma.DoctorCreateWithoutUserInput, Prisma.DoctorUncheckedCreateWithoutUserInput>
        | Prisma.DoctorCreateWithoutUserInput[]
        | Prisma.DoctorUncheckedCreateWithoutUserInput[];
    connectOrCreate?: Prisma.DoctorCreateOrConnectWithoutUserInput | Prisma.DoctorCreateOrConnectWithoutUserInput[];
    upsert?: Prisma.DoctorUpsertWithWhereUniqueWithoutUserInput | Prisma.DoctorUpsertWithWhereUniqueWithoutUserInput[];
    createMany?: Prisma.DoctorCreateManyUserInputEnvelope;
    set?: Prisma.DoctorWhereUniqueInput | Prisma.DoctorWhereUniqueInput[];
    disconnect?: Prisma.DoctorWhereUniqueInput | Prisma.DoctorWhereUniqueInput[];
    delete?: Prisma.DoctorWhereUniqueInput | Prisma.DoctorWhereUniqueInput[];
    connect?: Prisma.DoctorWhereUniqueInput | Prisma.DoctorWhereUniqueInput[];
    update?: Prisma.DoctorUpdateWithWhereUniqueWithoutUserInput | Prisma.DoctorUpdateWithWhereUniqueWithoutUserInput[];
    updateMany?: Prisma.DoctorUpdateManyWithWhereWithoutUserInput | Prisma.DoctorUpdateManyWithWhereWithoutUserInput[];
    deleteMany?: Prisma.DoctorScalarWhereInput | Prisma.DoctorScalarWhereInput[];
};

export type DoctorUncheckedUpdateManyWithoutUserNestedInput = {
    create?:
        | Prisma.XOR<Prisma.DoctorCreateWithoutUserInput, Prisma.DoctorUncheckedCreateWithoutUserInput>
        | Prisma.DoctorCreateWithoutUserInput[]
        | Prisma.DoctorUncheckedCreateWithoutUserInput[];
    connectOrCreate?: Prisma.DoctorCreateOrConnectWithoutUserInput | Prisma.DoctorCreateOrConnectWithoutUserInput[];
    upsert?: Prisma.DoctorUpsertWithWhereUniqueWithoutUserInput | Prisma.DoctorUpsertWithWhereUniqueWithoutUserInput[];
    createMany?: Prisma.DoctorCreateManyUserInputEnvelope;
    set?: Prisma.DoctorWhereUniqueInput | Prisma.DoctorWhereUniqueInput[];
    disconnect?: Prisma.DoctorWhereUniqueInput | Prisma.DoctorWhereUniqueInput[];
    delete?: Prisma.DoctorWhereUniqueInput | Prisma.DoctorWhereUniqueInput[];
    connect?: Prisma.DoctorWhereUniqueInput | Prisma.DoctorWhereUniqueInput[];
    update?: Prisma.DoctorUpdateWithWhereUniqueWithoutUserInput | Prisma.DoctorUpdateWithWhereUniqueWithoutUserInput[];
    updateMany?: Prisma.DoctorUpdateManyWithWhereWithoutUserInput | Prisma.DoctorUpdateManyWithWhereWithoutUserInput[];
    deleteMany?: Prisma.DoctorScalarWhereInput | Prisma.DoctorScalarWhereInput[];
};

export type EnumJOBTYPEFieldUpdateOperationsInput = {
    set?: $Enums.JOBTYPE;
};

export type DoctorCreateNestedOneWithoutWorkingDaysInput = {
    create?: Prisma.XOR<
        Prisma.DoctorCreateWithoutWorkingDaysInput,
        Prisma.DoctorUncheckedCreateWithoutWorkingDaysInput
    >;
    connectOrCreate?: Prisma.DoctorCreateOrConnectWithoutWorkingDaysInput;
    connect?: Prisma.DoctorWhereUniqueInput;
};

export type DoctorUpdateOneRequiredWithoutWorkingDaysNestedInput = {
    create?: Prisma.XOR<
        Prisma.DoctorCreateWithoutWorkingDaysInput,
        Prisma.DoctorUncheckedCreateWithoutWorkingDaysInput
    >;
    connectOrCreate?: Prisma.DoctorCreateOrConnectWithoutWorkingDaysInput;
    upsert?: Prisma.DoctorUpsertWithoutWorkingDaysInput;
    connect?: Prisma.DoctorWhereUniqueInput;
    update?: Prisma.XOR<
        Prisma.XOR<
            Prisma.DoctorUpdateToOneWithWhereWithoutWorkingDaysInput,
            Prisma.DoctorUpdateWithoutWorkingDaysInput
        >,
        Prisma.DoctorUncheckedUpdateWithoutWorkingDaysInput
    >;
};

export type DoctorCreateNestedOneWithoutAppointmentsInput = {
    create?: Prisma.XOR<
        Prisma.DoctorCreateWithoutAppointmentsInput,
        Prisma.DoctorUncheckedCreateWithoutAppointmentsInput
    >;
    connectOrCreate?: Prisma.DoctorCreateOrConnectWithoutAppointmentsInput;
    connect?: Prisma.DoctorWhereUniqueInput;
};

export type DoctorUpdateOneRequiredWithoutAppointmentsNestedInput = {
    create?: Prisma.XOR<
        Prisma.DoctorCreateWithoutAppointmentsInput,
        Prisma.DoctorUncheckedCreateWithoutAppointmentsInput
    >;
    connectOrCreate?: Prisma.DoctorCreateOrConnectWithoutAppointmentsInput;
    upsert?: Prisma.DoctorUpsertWithoutAppointmentsInput;
    connect?: Prisma.DoctorWhereUniqueInput;
    update?: Prisma.XOR<
        Prisma.XOR<
            Prisma.DoctorUpdateToOneWithWhereWithoutAppointmentsInput,
            Prisma.DoctorUpdateWithoutAppointmentsInput
        >,
        Prisma.DoctorUncheckedUpdateWithoutAppointmentsInput
    >;
};

export type DoctorCreateNestedOneWithoutDiagnosisInput = {
    create?: Prisma.XOR<Prisma.DoctorCreateWithoutDiagnosisInput, Prisma.DoctorUncheckedCreateWithoutDiagnosisInput>;
    connectOrCreate?: Prisma.DoctorCreateOrConnectWithoutDiagnosisInput;
    connect?: Prisma.DoctorWhereUniqueInput;
};

export type DoctorUpdateOneRequiredWithoutDiagnosisNestedInput = {
    create?: Prisma.XOR<Prisma.DoctorCreateWithoutDiagnosisInput, Prisma.DoctorUncheckedCreateWithoutDiagnosisInput>;
    connectOrCreate?: Prisma.DoctorCreateOrConnectWithoutDiagnosisInput;
    upsert?: Prisma.DoctorUpsertWithoutDiagnosisInput;
    connect?: Prisma.DoctorWhereUniqueInput;
    update?: Prisma.XOR<
        Prisma.XOR<Prisma.DoctorUpdateToOneWithWhereWithoutDiagnosisInput, Prisma.DoctorUpdateWithoutDiagnosisInput>,
        Prisma.DoctorUncheckedUpdateWithoutDiagnosisInput
    >;
};

export type DoctorCreateNestedOneWithoutRatingsInput = {
    create?: Prisma.XOR<Prisma.DoctorCreateWithoutRatingsInput, Prisma.DoctorUncheckedCreateWithoutRatingsInput>;
    connectOrCreate?: Prisma.DoctorCreateOrConnectWithoutRatingsInput;
    connect?: Prisma.DoctorWhereUniqueInput;
};

export type DoctorUpdateOneRequiredWithoutRatingsNestedInput = {
    create?: Prisma.XOR<Prisma.DoctorCreateWithoutRatingsInput, Prisma.DoctorUncheckedCreateWithoutRatingsInput>;
    connectOrCreate?: Prisma.DoctorCreateOrConnectWithoutRatingsInput;
    upsert?: Prisma.DoctorUpsertWithoutRatingsInput;
    connect?: Prisma.DoctorWhereUniqueInput;
    update?: Prisma.XOR<
        Prisma.XOR<Prisma.DoctorUpdateToOneWithWhereWithoutRatingsInput, Prisma.DoctorUpdateWithoutRatingsInput>,
        Prisma.DoctorUncheckedUpdateWithoutRatingsInput
    >;
};

export type DoctorCreateNestedOneWithoutPrescriptionInput = {
    create?: Prisma.XOR<
        Prisma.DoctorCreateWithoutPrescriptionInput,
        Prisma.DoctorUncheckedCreateWithoutPrescriptionInput
    >;
    connectOrCreate?: Prisma.DoctorCreateOrConnectWithoutPrescriptionInput;
    connect?: Prisma.DoctorWhereUniqueInput;
};

export type DoctorUpdateOneWithoutPrescriptionNestedInput = {
    create?: Prisma.XOR<
        Prisma.DoctorCreateWithoutPrescriptionInput,
        Prisma.DoctorUncheckedCreateWithoutPrescriptionInput
    >;
    connectOrCreate?: Prisma.DoctorCreateOrConnectWithoutPrescriptionInput;
    upsert?: Prisma.DoctorUpsertWithoutPrescriptionInput;
    disconnect?: Prisma.DoctorWhereInput | boolean;
    delete?: Prisma.DoctorWhereInput | boolean;
    connect?: Prisma.DoctorWhereUniqueInput;
    update?: Prisma.XOR<
        Prisma.XOR<
            Prisma.DoctorUpdateToOneWithWhereWithoutPrescriptionInput,
            Prisma.DoctorUpdateWithoutPrescriptionInput
        >,
        Prisma.DoctorUncheckedUpdateWithoutPrescriptionInput
    >;
};

export type DoctorCreateWithoutUserInput = {
    id: string;
    email: string;
    name: string;
    specialization: string;
    licenseNumber?: string | null;
    phone?: string | null;
    address?: string | null;
    department?: string | null;
    img?: string | null;
    colorCode?: string | null;
    availabilityStatus?: string | null;
    type?: $Enums.JOBTYPE;
    role?: $Enums.Role | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    workingDays?: Prisma.WorkingDaysCreateNestedManyWithoutDoctorInput;
    appointments?: Prisma.AppointmentCreateNestedManyWithoutDoctorInput;
    ratings?: Prisma.RatingCreateNestedManyWithoutDoctorInput;
    diagnosis?: Prisma.DiagnosisCreateNestedManyWithoutDoctorInput;
    Prescription?: Prisma.PrescriptionCreateNestedManyWithoutDoctorInput;
};

export type DoctorUncheckedCreateWithoutUserInput = {
    id: string;
    email: string;
    name: string;
    specialization: string;
    licenseNumber?: string | null;
    phone?: string | null;
    address?: string | null;
    department?: string | null;
    img?: string | null;
    colorCode?: string | null;
    availabilityStatus?: string | null;
    type?: $Enums.JOBTYPE;
    role?: $Enums.Role | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    workingDays?: Prisma.WorkingDaysUncheckedCreateNestedManyWithoutDoctorInput;
    appointments?: Prisma.AppointmentUncheckedCreateNestedManyWithoutDoctorInput;
    ratings?: Prisma.RatingUncheckedCreateNestedManyWithoutDoctorInput;
    diagnosis?: Prisma.DiagnosisUncheckedCreateNestedManyWithoutDoctorInput;
    Prescription?: Prisma.PrescriptionUncheckedCreateNestedManyWithoutDoctorInput;
};

export type DoctorCreateOrConnectWithoutUserInput = {
    where: Prisma.DoctorWhereUniqueInput;
    create: Prisma.XOR<Prisma.DoctorCreateWithoutUserInput, Prisma.DoctorUncheckedCreateWithoutUserInput>;
};

export type DoctorCreateManyUserInputEnvelope = {
    data: Prisma.DoctorCreateManyUserInput | Prisma.DoctorCreateManyUserInput[];
    skipDuplicates?: boolean;
};

export type DoctorUpsertWithWhereUniqueWithoutUserInput = {
    where: Prisma.DoctorWhereUniqueInput;
    update: Prisma.XOR<Prisma.DoctorUpdateWithoutUserInput, Prisma.DoctorUncheckedUpdateWithoutUserInput>;
    create: Prisma.XOR<Prisma.DoctorCreateWithoutUserInput, Prisma.DoctorUncheckedCreateWithoutUserInput>;
};

export type DoctorUpdateWithWhereUniqueWithoutUserInput = {
    where: Prisma.DoctorWhereUniqueInput;
    data: Prisma.XOR<Prisma.DoctorUpdateWithoutUserInput, Prisma.DoctorUncheckedUpdateWithoutUserInput>;
};

export type DoctorUpdateManyWithWhereWithoutUserInput = {
    where: Prisma.DoctorScalarWhereInput;
    data: Prisma.XOR<Prisma.DoctorUpdateManyMutationInput, Prisma.DoctorUncheckedUpdateManyWithoutUserInput>;
};

export type DoctorScalarWhereInput = {
    AND?: Prisma.DoctorScalarWhereInput | Prisma.DoctorScalarWhereInput[];
    OR?: Prisma.DoctorScalarWhereInput[];
    NOT?: Prisma.DoctorScalarWhereInput | Prisma.DoctorScalarWhereInput[];
    id?: Prisma.StringFilter<'Doctor'> | string;
    email?: Prisma.StringFilter<'Doctor'> | string;
    name?: Prisma.StringFilter<'Doctor'> | string;
    userId?: Prisma.StringFilter<'Doctor'> | string;
    specialization?: Prisma.StringFilter<'Doctor'> | string;
    licenseNumber?: Prisma.StringNullableFilter<'Doctor'> | string | null;
    phone?: Prisma.StringNullableFilter<'Doctor'> | string | null;
    address?: Prisma.StringNullableFilter<'Doctor'> | string | null;
    department?: Prisma.StringNullableFilter<'Doctor'> | string | null;
    img?: Prisma.StringNullableFilter<'Doctor'> | string | null;
    colorCode?: Prisma.StringNullableFilter<'Doctor'> | string | null;
    availabilityStatus?: Prisma.StringNullableFilter<'Doctor'> | string | null;
    type?: Prisma.EnumJOBTYPEFilter<'Doctor'> | $Enums.JOBTYPE;
    role?: Prisma.EnumRoleNullableFilter<'Doctor'> | $Enums.Role | null;
    createdAt?: Prisma.DateTimeFilter<'Doctor'> | Date | string;
    updatedAt?: Prisma.DateTimeFilter<'Doctor'> | Date | string;
};

export type DoctorCreateWithoutWorkingDaysInput = {
    id: string;
    email: string;
    name: string;
    specialization: string;
    licenseNumber?: string | null;
    phone?: string | null;
    address?: string | null;
    department?: string | null;
    img?: string | null;
    colorCode?: string | null;
    availabilityStatus?: string | null;
    type?: $Enums.JOBTYPE;
    role?: $Enums.Role | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    user: Prisma.UserCreateNestedOneWithoutDoctorInput;
    appointments?: Prisma.AppointmentCreateNestedManyWithoutDoctorInput;
    ratings?: Prisma.RatingCreateNestedManyWithoutDoctorInput;
    diagnosis?: Prisma.DiagnosisCreateNestedManyWithoutDoctorInput;
    Prescription?: Prisma.PrescriptionCreateNestedManyWithoutDoctorInput;
};

export type DoctorUncheckedCreateWithoutWorkingDaysInput = {
    id: string;
    email: string;
    name: string;
    userId: string;
    specialization: string;
    licenseNumber?: string | null;
    phone?: string | null;
    address?: string | null;
    department?: string | null;
    img?: string | null;
    colorCode?: string | null;
    availabilityStatus?: string | null;
    type?: $Enums.JOBTYPE;
    role?: $Enums.Role | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    appointments?: Prisma.AppointmentUncheckedCreateNestedManyWithoutDoctorInput;
    ratings?: Prisma.RatingUncheckedCreateNestedManyWithoutDoctorInput;
    diagnosis?: Prisma.DiagnosisUncheckedCreateNestedManyWithoutDoctorInput;
    Prescription?: Prisma.PrescriptionUncheckedCreateNestedManyWithoutDoctorInput;
};

export type DoctorCreateOrConnectWithoutWorkingDaysInput = {
    where: Prisma.DoctorWhereUniqueInput;
    create: Prisma.XOR<Prisma.DoctorCreateWithoutWorkingDaysInput, Prisma.DoctorUncheckedCreateWithoutWorkingDaysInput>;
};

export type DoctorUpsertWithoutWorkingDaysInput = {
    update: Prisma.XOR<Prisma.DoctorUpdateWithoutWorkingDaysInput, Prisma.DoctorUncheckedUpdateWithoutWorkingDaysInput>;
    create: Prisma.XOR<Prisma.DoctorCreateWithoutWorkingDaysInput, Prisma.DoctorUncheckedCreateWithoutWorkingDaysInput>;
    where?: Prisma.DoctorWhereInput;
};

export type DoctorUpdateToOneWithWhereWithoutWorkingDaysInput = {
    where?: Prisma.DoctorWhereInput;
    data: Prisma.XOR<Prisma.DoctorUpdateWithoutWorkingDaysInput, Prisma.DoctorUncheckedUpdateWithoutWorkingDaysInput>;
};

export type DoctorUpdateWithoutWorkingDaysInput = {
    id?: Prisma.StringFieldUpdateOperationsInput | string;
    email?: Prisma.StringFieldUpdateOperationsInput | string;
    name?: Prisma.StringFieldUpdateOperationsInput | string;
    specialization?: Prisma.StringFieldUpdateOperationsInput | string;
    licenseNumber?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    department?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    img?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    colorCode?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    availabilityStatus?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    type?: Prisma.EnumJOBTYPEFieldUpdateOperationsInput | $Enums.JOBTYPE;
    role?: Prisma.NullableEnumRoleFieldUpdateOperationsInput | $Enums.Role | null;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    user?: Prisma.UserUpdateOneRequiredWithoutDoctorNestedInput;
    appointments?: Prisma.AppointmentUpdateManyWithoutDoctorNestedInput;
    ratings?: Prisma.RatingUpdateManyWithoutDoctorNestedInput;
    diagnosis?: Prisma.DiagnosisUpdateManyWithoutDoctorNestedInput;
    Prescription?: Prisma.PrescriptionUpdateManyWithoutDoctorNestedInput;
};

export type DoctorUncheckedUpdateWithoutWorkingDaysInput = {
    id?: Prisma.StringFieldUpdateOperationsInput | string;
    email?: Prisma.StringFieldUpdateOperationsInput | string;
    name?: Prisma.StringFieldUpdateOperationsInput | string;
    userId?: Prisma.StringFieldUpdateOperationsInput | string;
    specialization?: Prisma.StringFieldUpdateOperationsInput | string;
    licenseNumber?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    department?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    img?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    colorCode?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    availabilityStatus?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    type?: Prisma.EnumJOBTYPEFieldUpdateOperationsInput | $Enums.JOBTYPE;
    role?: Prisma.NullableEnumRoleFieldUpdateOperationsInput | $Enums.Role | null;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    appointments?: Prisma.AppointmentUncheckedUpdateManyWithoutDoctorNestedInput;
    ratings?: Prisma.RatingUncheckedUpdateManyWithoutDoctorNestedInput;
    diagnosis?: Prisma.DiagnosisUncheckedUpdateManyWithoutDoctorNestedInput;
    Prescription?: Prisma.PrescriptionUncheckedUpdateManyWithoutDoctorNestedInput;
};

export type DoctorCreateWithoutAppointmentsInput = {
    id: string;
    email: string;
    name: string;
    specialization: string;
    licenseNumber?: string | null;
    phone?: string | null;
    address?: string | null;
    department?: string | null;
    img?: string | null;
    colorCode?: string | null;
    availabilityStatus?: string | null;
    type?: $Enums.JOBTYPE;
    role?: $Enums.Role | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    user: Prisma.UserCreateNestedOneWithoutDoctorInput;
    workingDays?: Prisma.WorkingDaysCreateNestedManyWithoutDoctorInput;
    ratings?: Prisma.RatingCreateNestedManyWithoutDoctorInput;
    diagnosis?: Prisma.DiagnosisCreateNestedManyWithoutDoctorInput;
    Prescription?: Prisma.PrescriptionCreateNestedManyWithoutDoctorInput;
};

export type DoctorUncheckedCreateWithoutAppointmentsInput = {
    id: string;
    email: string;
    name: string;
    userId: string;
    specialization: string;
    licenseNumber?: string | null;
    phone?: string | null;
    address?: string | null;
    department?: string | null;
    img?: string | null;
    colorCode?: string | null;
    availabilityStatus?: string | null;
    type?: $Enums.JOBTYPE;
    role?: $Enums.Role | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    workingDays?: Prisma.WorkingDaysUncheckedCreateNestedManyWithoutDoctorInput;
    ratings?: Prisma.RatingUncheckedCreateNestedManyWithoutDoctorInput;
    diagnosis?: Prisma.DiagnosisUncheckedCreateNestedManyWithoutDoctorInput;
    Prescription?: Prisma.PrescriptionUncheckedCreateNestedManyWithoutDoctorInput;
};

export type DoctorCreateOrConnectWithoutAppointmentsInput = {
    where: Prisma.DoctorWhereUniqueInput;
    create: Prisma.XOR<
        Prisma.DoctorCreateWithoutAppointmentsInput,
        Prisma.DoctorUncheckedCreateWithoutAppointmentsInput
    >;
};

export type DoctorUpsertWithoutAppointmentsInput = {
    update: Prisma.XOR<
        Prisma.DoctorUpdateWithoutAppointmentsInput,
        Prisma.DoctorUncheckedUpdateWithoutAppointmentsInput
    >;
    create: Prisma.XOR<
        Prisma.DoctorCreateWithoutAppointmentsInput,
        Prisma.DoctorUncheckedCreateWithoutAppointmentsInput
    >;
    where?: Prisma.DoctorWhereInput;
};

export type DoctorUpdateToOneWithWhereWithoutAppointmentsInput = {
    where?: Prisma.DoctorWhereInput;
    data: Prisma.XOR<Prisma.DoctorUpdateWithoutAppointmentsInput, Prisma.DoctorUncheckedUpdateWithoutAppointmentsInput>;
};

export type DoctorUpdateWithoutAppointmentsInput = {
    id?: Prisma.StringFieldUpdateOperationsInput | string;
    email?: Prisma.StringFieldUpdateOperationsInput | string;
    name?: Prisma.StringFieldUpdateOperationsInput | string;
    specialization?: Prisma.StringFieldUpdateOperationsInput | string;
    licenseNumber?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    department?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    img?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    colorCode?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    availabilityStatus?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    type?: Prisma.EnumJOBTYPEFieldUpdateOperationsInput | $Enums.JOBTYPE;
    role?: Prisma.NullableEnumRoleFieldUpdateOperationsInput | $Enums.Role | null;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    user?: Prisma.UserUpdateOneRequiredWithoutDoctorNestedInput;
    workingDays?: Prisma.WorkingDaysUpdateManyWithoutDoctorNestedInput;
    ratings?: Prisma.RatingUpdateManyWithoutDoctorNestedInput;
    diagnosis?: Prisma.DiagnosisUpdateManyWithoutDoctorNestedInput;
    Prescription?: Prisma.PrescriptionUpdateManyWithoutDoctorNestedInput;
};

export type DoctorUncheckedUpdateWithoutAppointmentsInput = {
    id?: Prisma.StringFieldUpdateOperationsInput | string;
    email?: Prisma.StringFieldUpdateOperationsInput | string;
    name?: Prisma.StringFieldUpdateOperationsInput | string;
    userId?: Prisma.StringFieldUpdateOperationsInput | string;
    specialization?: Prisma.StringFieldUpdateOperationsInput | string;
    licenseNumber?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    department?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    img?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    colorCode?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    availabilityStatus?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    type?: Prisma.EnumJOBTYPEFieldUpdateOperationsInput | $Enums.JOBTYPE;
    role?: Prisma.NullableEnumRoleFieldUpdateOperationsInput | $Enums.Role | null;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    workingDays?: Prisma.WorkingDaysUncheckedUpdateManyWithoutDoctorNestedInput;
    ratings?: Prisma.RatingUncheckedUpdateManyWithoutDoctorNestedInput;
    diagnosis?: Prisma.DiagnosisUncheckedUpdateManyWithoutDoctorNestedInput;
    Prescription?: Prisma.PrescriptionUncheckedUpdateManyWithoutDoctorNestedInput;
};

export type DoctorCreateWithoutDiagnosisInput = {
    id: string;
    email: string;
    name: string;
    specialization: string;
    licenseNumber?: string | null;
    phone?: string | null;
    address?: string | null;
    department?: string | null;
    img?: string | null;
    colorCode?: string | null;
    availabilityStatus?: string | null;
    type?: $Enums.JOBTYPE;
    role?: $Enums.Role | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    user: Prisma.UserCreateNestedOneWithoutDoctorInput;
    workingDays?: Prisma.WorkingDaysCreateNestedManyWithoutDoctorInput;
    appointments?: Prisma.AppointmentCreateNestedManyWithoutDoctorInput;
    ratings?: Prisma.RatingCreateNestedManyWithoutDoctorInput;
    Prescription?: Prisma.PrescriptionCreateNestedManyWithoutDoctorInput;
};

export type DoctorUncheckedCreateWithoutDiagnosisInput = {
    id: string;
    email: string;
    name: string;
    userId: string;
    specialization: string;
    licenseNumber?: string | null;
    phone?: string | null;
    address?: string | null;
    department?: string | null;
    img?: string | null;
    colorCode?: string | null;
    availabilityStatus?: string | null;
    type?: $Enums.JOBTYPE;
    role?: $Enums.Role | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    workingDays?: Prisma.WorkingDaysUncheckedCreateNestedManyWithoutDoctorInput;
    appointments?: Prisma.AppointmentUncheckedCreateNestedManyWithoutDoctorInput;
    ratings?: Prisma.RatingUncheckedCreateNestedManyWithoutDoctorInput;
    Prescription?: Prisma.PrescriptionUncheckedCreateNestedManyWithoutDoctorInput;
};

export type DoctorCreateOrConnectWithoutDiagnosisInput = {
    where: Prisma.DoctorWhereUniqueInput;
    create: Prisma.XOR<Prisma.DoctorCreateWithoutDiagnosisInput, Prisma.DoctorUncheckedCreateWithoutDiagnosisInput>;
};

export type DoctorUpsertWithoutDiagnosisInput = {
    update: Prisma.XOR<Prisma.DoctorUpdateWithoutDiagnosisInput, Prisma.DoctorUncheckedUpdateWithoutDiagnosisInput>;
    create: Prisma.XOR<Prisma.DoctorCreateWithoutDiagnosisInput, Prisma.DoctorUncheckedCreateWithoutDiagnosisInput>;
    where?: Prisma.DoctorWhereInput;
};

export type DoctorUpdateToOneWithWhereWithoutDiagnosisInput = {
    where?: Prisma.DoctorWhereInput;
    data: Prisma.XOR<Prisma.DoctorUpdateWithoutDiagnosisInput, Prisma.DoctorUncheckedUpdateWithoutDiagnosisInput>;
};

export type DoctorUpdateWithoutDiagnosisInput = {
    id?: Prisma.StringFieldUpdateOperationsInput | string;
    email?: Prisma.StringFieldUpdateOperationsInput | string;
    name?: Prisma.StringFieldUpdateOperationsInput | string;
    specialization?: Prisma.StringFieldUpdateOperationsInput | string;
    licenseNumber?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    department?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    img?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    colorCode?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    availabilityStatus?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    type?: Prisma.EnumJOBTYPEFieldUpdateOperationsInput | $Enums.JOBTYPE;
    role?: Prisma.NullableEnumRoleFieldUpdateOperationsInput | $Enums.Role | null;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    user?: Prisma.UserUpdateOneRequiredWithoutDoctorNestedInput;
    workingDays?: Prisma.WorkingDaysUpdateManyWithoutDoctorNestedInput;
    appointments?: Prisma.AppointmentUpdateManyWithoutDoctorNestedInput;
    ratings?: Prisma.RatingUpdateManyWithoutDoctorNestedInput;
    Prescription?: Prisma.PrescriptionUpdateManyWithoutDoctorNestedInput;
};

export type DoctorUncheckedUpdateWithoutDiagnosisInput = {
    id?: Prisma.StringFieldUpdateOperationsInput | string;
    email?: Prisma.StringFieldUpdateOperationsInput | string;
    name?: Prisma.StringFieldUpdateOperationsInput | string;
    userId?: Prisma.StringFieldUpdateOperationsInput | string;
    specialization?: Prisma.StringFieldUpdateOperationsInput | string;
    licenseNumber?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    department?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    img?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    colorCode?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    availabilityStatus?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    type?: Prisma.EnumJOBTYPEFieldUpdateOperationsInput | $Enums.JOBTYPE;
    role?: Prisma.NullableEnumRoleFieldUpdateOperationsInput | $Enums.Role | null;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    workingDays?: Prisma.WorkingDaysUncheckedUpdateManyWithoutDoctorNestedInput;
    appointments?: Prisma.AppointmentUncheckedUpdateManyWithoutDoctorNestedInput;
    ratings?: Prisma.RatingUncheckedUpdateManyWithoutDoctorNestedInput;
    Prescription?: Prisma.PrescriptionUncheckedUpdateManyWithoutDoctorNestedInput;
};

export type DoctorCreateWithoutRatingsInput = {
    id: string;
    email: string;
    name: string;
    specialization: string;
    licenseNumber?: string | null;
    phone?: string | null;
    address?: string | null;
    department?: string | null;
    img?: string | null;
    colorCode?: string | null;
    availabilityStatus?: string | null;
    type?: $Enums.JOBTYPE;
    role?: $Enums.Role | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    user: Prisma.UserCreateNestedOneWithoutDoctorInput;
    workingDays?: Prisma.WorkingDaysCreateNestedManyWithoutDoctorInput;
    appointments?: Prisma.AppointmentCreateNestedManyWithoutDoctorInput;
    diagnosis?: Prisma.DiagnosisCreateNestedManyWithoutDoctorInput;
    Prescription?: Prisma.PrescriptionCreateNestedManyWithoutDoctorInput;
};

export type DoctorUncheckedCreateWithoutRatingsInput = {
    id: string;
    email: string;
    name: string;
    userId: string;
    specialization: string;
    licenseNumber?: string | null;
    phone?: string | null;
    address?: string | null;
    department?: string | null;
    img?: string | null;
    colorCode?: string | null;
    availabilityStatus?: string | null;
    type?: $Enums.JOBTYPE;
    role?: $Enums.Role | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    workingDays?: Prisma.WorkingDaysUncheckedCreateNestedManyWithoutDoctorInput;
    appointments?: Prisma.AppointmentUncheckedCreateNestedManyWithoutDoctorInput;
    diagnosis?: Prisma.DiagnosisUncheckedCreateNestedManyWithoutDoctorInput;
    Prescription?: Prisma.PrescriptionUncheckedCreateNestedManyWithoutDoctorInput;
};

export type DoctorCreateOrConnectWithoutRatingsInput = {
    where: Prisma.DoctorWhereUniqueInput;
    create: Prisma.XOR<Prisma.DoctorCreateWithoutRatingsInput, Prisma.DoctorUncheckedCreateWithoutRatingsInput>;
};

export type DoctorUpsertWithoutRatingsInput = {
    update: Prisma.XOR<Prisma.DoctorUpdateWithoutRatingsInput, Prisma.DoctorUncheckedUpdateWithoutRatingsInput>;
    create: Prisma.XOR<Prisma.DoctorCreateWithoutRatingsInput, Prisma.DoctorUncheckedCreateWithoutRatingsInput>;
    where?: Prisma.DoctorWhereInput;
};

export type DoctorUpdateToOneWithWhereWithoutRatingsInput = {
    where?: Prisma.DoctorWhereInput;
    data: Prisma.XOR<Prisma.DoctorUpdateWithoutRatingsInput, Prisma.DoctorUncheckedUpdateWithoutRatingsInput>;
};

export type DoctorUpdateWithoutRatingsInput = {
    id?: Prisma.StringFieldUpdateOperationsInput | string;
    email?: Prisma.StringFieldUpdateOperationsInput | string;
    name?: Prisma.StringFieldUpdateOperationsInput | string;
    specialization?: Prisma.StringFieldUpdateOperationsInput | string;
    licenseNumber?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    department?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    img?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    colorCode?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    availabilityStatus?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    type?: Prisma.EnumJOBTYPEFieldUpdateOperationsInput | $Enums.JOBTYPE;
    role?: Prisma.NullableEnumRoleFieldUpdateOperationsInput | $Enums.Role | null;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    user?: Prisma.UserUpdateOneRequiredWithoutDoctorNestedInput;
    workingDays?: Prisma.WorkingDaysUpdateManyWithoutDoctorNestedInput;
    appointments?: Prisma.AppointmentUpdateManyWithoutDoctorNestedInput;
    diagnosis?: Prisma.DiagnosisUpdateManyWithoutDoctorNestedInput;
    Prescription?: Prisma.PrescriptionUpdateManyWithoutDoctorNestedInput;
};

export type DoctorUncheckedUpdateWithoutRatingsInput = {
    id?: Prisma.StringFieldUpdateOperationsInput | string;
    email?: Prisma.StringFieldUpdateOperationsInput | string;
    name?: Prisma.StringFieldUpdateOperationsInput | string;
    userId?: Prisma.StringFieldUpdateOperationsInput | string;
    specialization?: Prisma.StringFieldUpdateOperationsInput | string;
    licenseNumber?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    department?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    img?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    colorCode?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    availabilityStatus?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    type?: Prisma.EnumJOBTYPEFieldUpdateOperationsInput | $Enums.JOBTYPE;
    role?: Prisma.NullableEnumRoleFieldUpdateOperationsInput | $Enums.Role | null;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    workingDays?: Prisma.WorkingDaysUncheckedUpdateManyWithoutDoctorNestedInput;
    appointments?: Prisma.AppointmentUncheckedUpdateManyWithoutDoctorNestedInput;
    diagnosis?: Prisma.DiagnosisUncheckedUpdateManyWithoutDoctorNestedInput;
    Prescription?: Prisma.PrescriptionUncheckedUpdateManyWithoutDoctorNestedInput;
};

export type DoctorCreateWithoutPrescriptionInput = {
    id: string;
    email: string;
    name: string;
    specialization: string;
    licenseNumber?: string | null;
    phone?: string | null;
    address?: string | null;
    department?: string | null;
    img?: string | null;
    colorCode?: string | null;
    availabilityStatus?: string | null;
    type?: $Enums.JOBTYPE;
    role?: $Enums.Role | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    user: Prisma.UserCreateNestedOneWithoutDoctorInput;
    workingDays?: Prisma.WorkingDaysCreateNestedManyWithoutDoctorInput;
    appointments?: Prisma.AppointmentCreateNestedManyWithoutDoctorInput;
    ratings?: Prisma.RatingCreateNestedManyWithoutDoctorInput;
    diagnosis?: Prisma.DiagnosisCreateNestedManyWithoutDoctorInput;
};

export type DoctorUncheckedCreateWithoutPrescriptionInput = {
    id: string;
    email: string;
    name: string;
    userId: string;
    specialization: string;
    licenseNumber?: string | null;
    phone?: string | null;
    address?: string | null;
    department?: string | null;
    img?: string | null;
    colorCode?: string | null;
    availabilityStatus?: string | null;
    type?: $Enums.JOBTYPE;
    role?: $Enums.Role | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    workingDays?: Prisma.WorkingDaysUncheckedCreateNestedManyWithoutDoctorInput;
    appointments?: Prisma.AppointmentUncheckedCreateNestedManyWithoutDoctorInput;
    ratings?: Prisma.RatingUncheckedCreateNestedManyWithoutDoctorInput;
    diagnosis?: Prisma.DiagnosisUncheckedCreateNestedManyWithoutDoctorInput;
};

export type DoctorCreateOrConnectWithoutPrescriptionInput = {
    where: Prisma.DoctorWhereUniqueInput;
    create: Prisma.XOR<
        Prisma.DoctorCreateWithoutPrescriptionInput,
        Prisma.DoctorUncheckedCreateWithoutPrescriptionInput
    >;
};

export type DoctorUpsertWithoutPrescriptionInput = {
    update: Prisma.XOR<
        Prisma.DoctorUpdateWithoutPrescriptionInput,
        Prisma.DoctorUncheckedUpdateWithoutPrescriptionInput
    >;
    create: Prisma.XOR<
        Prisma.DoctorCreateWithoutPrescriptionInput,
        Prisma.DoctorUncheckedCreateWithoutPrescriptionInput
    >;
    where?: Prisma.DoctorWhereInput;
};

export type DoctorUpdateToOneWithWhereWithoutPrescriptionInput = {
    where?: Prisma.DoctorWhereInput;
    data: Prisma.XOR<Prisma.DoctorUpdateWithoutPrescriptionInput, Prisma.DoctorUncheckedUpdateWithoutPrescriptionInput>;
};

export type DoctorUpdateWithoutPrescriptionInput = {
    id?: Prisma.StringFieldUpdateOperationsInput | string;
    email?: Prisma.StringFieldUpdateOperationsInput | string;
    name?: Prisma.StringFieldUpdateOperationsInput | string;
    specialization?: Prisma.StringFieldUpdateOperationsInput | string;
    licenseNumber?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    department?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    img?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    colorCode?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    availabilityStatus?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    type?: Prisma.EnumJOBTYPEFieldUpdateOperationsInput | $Enums.JOBTYPE;
    role?: Prisma.NullableEnumRoleFieldUpdateOperationsInput | $Enums.Role | null;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    user?: Prisma.UserUpdateOneRequiredWithoutDoctorNestedInput;
    workingDays?: Prisma.WorkingDaysUpdateManyWithoutDoctorNestedInput;
    appointments?: Prisma.AppointmentUpdateManyWithoutDoctorNestedInput;
    ratings?: Prisma.RatingUpdateManyWithoutDoctorNestedInput;
    diagnosis?: Prisma.DiagnosisUpdateManyWithoutDoctorNestedInput;
};

export type DoctorUncheckedUpdateWithoutPrescriptionInput = {
    id?: Prisma.StringFieldUpdateOperationsInput | string;
    email?: Prisma.StringFieldUpdateOperationsInput | string;
    name?: Prisma.StringFieldUpdateOperationsInput | string;
    userId?: Prisma.StringFieldUpdateOperationsInput | string;
    specialization?: Prisma.StringFieldUpdateOperationsInput | string;
    licenseNumber?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    department?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    img?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    colorCode?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    availabilityStatus?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    type?: Prisma.EnumJOBTYPEFieldUpdateOperationsInput | $Enums.JOBTYPE;
    role?: Prisma.NullableEnumRoleFieldUpdateOperationsInput | $Enums.Role | null;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    workingDays?: Prisma.WorkingDaysUncheckedUpdateManyWithoutDoctorNestedInput;
    appointments?: Prisma.AppointmentUncheckedUpdateManyWithoutDoctorNestedInput;
    ratings?: Prisma.RatingUncheckedUpdateManyWithoutDoctorNestedInput;
    diagnosis?: Prisma.DiagnosisUncheckedUpdateManyWithoutDoctorNestedInput;
};

export type DoctorCreateManyUserInput = {
    id: string;
    email: string;
    name: string;
    specialization: string;
    licenseNumber?: string | null;
    phone?: string | null;
    address?: string | null;
    department?: string | null;
    img?: string | null;
    colorCode?: string | null;
    availabilityStatus?: string | null;
    type?: $Enums.JOBTYPE;
    role?: $Enums.Role | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
};

export type DoctorUpdateWithoutUserInput = {
    id?: Prisma.StringFieldUpdateOperationsInput | string;
    email?: Prisma.StringFieldUpdateOperationsInput | string;
    name?: Prisma.StringFieldUpdateOperationsInput | string;
    specialization?: Prisma.StringFieldUpdateOperationsInput | string;
    licenseNumber?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    department?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    img?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    colorCode?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    availabilityStatus?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    type?: Prisma.EnumJOBTYPEFieldUpdateOperationsInput | $Enums.JOBTYPE;
    role?: Prisma.NullableEnumRoleFieldUpdateOperationsInput | $Enums.Role | null;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    workingDays?: Prisma.WorkingDaysUpdateManyWithoutDoctorNestedInput;
    appointments?: Prisma.AppointmentUpdateManyWithoutDoctorNestedInput;
    ratings?: Prisma.RatingUpdateManyWithoutDoctorNestedInput;
    diagnosis?: Prisma.DiagnosisUpdateManyWithoutDoctorNestedInput;
    Prescription?: Prisma.PrescriptionUpdateManyWithoutDoctorNestedInput;
};

export type DoctorUncheckedUpdateWithoutUserInput = {
    id?: Prisma.StringFieldUpdateOperationsInput | string;
    email?: Prisma.StringFieldUpdateOperationsInput | string;
    name?: Prisma.StringFieldUpdateOperationsInput | string;
    specialization?: Prisma.StringFieldUpdateOperationsInput | string;
    licenseNumber?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    department?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    img?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    colorCode?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    availabilityStatus?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    type?: Prisma.EnumJOBTYPEFieldUpdateOperationsInput | $Enums.JOBTYPE;
    role?: Prisma.NullableEnumRoleFieldUpdateOperationsInput | $Enums.Role | null;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    workingDays?: Prisma.WorkingDaysUncheckedUpdateManyWithoutDoctorNestedInput;
    appointments?: Prisma.AppointmentUncheckedUpdateManyWithoutDoctorNestedInput;
    ratings?: Prisma.RatingUncheckedUpdateManyWithoutDoctorNestedInput;
    diagnosis?: Prisma.DiagnosisUncheckedUpdateManyWithoutDoctorNestedInput;
    Prescription?: Prisma.PrescriptionUncheckedUpdateManyWithoutDoctorNestedInput;
};

export type DoctorUncheckedUpdateManyWithoutUserInput = {
    id?: Prisma.StringFieldUpdateOperationsInput | string;
    email?: Prisma.StringFieldUpdateOperationsInput | string;
    name?: Prisma.StringFieldUpdateOperationsInput | string;
    specialization?: Prisma.StringFieldUpdateOperationsInput | string;
    licenseNumber?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    department?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    img?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    colorCode?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    availabilityStatus?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    type?: Prisma.EnumJOBTYPEFieldUpdateOperationsInput | $Enums.JOBTYPE;
    role?: Prisma.NullableEnumRoleFieldUpdateOperationsInput | $Enums.Role | null;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

/**
 * Count Type DoctorCountOutputType
 */

export type DoctorCountOutputType = {
    workingDays: number;
    appointments: number;
    ratings: number;
    diagnosis: number;
    Prescription: number;
};

export type DoctorCountOutputTypeSelect<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    workingDays?: boolean | DoctorCountOutputTypeCountWorkingDaysArgs;
    appointments?: boolean | DoctorCountOutputTypeCountAppointmentsArgs;
    ratings?: boolean | DoctorCountOutputTypeCountRatingsArgs;
    diagnosis?: boolean | DoctorCountOutputTypeCountDiagnosisArgs;
    Prescription?: boolean | DoctorCountOutputTypeCountPrescriptionArgs;
};

/**
 * DoctorCountOutputType without action
 */
export type DoctorCountOutputTypeDefaultArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the DoctorCountOutputType
     */
    select?: Prisma.DoctorCountOutputTypeSelect<ExtArgs> | null;
};

/**
 * DoctorCountOutputType without action
 */
export type DoctorCountOutputTypeCountWorkingDaysArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    where?: Prisma.WorkingDaysWhereInput;
};

/**
 * DoctorCountOutputType without action
 */
export type DoctorCountOutputTypeCountAppointmentsArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    where?: Prisma.AppointmentWhereInput;
};

/**
 * DoctorCountOutputType without action
 */
export type DoctorCountOutputTypeCountRatingsArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    where?: Prisma.RatingWhereInput;
};

/**
 * DoctorCountOutputType without action
 */
export type DoctorCountOutputTypeCountDiagnosisArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    where?: Prisma.DiagnosisWhereInput;
};

/**
 * DoctorCountOutputType without action
 */
export type DoctorCountOutputTypeCountPrescriptionArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    where?: Prisma.PrescriptionWhereInput;
};

export type DoctorSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
    runtime.Types.Extensions.GetSelect<
        {
            id?: boolean;
            email?: boolean;
            name?: boolean;
            userId?: boolean;
            specialization?: boolean;
            licenseNumber?: boolean;
            phone?: boolean;
            address?: boolean;
            department?: boolean;
            img?: boolean;
            colorCode?: boolean;
            availabilityStatus?: boolean;
            type?: boolean;
            role?: boolean;
            createdAt?: boolean;
            updatedAt?: boolean;
            user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
            workingDays?: boolean | Prisma.Doctor$workingDaysArgs<ExtArgs>;
            appointments?: boolean | Prisma.Doctor$appointmentsArgs<ExtArgs>;
            ratings?: boolean | Prisma.Doctor$ratingsArgs<ExtArgs>;
            diagnosis?: boolean | Prisma.Doctor$diagnosisArgs<ExtArgs>;
            Prescription?: boolean | Prisma.Doctor$PrescriptionArgs<ExtArgs>;
            _count?: boolean | Prisma.DoctorCountOutputTypeDefaultArgs<ExtArgs>;
        },
        ExtArgs['result']['doctor']
    >;

export type DoctorSelectCreateManyAndReturn<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
    {
        id?: boolean;
        email?: boolean;
        name?: boolean;
        userId?: boolean;
        specialization?: boolean;
        licenseNumber?: boolean;
        phone?: boolean;
        address?: boolean;
        department?: boolean;
        img?: boolean;
        colorCode?: boolean;
        availabilityStatus?: boolean;
        type?: boolean;
        role?: boolean;
        createdAt?: boolean;
        updatedAt?: boolean;
        user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
    },
    ExtArgs['result']['doctor']
>;

export type DoctorSelectUpdateManyAndReturn<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
    {
        id?: boolean;
        email?: boolean;
        name?: boolean;
        userId?: boolean;
        specialization?: boolean;
        licenseNumber?: boolean;
        phone?: boolean;
        address?: boolean;
        department?: boolean;
        img?: boolean;
        colorCode?: boolean;
        availabilityStatus?: boolean;
        type?: boolean;
        role?: boolean;
        createdAt?: boolean;
        updatedAt?: boolean;
        user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
    },
    ExtArgs['result']['doctor']
>;

export type DoctorSelectScalar = {
    id?: boolean;
    email?: boolean;
    name?: boolean;
    userId?: boolean;
    specialization?: boolean;
    licenseNumber?: boolean;
    phone?: boolean;
    address?: boolean;
    department?: boolean;
    img?: boolean;
    colorCode?: boolean;
    availabilityStatus?: boolean;
    type?: boolean;
    role?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
};

export type DoctorOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
    runtime.Types.Extensions.GetOmit<
        | 'id'
        | 'email'
        | 'name'
        | 'userId'
        | 'specialization'
        | 'licenseNumber'
        | 'phone'
        | 'address'
        | 'department'
        | 'img'
        | 'colorCode'
        | 'availabilityStatus'
        | 'type'
        | 'role'
        | 'createdAt'
        | 'updatedAt',
        ExtArgs['result']['doctor']
    >;
export type DoctorInclude<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
    workingDays?: boolean | Prisma.Doctor$workingDaysArgs<ExtArgs>;
    appointments?: boolean | Prisma.Doctor$appointmentsArgs<ExtArgs>;
    ratings?: boolean | Prisma.Doctor$ratingsArgs<ExtArgs>;
    diagnosis?: boolean | Prisma.Doctor$diagnosisArgs<ExtArgs>;
    Prescription?: boolean | Prisma.Doctor$PrescriptionArgs<ExtArgs>;
    _count?: boolean | Prisma.DoctorCountOutputTypeDefaultArgs<ExtArgs>;
};
export type DoctorIncludeCreateManyAndReturn<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
};
export type DoctorIncludeUpdateManyAndReturn<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
};

export type $DoctorPayload<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    name: 'Doctor';
    objects: {
        user: Prisma.$UserPayload<ExtArgs>;
        workingDays: Prisma.$WorkingDaysPayload<ExtArgs>[];
        appointments: Prisma.$AppointmentPayload<ExtArgs>[];
        ratings: Prisma.$RatingPayload<ExtArgs>[];
        diagnosis: Prisma.$DiagnosisPayload<ExtArgs>[];
        Prescription: Prisma.$PrescriptionPayload<ExtArgs>[];
    };
    scalars: runtime.Types.Extensions.GetPayloadResult<
        {
            id: string;
            email: string;
            name: string;
            userId: string;
            specialization: string;
            licenseNumber: string | null;
            phone: string | null;
            address: string | null;
            department: string | null;
            img: string | null;
            colorCode: string | null;
            availabilityStatus: string | null;
            type: $Enums.JOBTYPE;
            role: $Enums.Role | null;
            createdAt: Date;
            updatedAt: Date;
        },
        ExtArgs['result']['doctor']
    >;
    composites: {};
};

export type DoctorGetPayload<S extends boolean | null | undefined | DoctorDefaultArgs> = runtime.Types.Result.GetResult<
    Prisma.$DoctorPayload,
    S
>;

export type DoctorCountArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = Omit<DoctorFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: DoctorCountAggregateInputType | true;
};

export interface DoctorDelegate<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
    GlobalOmitOptions = {}
> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Doctor']; meta: { name: 'Doctor' } };
    /**
     * Find zero or one Doctor that matches the filter.
     * @param {DoctorFindUniqueArgs} args - Arguments to find a Doctor
     * @example
     * // Get one Doctor
     * const doctor = await prisma.doctor.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DoctorFindUniqueArgs>(
        args: Prisma.SelectSubset<T, DoctorFindUniqueArgs<ExtArgs>>
    ): Prisma.Prisma__DoctorClient<
        runtime.Types.Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, 'findUnique', GlobalOmitOptions> | null,
        null,
        ExtArgs,
        GlobalOmitOptions
    >;

    /**
     * Find one Doctor that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DoctorFindUniqueOrThrowArgs} args - Arguments to find a Doctor
     * @example
     * // Get one Doctor
     * const doctor = await prisma.doctor.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DoctorFindUniqueOrThrowArgs>(
        args: Prisma.SelectSubset<T, DoctorFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma.Prisma__DoctorClient<
        runtime.Types.Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, 'findUniqueOrThrow', GlobalOmitOptions>,
        never,
        ExtArgs,
        GlobalOmitOptions
    >;

    /**
     * Find the first Doctor that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorFindFirstArgs} args - Arguments to find a Doctor
     * @example
     * // Get one Doctor
     * const doctor = await prisma.doctor.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DoctorFindFirstArgs>(
        args?: Prisma.SelectSubset<T, DoctorFindFirstArgs<ExtArgs>>
    ): Prisma.Prisma__DoctorClient<
        runtime.Types.Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, 'findFirst', GlobalOmitOptions> | null,
        null,
        ExtArgs,
        GlobalOmitOptions
    >;

    /**
     * Find the first Doctor that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorFindFirstOrThrowArgs} args - Arguments to find a Doctor
     * @example
     * // Get one Doctor
     * const doctor = await prisma.doctor.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DoctorFindFirstOrThrowArgs>(
        args?: Prisma.SelectSubset<T, DoctorFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma.Prisma__DoctorClient<
        runtime.Types.Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, 'findFirstOrThrow', GlobalOmitOptions>,
        never,
        ExtArgs,
        GlobalOmitOptions
    >;

    /**
     * Find zero or more Doctors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Doctors
     * const doctors = await prisma.doctor.findMany()
     *
     * // Get first 10 Doctors
     * const doctors = await prisma.doctor.findMany({ take: 10 })
     *
     * // Only select the `id`
     * const doctorWithIdOnly = await prisma.doctor.findMany({ select: { id: true } })
     *
     */
    findMany<T extends DoctorFindManyArgs>(
        args?: Prisma.SelectSubset<T, DoctorFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<
        runtime.Types.Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, 'findMany', GlobalOmitOptions>
    >;

    /**
     * Create a Doctor.
     * @param {DoctorCreateArgs} args - Arguments to create a Doctor.
     * @example
     * // Create one Doctor
     * const Doctor = await prisma.doctor.create({
     *   data: {
     *     // ... data to create a Doctor
     *   }
     * })
     *
     */
    create<T extends DoctorCreateArgs>(
        args: Prisma.SelectSubset<T, DoctorCreateArgs<ExtArgs>>
    ): Prisma.Prisma__DoctorClient<
        runtime.Types.Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, 'create', GlobalOmitOptions>,
        never,
        ExtArgs,
        GlobalOmitOptions
    >;

    /**
     * Create many Doctors.
     * @param {DoctorCreateManyArgs} args - Arguments to create many Doctors.
     * @example
     * // Create many Doctors
     * const doctor = await prisma.doctor.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     */
    createMany<T extends DoctorCreateManyArgs>(
        args?: Prisma.SelectSubset<T, DoctorCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<Prisma.BatchPayload>;

    /**
     * Create many Doctors and returns the data saved in the database.
     * @param {DoctorCreateManyAndReturnArgs} args - Arguments to create many Doctors.
     * @example
     * // Create many Doctors
     * const doctor = await prisma.doctor.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     * // Create many Doctors and only return the `id`
     * const doctorWithIdOnly = await prisma.doctor.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     *
     */
    createManyAndReturn<T extends DoctorCreateManyAndReturnArgs>(
        args?: Prisma.SelectSubset<T, DoctorCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<
        runtime.Types.Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, 'createManyAndReturn', GlobalOmitOptions>
    >;

    /**
     * Delete a Doctor.
     * @param {DoctorDeleteArgs} args - Arguments to delete one Doctor.
     * @example
     * // Delete one Doctor
     * const Doctor = await prisma.doctor.delete({
     *   where: {
     *     // ... filter to delete one Doctor
     *   }
     * })
     *
     */
    delete<T extends DoctorDeleteArgs>(
        args: Prisma.SelectSubset<T, DoctorDeleteArgs<ExtArgs>>
    ): Prisma.Prisma__DoctorClient<
        runtime.Types.Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, 'delete', GlobalOmitOptions>,
        never,
        ExtArgs,
        GlobalOmitOptions
    >;

    /**
     * Update one Doctor.
     * @param {DoctorUpdateArgs} args - Arguments to update one Doctor.
     * @example
     * // Update one Doctor
     * const doctor = await prisma.doctor.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     */
    update<T extends DoctorUpdateArgs>(
        args: Prisma.SelectSubset<T, DoctorUpdateArgs<ExtArgs>>
    ): Prisma.Prisma__DoctorClient<
        runtime.Types.Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, 'update', GlobalOmitOptions>,
        never,
        ExtArgs,
        GlobalOmitOptions
    >;

    /**
     * Delete zero or more Doctors.
     * @param {DoctorDeleteManyArgs} args - Arguments to filter Doctors to delete.
     * @example
     * // Delete a few Doctors
     * const { count } = await prisma.doctor.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     *
     */
    deleteMany<T extends DoctorDeleteManyArgs>(
        args?: Prisma.SelectSubset<T, DoctorDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<Prisma.BatchPayload>;

    /**
     * Update zero or more Doctors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Doctors
     * const doctor = await prisma.doctor.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     */
    updateMany<T extends DoctorUpdateManyArgs>(
        args: Prisma.SelectSubset<T, DoctorUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<Prisma.BatchPayload>;

    /**
     * Update zero or more Doctors and returns the data updated in the database.
     * @param {DoctorUpdateManyAndReturnArgs} args - Arguments to update many Doctors.
     * @example
     * // Update many Doctors
     * const doctor = await prisma.doctor.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     * // Update zero or more Doctors and only return the `id`
     * const doctorWithIdOnly = await prisma.doctor.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     *
     */
    updateManyAndReturn<T extends DoctorUpdateManyAndReturnArgs>(
        args: Prisma.SelectSubset<T, DoctorUpdateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<
        runtime.Types.Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, 'updateManyAndReturn', GlobalOmitOptions>
    >;

    /**
     * Create or update one Doctor.
     * @param {DoctorUpsertArgs} args - Arguments to update or create a Doctor.
     * @example
     * // Update or create a Doctor
     * const doctor = await prisma.doctor.upsert({
     *   create: {
     *     // ... data to create a Doctor
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Doctor we want to update
     *   }
     * })
     */
    upsert<T extends DoctorUpsertArgs>(
        args: Prisma.SelectSubset<T, DoctorUpsertArgs<ExtArgs>>
    ): Prisma.Prisma__DoctorClient<
        runtime.Types.Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, 'upsert', GlobalOmitOptions>,
        never,
        ExtArgs,
        GlobalOmitOptions
    >;

    /**
     * Count the number of Doctors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorCountArgs} args - Arguments to filter Doctors to count.
     * @example
     * // Count the number of Doctors
     * const count = await prisma.doctor.count({
     *   where: {
     *     // ... the filter for the Doctors we want to count
     *   }
     * })
     **/
    count<T extends DoctorCountArgs>(
        args?: Prisma.Subset<T, DoctorCountArgs>
    ): Prisma.PrismaPromise<
        T extends runtime.Types.Utils.Record<'select', any>
            ? T['select'] extends true
                ? number
                : Prisma.GetScalarType<T['select'], DoctorCountAggregateOutputType>
            : number
    >;

    /**
     * Allows you to perform aggregations operations on a Doctor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
     **/
    aggregate<T extends DoctorAggregateArgs>(
        args: Prisma.Subset<T, DoctorAggregateArgs>
    ): Prisma.PrismaPromise<GetDoctorAggregateType<T>>;

    /**
     * Group by Doctor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     *
     **/
    groupBy<
        T extends DoctorGroupByArgs,
        HasSelectOrTake extends Prisma.Or<
            Prisma.Extends<'skip', Prisma.Keys<T>>,
            Prisma.Extends<'take', Prisma.Keys<T>>
        >,
        OrderByArg extends Prisma.True extends HasSelectOrTake
            ? { orderBy: DoctorGroupByArgs['orderBy'] }
            : { orderBy?: DoctorGroupByArgs['orderBy'] },
        OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
        ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
        ByValid extends Prisma.Has<ByFields, OrderFields>,
        HavingFields extends Prisma.GetHavingFields<T['having']>,
        HavingValid extends Prisma.Has<ByFields, HavingFields>,
        ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
        InputErrors extends ByEmpty extends Prisma.True
            ? `Error: "by" must not be empty.`
            : HavingValid extends Prisma.False
              ? {
                    [P in HavingFields]: P extends ByFields
                        ? never
                        : P extends string
                          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                          : [Error, 'Field ', P, ` in "having" needs to be provided in "by"`];
                }[HavingFields]
              : 'take' extends Prisma.Keys<T>
                ? 'orderBy' extends Prisma.Keys<T>
                    ? ByValid extends Prisma.True
                        ? {}
                        : {
                              [P in OrderFields]: P extends ByFields
                                  ? never
                                  : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                          }[OrderFields]
                    : 'Error: If you provide "take", you also need to provide "orderBy"'
                : 'skip' extends Prisma.Keys<T>
                  ? 'orderBy' extends Prisma.Keys<T>
                      ? ByValid extends Prisma.True
                          ? {}
                          : {
                                [P in OrderFields]: P extends ByFields
                                    ? never
                                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                            }[OrderFields]
                      : 'Error: If you provide "skip", you also need to provide "orderBy"'
                  : ByValid extends Prisma.True
                    ? {}
                    : {
                          [P in OrderFields]: P extends ByFields
                              ? never
                              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                      }[OrderFields]
    >(
        args: Prisma.SubsetIntersection<T, DoctorGroupByArgs, OrderByArg> & InputErrors
    ): {} extends InputErrors ? GetDoctorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>;
    /**
     * Fields of the Doctor model
     */
    readonly fields: DoctorFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Doctor.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__DoctorClient<
    T,
    Null = never,
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
    GlobalOmitOptions = {}
> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(
        args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>
    ): Prisma.Prisma__UserClient<
        runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow', GlobalOmitOptions> | Null,
        Null,
        ExtArgs,
        GlobalOmitOptions
    >;
    workingDays<T extends Prisma.Doctor$workingDaysArgs<ExtArgs> = {}>(
        args?: Prisma.Subset<T, Prisma.Doctor$workingDaysArgs<ExtArgs>>
    ): Prisma.PrismaPromise<
        runtime.Types.Result.GetResult<Prisma.$WorkingDaysPayload<ExtArgs>, T, 'findMany', GlobalOmitOptions> | Null
    >;
    appointments<T extends Prisma.Doctor$appointmentsArgs<ExtArgs> = {}>(
        args?: Prisma.Subset<T, Prisma.Doctor$appointmentsArgs<ExtArgs>>
    ): Prisma.PrismaPromise<
        runtime.Types.Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, 'findMany', GlobalOmitOptions> | Null
    >;
    ratings<T extends Prisma.Doctor$ratingsArgs<ExtArgs> = {}>(
        args?: Prisma.Subset<T, Prisma.Doctor$ratingsArgs<ExtArgs>>
    ): Prisma.PrismaPromise<
        runtime.Types.Result.GetResult<Prisma.$RatingPayload<ExtArgs>, T, 'findMany', GlobalOmitOptions> | Null
    >;
    diagnosis<T extends Prisma.Doctor$diagnosisArgs<ExtArgs> = {}>(
        args?: Prisma.Subset<T, Prisma.Doctor$diagnosisArgs<ExtArgs>>
    ): Prisma.PrismaPromise<
        runtime.Types.Result.GetResult<Prisma.$DiagnosisPayload<ExtArgs>, T, 'findMany', GlobalOmitOptions> | Null
    >;
    Prescription<T extends Prisma.Doctor$PrescriptionArgs<ExtArgs> = {}>(
        args?: Prisma.Subset<T, Prisma.Doctor$PrescriptionArgs<ExtArgs>>
    ): Prisma.PrismaPromise<
        runtime.Types.Result.GetResult<Prisma.$PrescriptionPayload<ExtArgs>, T, 'findMany', GlobalOmitOptions> | Null
    >;
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(
        onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null,
        onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null
    ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(
        onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null
    ): runtime.Types.Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the Doctor model
 */
export interface DoctorFieldRefs {
    readonly id: Prisma.FieldRef<'Doctor', 'String'>;
    readonly email: Prisma.FieldRef<'Doctor', 'String'>;
    readonly name: Prisma.FieldRef<'Doctor', 'String'>;
    readonly userId: Prisma.FieldRef<'Doctor', 'String'>;
    readonly specialization: Prisma.FieldRef<'Doctor', 'String'>;
    readonly licenseNumber: Prisma.FieldRef<'Doctor', 'String'>;
    readonly phone: Prisma.FieldRef<'Doctor', 'String'>;
    readonly address: Prisma.FieldRef<'Doctor', 'String'>;
    readonly department: Prisma.FieldRef<'Doctor', 'String'>;
    readonly img: Prisma.FieldRef<'Doctor', 'String'>;
    readonly colorCode: Prisma.FieldRef<'Doctor', 'String'>;
    readonly availabilityStatus: Prisma.FieldRef<'Doctor', 'String'>;
    readonly type: Prisma.FieldRef<'Doctor', 'JOBTYPE'>;
    readonly role: Prisma.FieldRef<'Doctor', 'Role'>;
    readonly createdAt: Prisma.FieldRef<'Doctor', 'DateTime'>;
    readonly updatedAt: Prisma.FieldRef<'Doctor', 'DateTime'>;
}

// Custom InputTypes
/**
 * Doctor findUnique
 */
export type DoctorFindUniqueArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the Doctor
     */
    select?: Prisma.DoctorSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Doctor
     */
    omit?: Prisma.DoctorOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.DoctorInclude<ExtArgs> | null;
    /**
     * Filter, which Doctor to fetch.
     */
    where: Prisma.DoctorWhereUniqueInput;
};

/**
 * Doctor findUniqueOrThrow
 */
export type DoctorFindUniqueOrThrowArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the Doctor
     */
    select?: Prisma.DoctorSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Doctor
     */
    omit?: Prisma.DoctorOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.DoctorInclude<ExtArgs> | null;
    /**
     * Filter, which Doctor to fetch.
     */
    where: Prisma.DoctorWhereUniqueInput;
};

/**
 * Doctor findFirst
 */
export type DoctorFindFirstArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the Doctor
     */
    select?: Prisma.DoctorSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Doctor
     */
    omit?: Prisma.DoctorOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.DoctorInclude<ExtArgs> | null;
    /**
     * Filter, which Doctor to fetch.
     */
    where?: Prisma.DoctorWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Doctors to fetch.
     */
    orderBy?: Prisma.DoctorOrderByWithRelationInput | Prisma.DoctorOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for Doctors.
     */
    cursor?: Prisma.DoctorWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `Â±n` Doctors from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Doctors.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of Doctors.
     */
    distinct?: Prisma.DoctorScalarFieldEnum | Prisma.DoctorScalarFieldEnum[];
};

/**
 * Doctor findFirstOrThrow
 */
export type DoctorFindFirstOrThrowArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the Doctor
     */
    select?: Prisma.DoctorSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Doctor
     */
    omit?: Prisma.DoctorOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.DoctorInclude<ExtArgs> | null;
    /**
     * Filter, which Doctor to fetch.
     */
    where?: Prisma.DoctorWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Doctors to fetch.
     */
    orderBy?: Prisma.DoctorOrderByWithRelationInput | Prisma.DoctorOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for Doctors.
     */
    cursor?: Prisma.DoctorWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `Â±n` Doctors from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Doctors.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of Doctors.
     */
    distinct?: Prisma.DoctorScalarFieldEnum | Prisma.DoctorScalarFieldEnum[];
};

/**
 * Doctor findMany
 */
export type DoctorFindManyArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the Doctor
     */
    select?: Prisma.DoctorSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Doctor
     */
    omit?: Prisma.DoctorOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.DoctorInclude<ExtArgs> | null;
    /**
     * Filter, which Doctors to fetch.
     */
    where?: Prisma.DoctorWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Doctors to fetch.
     */
    orderBy?: Prisma.DoctorOrderByWithRelationInput | Prisma.DoctorOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for listing Doctors.
     */
    cursor?: Prisma.DoctorWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `Â±n` Doctors from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Doctors.
     */
    skip?: number;
    distinct?: Prisma.DoctorScalarFieldEnum | Prisma.DoctorScalarFieldEnum[];
};

/**
 * Doctor create
 */
export type DoctorCreateArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the Doctor
     */
    select?: Prisma.DoctorSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Doctor
     */
    omit?: Prisma.DoctorOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.DoctorInclude<ExtArgs> | null;
    /**
     * The data needed to create a Doctor.
     */
    data: Prisma.XOR<Prisma.DoctorCreateInput, Prisma.DoctorUncheckedCreateInput>;
};

/**
 * Doctor createMany
 */
export type DoctorCreateManyArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * The data used to create many Doctors.
     */
    data: Prisma.DoctorCreateManyInput | Prisma.DoctorCreateManyInput[];
    skipDuplicates?: boolean;
};

/**
 * Doctor createManyAndReturn
 */
export type DoctorCreateManyAndReturnArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the Doctor
     */
    select?: Prisma.DoctorSelectCreateManyAndReturn<ExtArgs> | null;
    /**
     * Omit specific fields from the Doctor
     */
    omit?: Prisma.DoctorOmit<ExtArgs> | null;
    /**
     * The data used to create many Doctors.
     */
    data: Prisma.DoctorCreateManyInput | Prisma.DoctorCreateManyInput[];
    skipDuplicates?: boolean;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.DoctorIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * Doctor update
 */
export type DoctorUpdateArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the Doctor
     */
    select?: Prisma.DoctorSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Doctor
     */
    omit?: Prisma.DoctorOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.DoctorInclude<ExtArgs> | null;
    /**
     * The data needed to update a Doctor.
     */
    data: Prisma.XOR<Prisma.DoctorUpdateInput, Prisma.DoctorUncheckedUpdateInput>;
    /**
     * Choose, which Doctor to update.
     */
    where: Prisma.DoctorWhereUniqueInput;
};

/**
 * Doctor updateMany
 */
export type DoctorUpdateManyArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * The data used to update Doctors.
     */
    data: Prisma.XOR<Prisma.DoctorUpdateManyMutationInput, Prisma.DoctorUncheckedUpdateManyInput>;
    /**
     * Filter which Doctors to update
     */
    where?: Prisma.DoctorWhereInput;
    /**
     * Limit how many Doctors to update.
     */
    limit?: number;
};

/**
 * Doctor updateManyAndReturn
 */
export type DoctorUpdateManyAndReturnArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the Doctor
     */
    select?: Prisma.DoctorSelectUpdateManyAndReturn<ExtArgs> | null;
    /**
     * Omit specific fields from the Doctor
     */
    omit?: Prisma.DoctorOmit<ExtArgs> | null;
    /**
     * The data used to update Doctors.
     */
    data: Prisma.XOR<Prisma.DoctorUpdateManyMutationInput, Prisma.DoctorUncheckedUpdateManyInput>;
    /**
     * Filter which Doctors to update
     */
    where?: Prisma.DoctorWhereInput;
    /**
     * Limit how many Doctors to update.
     */
    limit?: number;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.DoctorIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * Doctor upsert
 */
export type DoctorUpsertArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the Doctor
     */
    select?: Prisma.DoctorSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Doctor
     */
    omit?: Prisma.DoctorOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.DoctorInclude<ExtArgs> | null;
    /**
     * The filter to search for the Doctor to update in case it exists.
     */
    where: Prisma.DoctorWhereUniqueInput;
    /**
     * In case the Doctor found by the `where` argument doesn't exist, create a new Doctor with this data.
     */
    create: Prisma.XOR<Prisma.DoctorCreateInput, Prisma.DoctorUncheckedCreateInput>;
    /**
     * In case the Doctor was found with the provided `where` argument, update it with this data.
     */
    update: Prisma.XOR<Prisma.DoctorUpdateInput, Prisma.DoctorUncheckedUpdateInput>;
};

/**
 * Doctor delete
 */
export type DoctorDeleteArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the Doctor
     */
    select?: Prisma.DoctorSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Doctor
     */
    omit?: Prisma.DoctorOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.DoctorInclude<ExtArgs> | null;
    /**
     * Filter which Doctor to delete.
     */
    where: Prisma.DoctorWhereUniqueInput;
};

/**
 * Doctor deleteMany
 */
export type DoctorDeleteManyArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Filter which Doctors to delete
     */
    where?: Prisma.DoctorWhereInput;
    /**
     * Limit how many Doctors to delete.
     */
    limit?: number;
};

/**
 * Doctor.workingDays
 */
export type Doctor$workingDaysArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the WorkingDays
     */
    select?: Prisma.WorkingDaysSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the WorkingDays
     */
    omit?: Prisma.WorkingDaysOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.WorkingDaysInclude<ExtArgs> | null;
    where?: Prisma.WorkingDaysWhereInput;
    orderBy?: Prisma.WorkingDaysOrderByWithRelationInput | Prisma.WorkingDaysOrderByWithRelationInput[];
    cursor?: Prisma.WorkingDaysWhereUniqueInput;
    take?: number;
    skip?: number;
    distinct?: Prisma.WorkingDaysScalarFieldEnum | Prisma.WorkingDaysScalarFieldEnum[];
};

/**
 * Doctor.appointments
 */
export type Doctor$appointmentsArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: Prisma.AppointmentSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Appointment
     */
    omit?: Prisma.AppointmentOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.AppointmentInclude<ExtArgs> | null;
    where?: Prisma.AppointmentWhereInput;
    orderBy?: Prisma.AppointmentOrderByWithRelationInput | Prisma.AppointmentOrderByWithRelationInput[];
    cursor?: Prisma.AppointmentWhereUniqueInput;
    take?: number;
    skip?: number;
    distinct?: Prisma.AppointmentScalarFieldEnum | Prisma.AppointmentScalarFieldEnum[];
};

/**
 * Doctor.ratings
 */
export type Doctor$ratingsArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: Prisma.RatingSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Rating
     */
    omit?: Prisma.RatingOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.RatingInclude<ExtArgs> | null;
    where?: Prisma.RatingWhereInput;
    orderBy?: Prisma.RatingOrderByWithRelationInput | Prisma.RatingOrderByWithRelationInput[];
    cursor?: Prisma.RatingWhereUniqueInput;
    take?: number;
    skip?: number;
    distinct?: Prisma.RatingScalarFieldEnum | Prisma.RatingScalarFieldEnum[];
};

/**
 * Doctor.diagnosis
 */
export type Doctor$diagnosisArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the Diagnosis
     */
    select?: Prisma.DiagnosisSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Diagnosis
     */
    omit?: Prisma.DiagnosisOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.DiagnosisInclude<ExtArgs> | null;
    where?: Prisma.DiagnosisWhereInput;
    orderBy?: Prisma.DiagnosisOrderByWithRelationInput | Prisma.DiagnosisOrderByWithRelationInput[];
    cursor?: Prisma.DiagnosisWhereUniqueInput;
    take?: number;
    skip?: number;
    distinct?: Prisma.DiagnosisScalarFieldEnum | Prisma.DiagnosisScalarFieldEnum[];
};

/**
 * Doctor.Prescription
 */
export type Doctor$PrescriptionArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the Prescription
     */
    select?: Prisma.PrescriptionSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Prescription
     */
    omit?: Prisma.PrescriptionOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.PrescriptionInclude<ExtArgs> | null;
    where?: Prisma.PrescriptionWhereInput;
    orderBy?: Prisma.PrescriptionOrderByWithRelationInput | Prisma.PrescriptionOrderByWithRelationInput[];
    cursor?: Prisma.PrescriptionWhereUniqueInput;
    take?: number;
    skip?: number;
    distinct?: Prisma.PrescriptionScalarFieldEnum | Prisma.PrescriptionScalarFieldEnum[];
};

/**
 * Doctor without action
 */
export type DoctorDefaultArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the Doctor
     */
    select?: Prisma.DoctorSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Doctor
     */
    omit?: Prisma.DoctorOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.DoctorInclude<ExtArgs> | null;
};
