/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/**
 * This file exports the `Vaccination` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from '@prisma/client/runtime/library';
import type * as $Enums from '../enums';
import type * as Prisma from '../internal/prismaNamespace';

/**
 * Model Vaccination
 *
 */
export type VaccinationModel = runtime.Types.Result.DefaultSelection<Prisma.$VaccinationPayload>;

export type AggregateVaccination = {
    _count: VaccinationCountAggregateOutputType | null;
    _avg: VaccinationAvgAggregateOutputType | null;
    _sum: VaccinationSumAggregateOutputType | null;
    _min: VaccinationMinAggregateOutputType | null;
    _max: VaccinationMaxAggregateOutputType | null;
};

export type VaccinationAvgAggregateOutputType = {
    id: number | null;
};

export type VaccinationSumAggregateOutputType = {
    id: number | null;
};

export type VaccinationMinAggregateOutputType = {
    id: number | null;
    patientId: string | null;
    administeredBy: string | null;
    vaccineName: string | null;
    vaccineBatchNo: string | null;
    administrationRoute: string | null;
    siteOfInjection: string | null;
    administeredDate: Date | null;
    nextDueDate: Date | null;
    notes: string | null;
    createdAt: Date | null;
    updatedAt: Date | null;
};

export type VaccinationMaxAggregateOutputType = {
    id: number | null;
    patientId: string | null;
    administeredBy: string | null;
    vaccineName: string | null;
    vaccineBatchNo: string | null;
    administrationRoute: string | null;
    siteOfInjection: string | null;
    administeredDate: Date | null;
    nextDueDate: Date | null;
    notes: string | null;
    createdAt: Date | null;
    updatedAt: Date | null;
};

export type VaccinationCountAggregateOutputType = {
    id: number;
    patientId: number;
    administeredBy: number;
    vaccineName: number;
    vaccineBatchNo: number;
    administrationRoute: number;
    siteOfInjection: number;
    administeredDate: number;
    nextDueDate: number;
    notes: number;
    createdAt: number;
    updatedAt: number;
    _all: number;
};

export type VaccinationAvgAggregateInputType = {
    id?: true;
};

export type VaccinationSumAggregateInputType = {
    id?: true;
};

export type VaccinationMinAggregateInputType = {
    id?: true;
    patientId?: true;
    administeredBy?: true;
    vaccineName?: true;
    vaccineBatchNo?: true;
    administrationRoute?: true;
    siteOfInjection?: true;
    administeredDate?: true;
    nextDueDate?: true;
    notes?: true;
    createdAt?: true;
    updatedAt?: true;
};

export type VaccinationMaxAggregateInputType = {
    id?: true;
    patientId?: true;
    administeredBy?: true;
    vaccineName?: true;
    vaccineBatchNo?: true;
    administrationRoute?: true;
    siteOfInjection?: true;
    administeredDate?: true;
    nextDueDate?: true;
    notes?: true;
    createdAt?: true;
    updatedAt?: true;
};

export type VaccinationCountAggregateInputType = {
    id?: true;
    patientId?: true;
    administeredBy?: true;
    vaccineName?: true;
    vaccineBatchNo?: true;
    administrationRoute?: true;
    siteOfInjection?: true;
    administeredDate?: true;
    nextDueDate?: true;
    notes?: true;
    createdAt?: true;
    updatedAt?: true;
    _all?: true;
};

export type VaccinationAggregateArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Filter which Vaccination to aggregate.
     */
    where?: Prisma.VaccinationWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Vaccinations to fetch.
     */
    orderBy?: Prisma.VaccinationOrderByWithRelationInput | Prisma.VaccinationOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the start position
     */
    cursor?: Prisma.VaccinationWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `Â±n` Vaccinations from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Vaccinations.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Count returned Vaccinations
     **/
    _count?: true | VaccinationCountAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to average
     **/
    _avg?: VaccinationAvgAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to sum
     **/
    _sum?: VaccinationSumAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the minimum value
     **/
    _min?: VaccinationMinAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the maximum value
     **/
    _max?: VaccinationMaxAggregateInputType;
};

export type GetVaccinationAggregateType<T extends VaccinationAggregateArgs> = {
    [P in keyof T & keyof AggregateVaccination]: P extends '_count' | 'count'
        ? T[P] extends true
            ? number
            : Prisma.GetScalarType<T[P], AggregateVaccination[P]>
        : Prisma.GetScalarType<T[P], AggregateVaccination[P]>;
};

export type VaccinationGroupByArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    where?: Prisma.VaccinationWhereInput;
    orderBy?: Prisma.VaccinationOrderByWithAggregationInput | Prisma.VaccinationOrderByWithAggregationInput[];
    by: Prisma.VaccinationScalarFieldEnum[] | Prisma.VaccinationScalarFieldEnum;
    having?: Prisma.VaccinationScalarWhereWithAggregatesInput;
    take?: number;
    skip?: number;
    _count?: VaccinationCountAggregateInputType | true;
    _avg?: VaccinationAvgAggregateInputType;
    _sum?: VaccinationSumAggregateInputType;
    _min?: VaccinationMinAggregateInputType;
    _max?: VaccinationMaxAggregateInputType;
};

export type VaccinationGroupByOutputType = {
    id: number;
    patientId: string;
    administeredBy: string | null;
    vaccineName: string;
    vaccineBatchNo: string | null;
    administrationRoute: string | null;
    siteOfInjection: string | null;
    administeredDate: Date;
    nextDueDate: Date | null;
    notes: string | null;
    createdAt: Date;
    updatedAt: Date;
    _count: VaccinationCountAggregateOutputType | null;
    _avg: VaccinationAvgAggregateOutputType | null;
    _sum: VaccinationSumAggregateOutputType | null;
    _min: VaccinationMinAggregateOutputType | null;
    _max: VaccinationMaxAggregateOutputType | null;
};

type GetVaccinationGroupByPayload<T extends VaccinationGroupByArgs> = Prisma.PrismaPromise<
    Array<
        Prisma.PickEnumerable<VaccinationGroupByOutputType, T['by']> & {
            [P in keyof T & keyof VaccinationGroupByOutputType]: P extends '_count'
                ? T[P] extends boolean
                    ? number
                    : Prisma.GetScalarType<T[P], VaccinationGroupByOutputType[P]>
                : Prisma.GetScalarType<T[P], VaccinationGroupByOutputType[P]>;
        }
    >
>;

export type VaccinationWhereInput = {
    AND?: Prisma.VaccinationWhereInput | Prisma.VaccinationWhereInput[];
    OR?: Prisma.VaccinationWhereInput[];
    NOT?: Prisma.VaccinationWhereInput | Prisma.VaccinationWhereInput[];
    id?: Prisma.IntFilter<'Vaccination'> | number;
    patientId?: Prisma.StringFilter<'Vaccination'> | string;
    administeredBy?: Prisma.StringNullableFilter<'Vaccination'> | string | null;
    vaccineName?: Prisma.StringFilter<'Vaccination'> | string;
    vaccineBatchNo?: Prisma.StringNullableFilter<'Vaccination'> | string | null;
    administrationRoute?: Prisma.StringNullableFilter<'Vaccination'> | string | null;
    siteOfInjection?: Prisma.StringNullableFilter<'Vaccination'> | string | null;
    administeredDate?: Prisma.DateTimeFilter<'Vaccination'> | Date | string;
    nextDueDate?: Prisma.DateTimeNullableFilter<'Vaccination'> | Date | string | null;
    notes?: Prisma.StringNullableFilter<'Vaccination'> | string | null;
    createdAt?: Prisma.DateTimeFilter<'Vaccination'> | Date | string;
    updatedAt?: Prisma.DateTimeFilter<'Vaccination'> | Date | string;
    patient?: Prisma.XOR<Prisma.PatientScalarRelationFilter, Prisma.PatientWhereInput>;
    administeredByStaff?: Prisma.XOR<Prisma.StaffNullableScalarRelationFilter, Prisma.StaffWhereInput> | null;
};

export type VaccinationOrderByWithRelationInput = {
    id?: Prisma.SortOrder;
    patientId?: Prisma.SortOrder;
    administeredBy?: Prisma.SortOrderInput | Prisma.SortOrder;
    vaccineName?: Prisma.SortOrder;
    vaccineBatchNo?: Prisma.SortOrderInput | Prisma.SortOrder;
    administrationRoute?: Prisma.SortOrderInput | Prisma.SortOrder;
    siteOfInjection?: Prisma.SortOrderInput | Prisma.SortOrder;
    administeredDate?: Prisma.SortOrder;
    nextDueDate?: Prisma.SortOrderInput | Prisma.SortOrder;
    notes?: Prisma.SortOrderInput | Prisma.SortOrder;
    createdAt?: Prisma.SortOrder;
    updatedAt?: Prisma.SortOrder;
    patient?: Prisma.PatientOrderByWithRelationInput;
    administeredByStaff?: Prisma.StaffOrderByWithRelationInput;
};

export type VaccinationWhereUniqueInput = Prisma.AtLeast<
    {
        id?: number;
        AND?: Prisma.VaccinationWhereInput | Prisma.VaccinationWhereInput[];
        OR?: Prisma.VaccinationWhereInput[];
        NOT?: Prisma.VaccinationWhereInput | Prisma.VaccinationWhereInput[];
        patientId?: Prisma.StringFilter<'Vaccination'> | string;
        administeredBy?: Prisma.StringNullableFilter<'Vaccination'> | string | null;
        vaccineName?: Prisma.StringFilter<'Vaccination'> | string;
        vaccineBatchNo?: Prisma.StringNullableFilter<'Vaccination'> | string | null;
        administrationRoute?: Prisma.StringNullableFilter<'Vaccination'> | string | null;
        siteOfInjection?: Prisma.StringNullableFilter<'Vaccination'> | string | null;
        administeredDate?: Prisma.DateTimeFilter<'Vaccination'> | Date | string;
        nextDueDate?: Prisma.DateTimeNullableFilter<'Vaccination'> | Date | string | null;
        notes?: Prisma.StringNullableFilter<'Vaccination'> | string | null;
        createdAt?: Prisma.DateTimeFilter<'Vaccination'> | Date | string;
        updatedAt?: Prisma.DateTimeFilter<'Vaccination'> | Date | string;
        patient?: Prisma.XOR<Prisma.PatientScalarRelationFilter, Prisma.PatientWhereInput>;
        administeredByStaff?: Prisma.XOR<Prisma.StaffNullableScalarRelationFilter, Prisma.StaffWhereInput> | null;
    },
    'id'
>;

export type VaccinationOrderByWithAggregationInput = {
    id?: Prisma.SortOrder;
    patientId?: Prisma.SortOrder;
    administeredBy?: Prisma.SortOrderInput | Prisma.SortOrder;
    vaccineName?: Prisma.SortOrder;
    vaccineBatchNo?: Prisma.SortOrderInput | Prisma.SortOrder;
    administrationRoute?: Prisma.SortOrderInput | Prisma.SortOrder;
    siteOfInjection?: Prisma.SortOrderInput | Prisma.SortOrder;
    administeredDate?: Prisma.SortOrder;
    nextDueDate?: Prisma.SortOrderInput | Prisma.SortOrder;
    notes?: Prisma.SortOrderInput | Prisma.SortOrder;
    createdAt?: Prisma.SortOrder;
    updatedAt?: Prisma.SortOrder;
    _count?: Prisma.VaccinationCountOrderByAggregateInput;
    _avg?: Prisma.VaccinationAvgOrderByAggregateInput;
    _max?: Prisma.VaccinationMaxOrderByAggregateInput;
    _min?: Prisma.VaccinationMinOrderByAggregateInput;
    _sum?: Prisma.VaccinationSumOrderByAggregateInput;
};

export type VaccinationScalarWhereWithAggregatesInput = {
    AND?: Prisma.VaccinationScalarWhereWithAggregatesInput | Prisma.VaccinationScalarWhereWithAggregatesInput[];
    OR?: Prisma.VaccinationScalarWhereWithAggregatesInput[];
    NOT?: Prisma.VaccinationScalarWhereWithAggregatesInput | Prisma.VaccinationScalarWhereWithAggregatesInput[];
    id?: Prisma.IntWithAggregatesFilter<'Vaccination'> | number;
    patientId?: Prisma.StringWithAggregatesFilter<'Vaccination'> | string;
    administeredBy?: Prisma.StringNullableWithAggregatesFilter<'Vaccination'> | string | null;
    vaccineName?: Prisma.StringWithAggregatesFilter<'Vaccination'> | string;
    vaccineBatchNo?: Prisma.StringNullableWithAggregatesFilter<'Vaccination'> | string | null;
    administrationRoute?: Prisma.StringNullableWithAggregatesFilter<'Vaccination'> | string | null;
    siteOfInjection?: Prisma.StringNullableWithAggregatesFilter<'Vaccination'> | string | null;
    administeredDate?: Prisma.DateTimeWithAggregatesFilter<'Vaccination'> | Date | string;
    nextDueDate?: Prisma.DateTimeNullableWithAggregatesFilter<'Vaccination'> | Date | string | null;
    notes?: Prisma.StringNullableWithAggregatesFilter<'Vaccination'> | string | null;
    createdAt?: Prisma.DateTimeWithAggregatesFilter<'Vaccination'> | Date | string;
    updatedAt?: Prisma.DateTimeWithAggregatesFilter<'Vaccination'> | Date | string;
};

export type VaccinationCreateInput = {
    vaccineName: string;
    vaccineBatchNo?: string | null;
    administrationRoute?: string | null;
    siteOfInjection?: string | null;
    administeredDate: Date | string;
    nextDueDate?: Date | string | null;
    notes?: string | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    patient: Prisma.PatientCreateNestedOneWithoutVaccinationInput;
    administeredByStaff?: Prisma.StaffCreateNestedOneWithoutVaccinationInput;
};

export type VaccinationUncheckedCreateInput = {
    id?: number;
    patientId: string;
    administeredBy?: string | null;
    vaccineName: string;
    vaccineBatchNo?: string | null;
    administrationRoute?: string | null;
    siteOfInjection?: string | null;
    administeredDate: Date | string;
    nextDueDate?: Date | string | null;
    notes?: string | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
};

export type VaccinationUpdateInput = {
    vaccineName?: Prisma.StringFieldUpdateOperationsInput | string;
    vaccineBatchNo?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    administrationRoute?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    siteOfInjection?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    administeredDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    nextDueDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
    notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    patient?: Prisma.PatientUpdateOneRequiredWithoutVaccinationNestedInput;
    administeredByStaff?: Prisma.StaffUpdateOneWithoutVaccinationNestedInput;
};

export type VaccinationUncheckedUpdateInput = {
    id?: Prisma.IntFieldUpdateOperationsInput | number;
    patientId?: Prisma.StringFieldUpdateOperationsInput | string;
    administeredBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    vaccineName?: Prisma.StringFieldUpdateOperationsInput | string;
    vaccineBatchNo?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    administrationRoute?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    siteOfInjection?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    administeredDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    nextDueDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
    notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type VaccinationCreateManyInput = {
    id?: number;
    patientId: string;
    administeredBy?: string | null;
    vaccineName: string;
    vaccineBatchNo?: string | null;
    administrationRoute?: string | null;
    siteOfInjection?: string | null;
    administeredDate: Date | string;
    nextDueDate?: Date | string | null;
    notes?: string | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
};

export type VaccinationUpdateManyMutationInput = {
    vaccineName?: Prisma.StringFieldUpdateOperationsInput | string;
    vaccineBatchNo?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    administrationRoute?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    siteOfInjection?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    administeredDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    nextDueDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
    notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type VaccinationUncheckedUpdateManyInput = {
    id?: Prisma.IntFieldUpdateOperationsInput | number;
    patientId?: Prisma.StringFieldUpdateOperationsInput | string;
    administeredBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    vaccineName?: Prisma.StringFieldUpdateOperationsInput | string;
    vaccineBatchNo?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    administrationRoute?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    siteOfInjection?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    administeredDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    nextDueDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
    notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type VaccinationListRelationFilter = {
    every?: Prisma.VaccinationWhereInput;
    some?: Prisma.VaccinationWhereInput;
    none?: Prisma.VaccinationWhereInput;
};

export type VaccinationOrderByRelationAggregateInput = {
    _count?: Prisma.SortOrder;
};

export type VaccinationCountOrderByAggregateInput = {
    id?: Prisma.SortOrder;
    patientId?: Prisma.SortOrder;
    administeredBy?: Prisma.SortOrder;
    vaccineName?: Prisma.SortOrder;
    vaccineBatchNo?: Prisma.SortOrder;
    administrationRoute?: Prisma.SortOrder;
    siteOfInjection?: Prisma.SortOrder;
    administeredDate?: Prisma.SortOrder;
    nextDueDate?: Prisma.SortOrder;
    notes?: Prisma.SortOrder;
    createdAt?: Prisma.SortOrder;
    updatedAt?: Prisma.SortOrder;
};

export type VaccinationAvgOrderByAggregateInput = {
    id?: Prisma.SortOrder;
};

export type VaccinationMaxOrderByAggregateInput = {
    id?: Prisma.SortOrder;
    patientId?: Prisma.SortOrder;
    administeredBy?: Prisma.SortOrder;
    vaccineName?: Prisma.SortOrder;
    vaccineBatchNo?: Prisma.SortOrder;
    administrationRoute?: Prisma.SortOrder;
    siteOfInjection?: Prisma.SortOrder;
    administeredDate?: Prisma.SortOrder;
    nextDueDate?: Prisma.SortOrder;
    notes?: Prisma.SortOrder;
    createdAt?: Prisma.SortOrder;
    updatedAt?: Prisma.SortOrder;
};

export type VaccinationMinOrderByAggregateInput = {
    id?: Prisma.SortOrder;
    patientId?: Prisma.SortOrder;
    administeredBy?: Prisma.SortOrder;
    vaccineName?: Prisma.SortOrder;
    vaccineBatchNo?: Prisma.SortOrder;
    administrationRoute?: Prisma.SortOrder;
    siteOfInjection?: Prisma.SortOrder;
    administeredDate?: Prisma.SortOrder;
    nextDueDate?: Prisma.SortOrder;
    notes?: Prisma.SortOrder;
    createdAt?: Prisma.SortOrder;
    updatedAt?: Prisma.SortOrder;
};

export type VaccinationSumOrderByAggregateInput = {
    id?: Prisma.SortOrder;
};

export type VaccinationCreateNestedManyWithoutPatientInput = {
    create?:
        | Prisma.XOR<Prisma.VaccinationCreateWithoutPatientInput, Prisma.VaccinationUncheckedCreateWithoutPatientInput>
        | Prisma.VaccinationCreateWithoutPatientInput[]
        | Prisma.VaccinationUncheckedCreateWithoutPatientInput[];
    connectOrCreate?:
        | Prisma.VaccinationCreateOrConnectWithoutPatientInput
        | Prisma.VaccinationCreateOrConnectWithoutPatientInput[];
    createMany?: Prisma.VaccinationCreateManyPatientInputEnvelope;
    connect?: Prisma.VaccinationWhereUniqueInput | Prisma.VaccinationWhereUniqueInput[];
};

export type VaccinationUncheckedCreateNestedManyWithoutPatientInput = {
    create?:
        | Prisma.XOR<Prisma.VaccinationCreateWithoutPatientInput, Prisma.VaccinationUncheckedCreateWithoutPatientInput>
        | Prisma.VaccinationCreateWithoutPatientInput[]
        | Prisma.VaccinationUncheckedCreateWithoutPatientInput[];
    connectOrCreate?:
        | Prisma.VaccinationCreateOrConnectWithoutPatientInput
        | Prisma.VaccinationCreateOrConnectWithoutPatientInput[];
    createMany?: Prisma.VaccinationCreateManyPatientInputEnvelope;
    connect?: Prisma.VaccinationWhereUniqueInput | Prisma.VaccinationWhereUniqueInput[];
};

export type VaccinationUpdateManyWithoutPatientNestedInput = {
    create?:
        | Prisma.XOR<Prisma.VaccinationCreateWithoutPatientInput, Prisma.VaccinationUncheckedCreateWithoutPatientInput>
        | Prisma.VaccinationCreateWithoutPatientInput[]
        | Prisma.VaccinationUncheckedCreateWithoutPatientInput[];
    connectOrCreate?:
        | Prisma.VaccinationCreateOrConnectWithoutPatientInput
        | Prisma.VaccinationCreateOrConnectWithoutPatientInput[];
    upsert?:
        | Prisma.VaccinationUpsertWithWhereUniqueWithoutPatientInput
        | Prisma.VaccinationUpsertWithWhereUniqueWithoutPatientInput[];
    createMany?: Prisma.VaccinationCreateManyPatientInputEnvelope;
    set?: Prisma.VaccinationWhereUniqueInput | Prisma.VaccinationWhereUniqueInput[];
    disconnect?: Prisma.VaccinationWhereUniqueInput | Prisma.VaccinationWhereUniqueInput[];
    delete?: Prisma.VaccinationWhereUniqueInput | Prisma.VaccinationWhereUniqueInput[];
    connect?: Prisma.VaccinationWhereUniqueInput | Prisma.VaccinationWhereUniqueInput[];
    update?:
        | Prisma.VaccinationUpdateWithWhereUniqueWithoutPatientInput
        | Prisma.VaccinationUpdateWithWhereUniqueWithoutPatientInput[];
    updateMany?:
        | Prisma.VaccinationUpdateManyWithWhereWithoutPatientInput
        | Prisma.VaccinationUpdateManyWithWhereWithoutPatientInput[];
    deleteMany?: Prisma.VaccinationScalarWhereInput | Prisma.VaccinationScalarWhereInput[];
};

export type VaccinationUncheckedUpdateManyWithoutPatientNestedInput = {
    create?:
        | Prisma.XOR<Prisma.VaccinationCreateWithoutPatientInput, Prisma.VaccinationUncheckedCreateWithoutPatientInput>
        | Prisma.VaccinationCreateWithoutPatientInput[]
        | Prisma.VaccinationUncheckedCreateWithoutPatientInput[];
    connectOrCreate?:
        | Prisma.VaccinationCreateOrConnectWithoutPatientInput
        | Prisma.VaccinationCreateOrConnectWithoutPatientInput[];
    upsert?:
        | Prisma.VaccinationUpsertWithWhereUniqueWithoutPatientInput
        | Prisma.VaccinationUpsertWithWhereUniqueWithoutPatientInput[];
    createMany?: Prisma.VaccinationCreateManyPatientInputEnvelope;
    set?: Prisma.VaccinationWhereUniqueInput | Prisma.VaccinationWhereUniqueInput[];
    disconnect?: Prisma.VaccinationWhereUniqueInput | Prisma.VaccinationWhereUniqueInput[];
    delete?: Prisma.VaccinationWhereUniqueInput | Prisma.VaccinationWhereUniqueInput[];
    connect?: Prisma.VaccinationWhereUniqueInput | Prisma.VaccinationWhereUniqueInput[];
    update?:
        | Prisma.VaccinationUpdateWithWhereUniqueWithoutPatientInput
        | Prisma.VaccinationUpdateWithWhereUniqueWithoutPatientInput[];
    updateMany?:
        | Prisma.VaccinationUpdateManyWithWhereWithoutPatientInput
        | Prisma.VaccinationUpdateManyWithWhereWithoutPatientInput[];
    deleteMany?: Prisma.VaccinationScalarWhereInput | Prisma.VaccinationScalarWhereInput[];
};

export type VaccinationCreateNestedManyWithoutAdministeredByStaffInput = {
    create?:
        | Prisma.XOR<
              Prisma.VaccinationCreateWithoutAdministeredByStaffInput,
              Prisma.VaccinationUncheckedCreateWithoutAdministeredByStaffInput
          >
        | Prisma.VaccinationCreateWithoutAdministeredByStaffInput[]
        | Prisma.VaccinationUncheckedCreateWithoutAdministeredByStaffInput[];
    connectOrCreate?:
        | Prisma.VaccinationCreateOrConnectWithoutAdministeredByStaffInput
        | Prisma.VaccinationCreateOrConnectWithoutAdministeredByStaffInput[];
    createMany?: Prisma.VaccinationCreateManyAdministeredByStaffInputEnvelope;
    connect?: Prisma.VaccinationWhereUniqueInput | Prisma.VaccinationWhereUniqueInput[];
};

export type VaccinationUncheckedCreateNestedManyWithoutAdministeredByStaffInput = {
    create?:
        | Prisma.XOR<
              Prisma.VaccinationCreateWithoutAdministeredByStaffInput,
              Prisma.VaccinationUncheckedCreateWithoutAdministeredByStaffInput
          >
        | Prisma.VaccinationCreateWithoutAdministeredByStaffInput[]
        | Prisma.VaccinationUncheckedCreateWithoutAdministeredByStaffInput[];
    connectOrCreate?:
        | Prisma.VaccinationCreateOrConnectWithoutAdministeredByStaffInput
        | Prisma.VaccinationCreateOrConnectWithoutAdministeredByStaffInput[];
    createMany?: Prisma.VaccinationCreateManyAdministeredByStaffInputEnvelope;
    connect?: Prisma.VaccinationWhereUniqueInput | Prisma.VaccinationWhereUniqueInput[];
};

export type VaccinationUpdateManyWithoutAdministeredByStaffNestedInput = {
    create?:
        | Prisma.XOR<
              Prisma.VaccinationCreateWithoutAdministeredByStaffInput,
              Prisma.VaccinationUncheckedCreateWithoutAdministeredByStaffInput
          >
        | Prisma.VaccinationCreateWithoutAdministeredByStaffInput[]
        | Prisma.VaccinationUncheckedCreateWithoutAdministeredByStaffInput[];
    connectOrCreate?:
        | Prisma.VaccinationCreateOrConnectWithoutAdministeredByStaffInput
        | Prisma.VaccinationCreateOrConnectWithoutAdministeredByStaffInput[];
    upsert?:
        | Prisma.VaccinationUpsertWithWhereUniqueWithoutAdministeredByStaffInput
        | Prisma.VaccinationUpsertWithWhereUniqueWithoutAdministeredByStaffInput[];
    createMany?: Prisma.VaccinationCreateManyAdministeredByStaffInputEnvelope;
    set?: Prisma.VaccinationWhereUniqueInput | Prisma.VaccinationWhereUniqueInput[];
    disconnect?: Prisma.VaccinationWhereUniqueInput | Prisma.VaccinationWhereUniqueInput[];
    delete?: Prisma.VaccinationWhereUniqueInput | Prisma.VaccinationWhereUniqueInput[];
    connect?: Prisma.VaccinationWhereUniqueInput | Prisma.VaccinationWhereUniqueInput[];
    update?:
        | Prisma.VaccinationUpdateWithWhereUniqueWithoutAdministeredByStaffInput
        | Prisma.VaccinationUpdateWithWhereUniqueWithoutAdministeredByStaffInput[];
    updateMany?:
        | Prisma.VaccinationUpdateManyWithWhereWithoutAdministeredByStaffInput
        | Prisma.VaccinationUpdateManyWithWhereWithoutAdministeredByStaffInput[];
    deleteMany?: Prisma.VaccinationScalarWhereInput | Prisma.VaccinationScalarWhereInput[];
};

export type VaccinationUncheckedUpdateManyWithoutAdministeredByStaffNestedInput = {
    create?:
        | Prisma.XOR<
              Prisma.VaccinationCreateWithoutAdministeredByStaffInput,
              Prisma.VaccinationUncheckedCreateWithoutAdministeredByStaffInput
          >
        | Prisma.VaccinationCreateWithoutAdministeredByStaffInput[]
        | Prisma.VaccinationUncheckedCreateWithoutAdministeredByStaffInput[];
    connectOrCreate?:
        | Prisma.VaccinationCreateOrConnectWithoutAdministeredByStaffInput
        | Prisma.VaccinationCreateOrConnectWithoutAdministeredByStaffInput[];
    upsert?:
        | Prisma.VaccinationUpsertWithWhereUniqueWithoutAdministeredByStaffInput
        | Prisma.VaccinationUpsertWithWhereUniqueWithoutAdministeredByStaffInput[];
    createMany?: Prisma.VaccinationCreateManyAdministeredByStaffInputEnvelope;
    set?: Prisma.VaccinationWhereUniqueInput | Prisma.VaccinationWhereUniqueInput[];
    disconnect?: Prisma.VaccinationWhereUniqueInput | Prisma.VaccinationWhereUniqueInput[];
    delete?: Prisma.VaccinationWhereUniqueInput | Prisma.VaccinationWhereUniqueInput[];
    connect?: Prisma.VaccinationWhereUniqueInput | Prisma.VaccinationWhereUniqueInput[];
    update?:
        | Prisma.VaccinationUpdateWithWhereUniqueWithoutAdministeredByStaffInput
        | Prisma.VaccinationUpdateWithWhereUniqueWithoutAdministeredByStaffInput[];
    updateMany?:
        | Prisma.VaccinationUpdateManyWithWhereWithoutAdministeredByStaffInput
        | Prisma.VaccinationUpdateManyWithWhereWithoutAdministeredByStaffInput[];
    deleteMany?: Prisma.VaccinationScalarWhereInput | Prisma.VaccinationScalarWhereInput[];
};

export type VaccinationCreateWithoutPatientInput = {
    vaccineName: string;
    vaccineBatchNo?: string | null;
    administrationRoute?: string | null;
    siteOfInjection?: string | null;
    administeredDate: Date | string;
    nextDueDate?: Date | string | null;
    notes?: string | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    administeredByStaff?: Prisma.StaffCreateNestedOneWithoutVaccinationInput;
};

export type VaccinationUncheckedCreateWithoutPatientInput = {
    id?: number;
    administeredBy?: string | null;
    vaccineName: string;
    vaccineBatchNo?: string | null;
    administrationRoute?: string | null;
    siteOfInjection?: string | null;
    administeredDate: Date | string;
    nextDueDate?: Date | string | null;
    notes?: string | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
};

export type VaccinationCreateOrConnectWithoutPatientInput = {
    where: Prisma.VaccinationWhereUniqueInput;
    create: Prisma.XOR<
        Prisma.VaccinationCreateWithoutPatientInput,
        Prisma.VaccinationUncheckedCreateWithoutPatientInput
    >;
};

export type VaccinationCreateManyPatientInputEnvelope = {
    data: Prisma.VaccinationCreateManyPatientInput | Prisma.VaccinationCreateManyPatientInput[];
    skipDuplicates?: boolean;
};

export type VaccinationUpsertWithWhereUniqueWithoutPatientInput = {
    where: Prisma.VaccinationWhereUniqueInput;
    update: Prisma.XOR<
        Prisma.VaccinationUpdateWithoutPatientInput,
        Prisma.VaccinationUncheckedUpdateWithoutPatientInput
    >;
    create: Prisma.XOR<
        Prisma.VaccinationCreateWithoutPatientInput,
        Prisma.VaccinationUncheckedCreateWithoutPatientInput
    >;
};

export type VaccinationUpdateWithWhereUniqueWithoutPatientInput = {
    where: Prisma.VaccinationWhereUniqueInput;
    data: Prisma.XOR<Prisma.VaccinationUpdateWithoutPatientInput, Prisma.VaccinationUncheckedUpdateWithoutPatientInput>;
};

export type VaccinationUpdateManyWithWhereWithoutPatientInput = {
    where: Prisma.VaccinationScalarWhereInput;
    data: Prisma.XOR<
        Prisma.VaccinationUpdateManyMutationInput,
        Prisma.VaccinationUncheckedUpdateManyWithoutPatientInput
    >;
};

export type VaccinationScalarWhereInput = {
    AND?: Prisma.VaccinationScalarWhereInput | Prisma.VaccinationScalarWhereInput[];
    OR?: Prisma.VaccinationScalarWhereInput[];
    NOT?: Prisma.VaccinationScalarWhereInput | Prisma.VaccinationScalarWhereInput[];
    id?: Prisma.IntFilter<'Vaccination'> | number;
    patientId?: Prisma.StringFilter<'Vaccination'> | string;
    administeredBy?: Prisma.StringNullableFilter<'Vaccination'> | string | null;
    vaccineName?: Prisma.StringFilter<'Vaccination'> | string;
    vaccineBatchNo?: Prisma.StringNullableFilter<'Vaccination'> | string | null;
    administrationRoute?: Prisma.StringNullableFilter<'Vaccination'> | string | null;
    siteOfInjection?: Prisma.StringNullableFilter<'Vaccination'> | string | null;
    administeredDate?: Prisma.DateTimeFilter<'Vaccination'> | Date | string;
    nextDueDate?: Prisma.DateTimeNullableFilter<'Vaccination'> | Date | string | null;
    notes?: Prisma.StringNullableFilter<'Vaccination'> | string | null;
    createdAt?: Prisma.DateTimeFilter<'Vaccination'> | Date | string;
    updatedAt?: Prisma.DateTimeFilter<'Vaccination'> | Date | string;
};

export type VaccinationCreateWithoutAdministeredByStaffInput = {
    vaccineName: string;
    vaccineBatchNo?: string | null;
    administrationRoute?: string | null;
    siteOfInjection?: string | null;
    administeredDate: Date | string;
    nextDueDate?: Date | string | null;
    notes?: string | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    patient: Prisma.PatientCreateNestedOneWithoutVaccinationInput;
};

export type VaccinationUncheckedCreateWithoutAdministeredByStaffInput = {
    id?: number;
    patientId: string;
    vaccineName: string;
    vaccineBatchNo?: string | null;
    administrationRoute?: string | null;
    siteOfInjection?: string | null;
    administeredDate: Date | string;
    nextDueDate?: Date | string | null;
    notes?: string | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
};

export type VaccinationCreateOrConnectWithoutAdministeredByStaffInput = {
    where: Prisma.VaccinationWhereUniqueInput;
    create: Prisma.XOR<
        Prisma.VaccinationCreateWithoutAdministeredByStaffInput,
        Prisma.VaccinationUncheckedCreateWithoutAdministeredByStaffInput
    >;
};

export type VaccinationCreateManyAdministeredByStaffInputEnvelope = {
    data: Prisma.VaccinationCreateManyAdministeredByStaffInput | Prisma.VaccinationCreateManyAdministeredByStaffInput[];
    skipDuplicates?: boolean;
};

export type VaccinationUpsertWithWhereUniqueWithoutAdministeredByStaffInput = {
    where: Prisma.VaccinationWhereUniqueInput;
    update: Prisma.XOR<
        Prisma.VaccinationUpdateWithoutAdministeredByStaffInput,
        Prisma.VaccinationUncheckedUpdateWithoutAdministeredByStaffInput
    >;
    create: Prisma.XOR<
        Prisma.VaccinationCreateWithoutAdministeredByStaffInput,
        Prisma.VaccinationUncheckedCreateWithoutAdministeredByStaffInput
    >;
};

export type VaccinationUpdateWithWhereUniqueWithoutAdministeredByStaffInput = {
    where: Prisma.VaccinationWhereUniqueInput;
    data: Prisma.XOR<
        Prisma.VaccinationUpdateWithoutAdministeredByStaffInput,
        Prisma.VaccinationUncheckedUpdateWithoutAdministeredByStaffInput
    >;
};

export type VaccinationUpdateManyWithWhereWithoutAdministeredByStaffInput = {
    where: Prisma.VaccinationScalarWhereInput;
    data: Prisma.XOR<
        Prisma.VaccinationUpdateManyMutationInput,
        Prisma.VaccinationUncheckedUpdateManyWithoutAdministeredByStaffInput
    >;
};

export type VaccinationCreateManyPatientInput = {
    id?: number;
    administeredBy?: string | null;
    vaccineName: string;
    vaccineBatchNo?: string | null;
    administrationRoute?: string | null;
    siteOfInjection?: string | null;
    administeredDate: Date | string;
    nextDueDate?: Date | string | null;
    notes?: string | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
};

export type VaccinationUpdateWithoutPatientInput = {
    vaccineName?: Prisma.StringFieldUpdateOperationsInput | string;
    vaccineBatchNo?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    administrationRoute?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    siteOfInjection?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    administeredDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    nextDueDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
    notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    administeredByStaff?: Prisma.StaffUpdateOneWithoutVaccinationNestedInput;
};

export type VaccinationUncheckedUpdateWithoutPatientInput = {
    id?: Prisma.IntFieldUpdateOperationsInput | number;
    administeredBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    vaccineName?: Prisma.StringFieldUpdateOperationsInput | string;
    vaccineBatchNo?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    administrationRoute?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    siteOfInjection?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    administeredDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    nextDueDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
    notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type VaccinationUncheckedUpdateManyWithoutPatientInput = {
    id?: Prisma.IntFieldUpdateOperationsInput | number;
    administeredBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    vaccineName?: Prisma.StringFieldUpdateOperationsInput | string;
    vaccineBatchNo?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    administrationRoute?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    siteOfInjection?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    administeredDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    nextDueDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
    notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type VaccinationCreateManyAdministeredByStaffInput = {
    id?: number;
    patientId: string;
    vaccineName: string;
    vaccineBatchNo?: string | null;
    administrationRoute?: string | null;
    siteOfInjection?: string | null;
    administeredDate: Date | string;
    nextDueDate?: Date | string | null;
    notes?: string | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
};

export type VaccinationUpdateWithoutAdministeredByStaffInput = {
    vaccineName?: Prisma.StringFieldUpdateOperationsInput | string;
    vaccineBatchNo?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    administrationRoute?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    siteOfInjection?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    administeredDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    nextDueDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
    notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    patient?: Prisma.PatientUpdateOneRequiredWithoutVaccinationNestedInput;
};

export type VaccinationUncheckedUpdateWithoutAdministeredByStaffInput = {
    id?: Prisma.IntFieldUpdateOperationsInput | number;
    patientId?: Prisma.StringFieldUpdateOperationsInput | string;
    vaccineName?: Prisma.StringFieldUpdateOperationsInput | string;
    vaccineBatchNo?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    administrationRoute?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    siteOfInjection?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    administeredDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    nextDueDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
    notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type VaccinationUncheckedUpdateManyWithoutAdministeredByStaffInput = {
    id?: Prisma.IntFieldUpdateOperationsInput | number;
    patientId?: Prisma.StringFieldUpdateOperationsInput | string;
    vaccineName?: Prisma.StringFieldUpdateOperationsInput | string;
    vaccineBatchNo?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    administrationRoute?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    siteOfInjection?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    administeredDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    nextDueDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
    notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type VaccinationSelect<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
    {
        id?: boolean;
        patientId?: boolean;
        administeredBy?: boolean;
        vaccineName?: boolean;
        vaccineBatchNo?: boolean;
        administrationRoute?: boolean;
        siteOfInjection?: boolean;
        administeredDate?: boolean;
        nextDueDate?: boolean;
        notes?: boolean;
        createdAt?: boolean;
        updatedAt?: boolean;
        patient?: boolean | Prisma.PatientDefaultArgs<ExtArgs>;
        administeredByStaff?: boolean | Prisma.Vaccination$administeredByStaffArgs<ExtArgs>;
    },
    ExtArgs['result']['vaccination']
>;

export type VaccinationSelectCreateManyAndReturn<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
    {
        id?: boolean;
        patientId?: boolean;
        administeredBy?: boolean;
        vaccineName?: boolean;
        vaccineBatchNo?: boolean;
        administrationRoute?: boolean;
        siteOfInjection?: boolean;
        administeredDate?: boolean;
        nextDueDate?: boolean;
        notes?: boolean;
        createdAt?: boolean;
        updatedAt?: boolean;
        patient?: boolean | Prisma.PatientDefaultArgs<ExtArgs>;
        administeredByStaff?: boolean | Prisma.Vaccination$administeredByStaffArgs<ExtArgs>;
    },
    ExtArgs['result']['vaccination']
>;

export type VaccinationSelectUpdateManyAndReturn<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
    {
        id?: boolean;
        patientId?: boolean;
        administeredBy?: boolean;
        vaccineName?: boolean;
        vaccineBatchNo?: boolean;
        administrationRoute?: boolean;
        siteOfInjection?: boolean;
        administeredDate?: boolean;
        nextDueDate?: boolean;
        notes?: boolean;
        createdAt?: boolean;
        updatedAt?: boolean;
        patient?: boolean | Prisma.PatientDefaultArgs<ExtArgs>;
        administeredByStaff?: boolean | Prisma.Vaccination$administeredByStaffArgs<ExtArgs>;
    },
    ExtArgs['result']['vaccination']
>;

export type VaccinationSelectScalar = {
    id?: boolean;
    patientId?: boolean;
    administeredBy?: boolean;
    vaccineName?: boolean;
    vaccineBatchNo?: boolean;
    administrationRoute?: boolean;
    siteOfInjection?: boolean;
    administeredDate?: boolean;
    nextDueDate?: boolean;
    notes?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
};

export type VaccinationOmit<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetOmit<
    | 'id'
    | 'patientId'
    | 'administeredBy'
    | 'vaccineName'
    | 'vaccineBatchNo'
    | 'administrationRoute'
    | 'siteOfInjection'
    | 'administeredDate'
    | 'nextDueDate'
    | 'notes'
    | 'createdAt'
    | 'updatedAt',
    ExtArgs['result']['vaccination']
>;
export type VaccinationInclude<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    patient?: boolean | Prisma.PatientDefaultArgs<ExtArgs>;
    administeredByStaff?: boolean | Prisma.Vaccination$administeredByStaffArgs<ExtArgs>;
};
export type VaccinationIncludeCreateManyAndReturn<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    patient?: boolean | Prisma.PatientDefaultArgs<ExtArgs>;
    administeredByStaff?: boolean | Prisma.Vaccination$administeredByStaffArgs<ExtArgs>;
};
export type VaccinationIncludeUpdateManyAndReturn<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    patient?: boolean | Prisma.PatientDefaultArgs<ExtArgs>;
    administeredByStaff?: boolean | Prisma.Vaccination$administeredByStaffArgs<ExtArgs>;
};

export type $VaccinationPayload<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    name: 'Vaccination';
    objects: {
        patient: Prisma.$PatientPayload<ExtArgs>;
        administeredByStaff: Prisma.$StaffPayload<ExtArgs> | null;
    };
    scalars: runtime.Types.Extensions.GetPayloadResult<
        {
            id: number;
            patientId: string;
            administeredBy: string | null;
            vaccineName: string;
            vaccineBatchNo: string | null;
            administrationRoute: string | null;
            siteOfInjection: string | null;
            administeredDate: Date;
            nextDueDate: Date | null;
            notes: string | null;
            createdAt: Date;
            updatedAt: Date;
        },
        ExtArgs['result']['vaccination']
    >;
    composites: {};
};

export type VaccinationGetPayload<S extends boolean | null | undefined | VaccinationDefaultArgs> =
    runtime.Types.Result.GetResult<Prisma.$VaccinationPayload, S>;

export type VaccinationCountArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = Omit<VaccinationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: VaccinationCountAggregateInputType | true;
};

export interface VaccinationDelegate<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
    GlobalOmitOptions = {}
> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Vaccination']; meta: { name: 'Vaccination' } };
    /**
     * Find zero or one Vaccination that matches the filter.
     * @param {VaccinationFindUniqueArgs} args - Arguments to find a Vaccination
     * @example
     * // Get one Vaccination
     * const vaccination = await prisma.vaccination.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VaccinationFindUniqueArgs>(
        args: Prisma.SelectSubset<T, VaccinationFindUniqueArgs<ExtArgs>>
    ): Prisma.Prisma__VaccinationClient<
        runtime.Types.Result.GetResult<Prisma.$VaccinationPayload<ExtArgs>, T, 'findUnique', GlobalOmitOptions> | null,
        null,
        ExtArgs,
        GlobalOmitOptions
    >;

    /**
     * Find one Vaccination that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {VaccinationFindUniqueOrThrowArgs} args - Arguments to find a Vaccination
     * @example
     * // Get one Vaccination
     * const vaccination = await prisma.vaccination.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VaccinationFindUniqueOrThrowArgs>(
        args: Prisma.SelectSubset<T, VaccinationFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma.Prisma__VaccinationClient<
        runtime.Types.Result.GetResult<Prisma.$VaccinationPayload<ExtArgs>, T, 'findUniqueOrThrow', GlobalOmitOptions>,
        never,
        ExtArgs,
        GlobalOmitOptions
    >;

    /**
     * Find the first Vaccination that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VaccinationFindFirstArgs} args - Arguments to find a Vaccination
     * @example
     * // Get one Vaccination
     * const vaccination = await prisma.vaccination.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VaccinationFindFirstArgs>(
        args?: Prisma.SelectSubset<T, VaccinationFindFirstArgs<ExtArgs>>
    ): Prisma.Prisma__VaccinationClient<
        runtime.Types.Result.GetResult<Prisma.$VaccinationPayload<ExtArgs>, T, 'findFirst', GlobalOmitOptions> | null,
        null,
        ExtArgs,
        GlobalOmitOptions
    >;

    /**
     * Find the first Vaccination that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VaccinationFindFirstOrThrowArgs} args - Arguments to find a Vaccination
     * @example
     * // Get one Vaccination
     * const vaccination = await prisma.vaccination.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VaccinationFindFirstOrThrowArgs>(
        args?: Prisma.SelectSubset<T, VaccinationFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma.Prisma__VaccinationClient<
        runtime.Types.Result.GetResult<Prisma.$VaccinationPayload<ExtArgs>, T, 'findFirstOrThrow', GlobalOmitOptions>,
        never,
        ExtArgs,
        GlobalOmitOptions
    >;

    /**
     * Find zero or more Vaccinations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VaccinationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Vaccinations
     * const vaccinations = await prisma.vaccination.findMany()
     *
     * // Get first 10 Vaccinations
     * const vaccinations = await prisma.vaccination.findMany({ take: 10 })
     *
     * // Only select the `id`
     * const vaccinationWithIdOnly = await prisma.vaccination.findMany({ select: { id: true } })
     *
     */
    findMany<T extends VaccinationFindManyArgs>(
        args?: Prisma.SelectSubset<T, VaccinationFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<
        runtime.Types.Result.GetResult<Prisma.$VaccinationPayload<ExtArgs>, T, 'findMany', GlobalOmitOptions>
    >;

    /**
     * Create a Vaccination.
     * @param {VaccinationCreateArgs} args - Arguments to create a Vaccination.
     * @example
     * // Create one Vaccination
     * const Vaccination = await prisma.vaccination.create({
     *   data: {
     *     // ... data to create a Vaccination
     *   }
     * })
     *
     */
    create<T extends VaccinationCreateArgs>(
        args: Prisma.SelectSubset<T, VaccinationCreateArgs<ExtArgs>>
    ): Prisma.Prisma__VaccinationClient<
        runtime.Types.Result.GetResult<Prisma.$VaccinationPayload<ExtArgs>, T, 'create', GlobalOmitOptions>,
        never,
        ExtArgs,
        GlobalOmitOptions
    >;

    /**
     * Create many Vaccinations.
     * @param {VaccinationCreateManyArgs} args - Arguments to create many Vaccinations.
     * @example
     * // Create many Vaccinations
     * const vaccination = await prisma.vaccination.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     */
    createMany<T extends VaccinationCreateManyArgs>(
        args?: Prisma.SelectSubset<T, VaccinationCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<Prisma.BatchPayload>;

    /**
     * Create many Vaccinations and returns the data saved in the database.
     * @param {VaccinationCreateManyAndReturnArgs} args - Arguments to create many Vaccinations.
     * @example
     * // Create many Vaccinations
     * const vaccination = await prisma.vaccination.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     * // Create many Vaccinations and only return the `id`
     * const vaccinationWithIdOnly = await prisma.vaccination.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     *
     */
    createManyAndReturn<T extends VaccinationCreateManyAndReturnArgs>(
        args?: Prisma.SelectSubset<T, VaccinationCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<
        runtime.Types.Result.GetResult<Prisma.$VaccinationPayload<ExtArgs>, T, 'createManyAndReturn', GlobalOmitOptions>
    >;

    /**
     * Delete a Vaccination.
     * @param {VaccinationDeleteArgs} args - Arguments to delete one Vaccination.
     * @example
     * // Delete one Vaccination
     * const Vaccination = await prisma.vaccination.delete({
     *   where: {
     *     // ... filter to delete one Vaccination
     *   }
     * })
     *
     */
    delete<T extends VaccinationDeleteArgs>(
        args: Prisma.SelectSubset<T, VaccinationDeleteArgs<ExtArgs>>
    ): Prisma.Prisma__VaccinationClient<
        runtime.Types.Result.GetResult<Prisma.$VaccinationPayload<ExtArgs>, T, 'delete', GlobalOmitOptions>,
        never,
        ExtArgs,
        GlobalOmitOptions
    >;

    /**
     * Update one Vaccination.
     * @param {VaccinationUpdateArgs} args - Arguments to update one Vaccination.
     * @example
     * // Update one Vaccination
     * const vaccination = await prisma.vaccination.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     */
    update<T extends VaccinationUpdateArgs>(
        args: Prisma.SelectSubset<T, VaccinationUpdateArgs<ExtArgs>>
    ): Prisma.Prisma__VaccinationClient<
        runtime.Types.Result.GetResult<Prisma.$VaccinationPayload<ExtArgs>, T, 'update', GlobalOmitOptions>,
        never,
        ExtArgs,
        GlobalOmitOptions
    >;

    /**
     * Delete zero or more Vaccinations.
     * @param {VaccinationDeleteManyArgs} args - Arguments to filter Vaccinations to delete.
     * @example
     * // Delete a few Vaccinations
     * const { count } = await prisma.vaccination.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     *
     */
    deleteMany<T extends VaccinationDeleteManyArgs>(
        args?: Prisma.SelectSubset<T, VaccinationDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<Prisma.BatchPayload>;

    /**
     * Update zero or more Vaccinations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VaccinationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Vaccinations
     * const vaccination = await prisma.vaccination.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     */
    updateMany<T extends VaccinationUpdateManyArgs>(
        args: Prisma.SelectSubset<T, VaccinationUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<Prisma.BatchPayload>;

    /**
     * Update zero or more Vaccinations and returns the data updated in the database.
     * @param {VaccinationUpdateManyAndReturnArgs} args - Arguments to update many Vaccinations.
     * @example
     * // Update many Vaccinations
     * const vaccination = await prisma.vaccination.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     * // Update zero or more Vaccinations and only return the `id`
     * const vaccinationWithIdOnly = await prisma.vaccination.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     *
     */
    updateManyAndReturn<T extends VaccinationUpdateManyAndReturnArgs>(
        args: Prisma.SelectSubset<T, VaccinationUpdateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<
        runtime.Types.Result.GetResult<Prisma.$VaccinationPayload<ExtArgs>, T, 'updateManyAndReturn', GlobalOmitOptions>
    >;

    /**
     * Create or update one Vaccination.
     * @param {VaccinationUpsertArgs} args - Arguments to update or create a Vaccination.
     * @example
     * // Update or create a Vaccination
     * const vaccination = await prisma.vaccination.upsert({
     *   create: {
     *     // ... data to create a Vaccination
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Vaccination we want to update
     *   }
     * })
     */
    upsert<T extends VaccinationUpsertArgs>(
        args: Prisma.SelectSubset<T, VaccinationUpsertArgs<ExtArgs>>
    ): Prisma.Prisma__VaccinationClient<
        runtime.Types.Result.GetResult<Prisma.$VaccinationPayload<ExtArgs>, T, 'upsert', GlobalOmitOptions>,
        never,
        ExtArgs,
        GlobalOmitOptions
    >;

    /**
     * Count the number of Vaccinations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VaccinationCountArgs} args - Arguments to filter Vaccinations to count.
     * @example
     * // Count the number of Vaccinations
     * const count = await prisma.vaccination.count({
     *   where: {
     *     // ... the filter for the Vaccinations we want to count
     *   }
     * })
     **/
    count<T extends VaccinationCountArgs>(
        args?: Prisma.Subset<T, VaccinationCountArgs>
    ): Prisma.PrismaPromise<
        T extends runtime.Types.Utils.Record<'select', any>
            ? T['select'] extends true
                ? number
                : Prisma.GetScalarType<T['select'], VaccinationCountAggregateOutputType>
            : number
    >;

    /**
     * Allows you to perform aggregations operations on a Vaccination.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VaccinationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
     **/
    aggregate<T extends VaccinationAggregateArgs>(
        args: Prisma.Subset<T, VaccinationAggregateArgs>
    ): Prisma.PrismaPromise<GetVaccinationAggregateType<T>>;

    /**
     * Group by Vaccination.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VaccinationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     *
     **/
    groupBy<
        T extends VaccinationGroupByArgs,
        HasSelectOrTake extends Prisma.Or<
            Prisma.Extends<'skip', Prisma.Keys<T>>,
            Prisma.Extends<'take', Prisma.Keys<T>>
        >,
        OrderByArg extends Prisma.True extends HasSelectOrTake
            ? { orderBy: VaccinationGroupByArgs['orderBy'] }
            : { orderBy?: VaccinationGroupByArgs['orderBy'] },
        OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
        ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
        ByValid extends Prisma.Has<ByFields, OrderFields>,
        HavingFields extends Prisma.GetHavingFields<T['having']>,
        HavingValid extends Prisma.Has<ByFields, HavingFields>,
        ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
        InputErrors extends ByEmpty extends Prisma.True
            ? `Error: "by" must not be empty.`
            : HavingValid extends Prisma.False
              ? {
                    [P in HavingFields]: P extends ByFields
                        ? never
                        : P extends string
                          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                          : [Error, 'Field ', P, ` in "having" needs to be provided in "by"`];
                }[HavingFields]
              : 'take' extends Prisma.Keys<T>
                ? 'orderBy' extends Prisma.Keys<T>
                    ? ByValid extends Prisma.True
                        ? {}
                        : {
                              [P in OrderFields]: P extends ByFields
                                  ? never
                                  : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                          }[OrderFields]
                    : 'Error: If you provide "take", you also need to provide "orderBy"'
                : 'skip' extends Prisma.Keys<T>
                  ? 'orderBy' extends Prisma.Keys<T>
                      ? ByValid extends Prisma.True
                          ? {}
                          : {
                                [P in OrderFields]: P extends ByFields
                                    ? never
                                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                            }[OrderFields]
                      : 'Error: If you provide "skip", you also need to provide "orderBy"'
                  : ByValid extends Prisma.True
                    ? {}
                    : {
                          [P in OrderFields]: P extends ByFields
                              ? never
                              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                      }[OrderFields]
    >(
        args: Prisma.SubsetIntersection<T, VaccinationGroupByArgs, OrderByArg> & InputErrors
    ): {} extends InputErrors ? GetVaccinationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>;
    /**
     * Fields of the Vaccination model
     */
    readonly fields: VaccinationFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Vaccination.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__VaccinationClient<
    T,
    Null = never,
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
    GlobalOmitOptions = {}
> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    patient<T extends Prisma.PatientDefaultArgs<ExtArgs> = {}>(
        args?: Prisma.Subset<T, Prisma.PatientDefaultArgs<ExtArgs>>
    ): Prisma.Prisma__PatientClient<
        | runtime.Types.Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, 'findUniqueOrThrow', GlobalOmitOptions>
        | Null,
        Null,
        ExtArgs,
        GlobalOmitOptions
    >;
    administeredByStaff<T extends Prisma.Vaccination$administeredByStaffArgs<ExtArgs> = {}>(
        args?: Prisma.Subset<T, Prisma.Vaccination$administeredByStaffArgs<ExtArgs>>
    ): Prisma.Prisma__StaffClient<
        runtime.Types.Result.GetResult<Prisma.$StaffPayload<ExtArgs>, T, 'findUniqueOrThrow', GlobalOmitOptions> | null,
        null,
        ExtArgs,
        GlobalOmitOptions
    >;
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(
        onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null,
        onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null
    ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(
        onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null
    ): runtime.Types.Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the Vaccination model
 */
export interface VaccinationFieldRefs {
    readonly id: Prisma.FieldRef<'Vaccination', 'Int'>;
    readonly patientId: Prisma.FieldRef<'Vaccination', 'String'>;
    readonly administeredBy: Prisma.FieldRef<'Vaccination', 'String'>;
    readonly vaccineName: Prisma.FieldRef<'Vaccination', 'String'>;
    readonly vaccineBatchNo: Prisma.FieldRef<'Vaccination', 'String'>;
    readonly administrationRoute: Prisma.FieldRef<'Vaccination', 'String'>;
    readonly siteOfInjection: Prisma.FieldRef<'Vaccination', 'String'>;
    readonly administeredDate: Prisma.FieldRef<'Vaccination', 'DateTime'>;
    readonly nextDueDate: Prisma.FieldRef<'Vaccination', 'DateTime'>;
    readonly notes: Prisma.FieldRef<'Vaccination', 'String'>;
    readonly createdAt: Prisma.FieldRef<'Vaccination', 'DateTime'>;
    readonly updatedAt: Prisma.FieldRef<'Vaccination', 'DateTime'>;
}

// Custom InputTypes
/**
 * Vaccination findUnique
 */
export type VaccinationFindUniqueArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the Vaccination
     */
    select?: Prisma.VaccinationSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Vaccination
     */
    omit?: Prisma.VaccinationOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.VaccinationInclude<ExtArgs> | null;
    /**
     * Filter, which Vaccination to fetch.
     */
    where: Prisma.VaccinationWhereUniqueInput;
};

/**
 * Vaccination findUniqueOrThrow
 */
export type VaccinationFindUniqueOrThrowArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the Vaccination
     */
    select?: Prisma.VaccinationSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Vaccination
     */
    omit?: Prisma.VaccinationOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.VaccinationInclude<ExtArgs> | null;
    /**
     * Filter, which Vaccination to fetch.
     */
    where: Prisma.VaccinationWhereUniqueInput;
};

/**
 * Vaccination findFirst
 */
export type VaccinationFindFirstArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the Vaccination
     */
    select?: Prisma.VaccinationSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Vaccination
     */
    omit?: Prisma.VaccinationOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.VaccinationInclude<ExtArgs> | null;
    /**
     * Filter, which Vaccination to fetch.
     */
    where?: Prisma.VaccinationWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Vaccinations to fetch.
     */
    orderBy?: Prisma.VaccinationOrderByWithRelationInput | Prisma.VaccinationOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for Vaccinations.
     */
    cursor?: Prisma.VaccinationWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `Â±n` Vaccinations from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Vaccinations.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of Vaccinations.
     */
    distinct?: Prisma.VaccinationScalarFieldEnum | Prisma.VaccinationScalarFieldEnum[];
};

/**
 * Vaccination findFirstOrThrow
 */
export type VaccinationFindFirstOrThrowArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the Vaccination
     */
    select?: Prisma.VaccinationSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Vaccination
     */
    omit?: Prisma.VaccinationOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.VaccinationInclude<ExtArgs> | null;
    /**
     * Filter, which Vaccination to fetch.
     */
    where?: Prisma.VaccinationWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Vaccinations to fetch.
     */
    orderBy?: Prisma.VaccinationOrderByWithRelationInput | Prisma.VaccinationOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for Vaccinations.
     */
    cursor?: Prisma.VaccinationWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `Â±n` Vaccinations from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Vaccinations.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of Vaccinations.
     */
    distinct?: Prisma.VaccinationScalarFieldEnum | Prisma.VaccinationScalarFieldEnum[];
};

/**
 * Vaccination findMany
 */
export type VaccinationFindManyArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the Vaccination
     */
    select?: Prisma.VaccinationSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Vaccination
     */
    omit?: Prisma.VaccinationOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.VaccinationInclude<ExtArgs> | null;
    /**
     * Filter, which Vaccinations to fetch.
     */
    where?: Prisma.VaccinationWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Vaccinations to fetch.
     */
    orderBy?: Prisma.VaccinationOrderByWithRelationInput | Prisma.VaccinationOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for listing Vaccinations.
     */
    cursor?: Prisma.VaccinationWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `Â±n` Vaccinations from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Vaccinations.
     */
    skip?: number;
    distinct?: Prisma.VaccinationScalarFieldEnum | Prisma.VaccinationScalarFieldEnum[];
};

/**
 * Vaccination create
 */
export type VaccinationCreateArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the Vaccination
     */
    select?: Prisma.VaccinationSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Vaccination
     */
    omit?: Prisma.VaccinationOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.VaccinationInclude<ExtArgs> | null;
    /**
     * The data needed to create a Vaccination.
     */
    data: Prisma.XOR<Prisma.VaccinationCreateInput, Prisma.VaccinationUncheckedCreateInput>;
};

/**
 * Vaccination createMany
 */
export type VaccinationCreateManyArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * The data used to create many Vaccinations.
     */
    data: Prisma.VaccinationCreateManyInput | Prisma.VaccinationCreateManyInput[];
    skipDuplicates?: boolean;
};

/**
 * Vaccination createManyAndReturn
 */
export type VaccinationCreateManyAndReturnArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the Vaccination
     */
    select?: Prisma.VaccinationSelectCreateManyAndReturn<ExtArgs> | null;
    /**
     * Omit specific fields from the Vaccination
     */
    omit?: Prisma.VaccinationOmit<ExtArgs> | null;
    /**
     * The data used to create many Vaccinations.
     */
    data: Prisma.VaccinationCreateManyInput | Prisma.VaccinationCreateManyInput[];
    skipDuplicates?: boolean;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.VaccinationIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * Vaccination update
 */
export type VaccinationUpdateArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the Vaccination
     */
    select?: Prisma.VaccinationSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Vaccination
     */
    omit?: Prisma.VaccinationOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.VaccinationInclude<ExtArgs> | null;
    /**
     * The data needed to update a Vaccination.
     */
    data: Prisma.XOR<Prisma.VaccinationUpdateInput, Prisma.VaccinationUncheckedUpdateInput>;
    /**
     * Choose, which Vaccination to update.
     */
    where: Prisma.VaccinationWhereUniqueInput;
};

/**
 * Vaccination updateMany
 */
export type VaccinationUpdateManyArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * The data used to update Vaccinations.
     */
    data: Prisma.XOR<Prisma.VaccinationUpdateManyMutationInput, Prisma.VaccinationUncheckedUpdateManyInput>;
    /**
     * Filter which Vaccinations to update
     */
    where?: Prisma.VaccinationWhereInput;
    /**
     * Limit how many Vaccinations to update.
     */
    limit?: number;
};

/**
 * Vaccination updateManyAndReturn
 */
export type VaccinationUpdateManyAndReturnArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the Vaccination
     */
    select?: Prisma.VaccinationSelectUpdateManyAndReturn<ExtArgs> | null;
    /**
     * Omit specific fields from the Vaccination
     */
    omit?: Prisma.VaccinationOmit<ExtArgs> | null;
    /**
     * The data used to update Vaccinations.
     */
    data: Prisma.XOR<Prisma.VaccinationUpdateManyMutationInput, Prisma.VaccinationUncheckedUpdateManyInput>;
    /**
     * Filter which Vaccinations to update
     */
    where?: Prisma.VaccinationWhereInput;
    /**
     * Limit how many Vaccinations to update.
     */
    limit?: number;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.VaccinationIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * Vaccination upsert
 */
export type VaccinationUpsertArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the Vaccination
     */
    select?: Prisma.VaccinationSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Vaccination
     */
    omit?: Prisma.VaccinationOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.VaccinationInclude<ExtArgs> | null;
    /**
     * The filter to search for the Vaccination to update in case it exists.
     */
    where: Prisma.VaccinationWhereUniqueInput;
    /**
     * In case the Vaccination found by the `where` argument doesn't exist, create a new Vaccination with this data.
     */
    create: Prisma.XOR<Prisma.VaccinationCreateInput, Prisma.VaccinationUncheckedCreateInput>;
    /**
     * In case the Vaccination was found with the provided `where` argument, update it with this data.
     */
    update: Prisma.XOR<Prisma.VaccinationUpdateInput, Prisma.VaccinationUncheckedUpdateInput>;
};

/**
 * Vaccination delete
 */
export type VaccinationDeleteArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the Vaccination
     */
    select?: Prisma.VaccinationSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Vaccination
     */
    omit?: Prisma.VaccinationOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.VaccinationInclude<ExtArgs> | null;
    /**
     * Filter which Vaccination to delete.
     */
    where: Prisma.VaccinationWhereUniqueInput;
};

/**
 * Vaccination deleteMany
 */
export type VaccinationDeleteManyArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Filter which Vaccinations to delete
     */
    where?: Prisma.VaccinationWhereInput;
    /**
     * Limit how many Vaccinations to delete.
     */
    limit?: number;
};

/**
 * Vaccination.administeredByStaff
 */
export type Vaccination$administeredByStaffArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the Staff
     */
    select?: Prisma.StaffSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Staff
     */
    omit?: Prisma.StaffOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.StaffInclude<ExtArgs> | null;
    where?: Prisma.StaffWhereInput;
};

/**
 * Vaccination without action
 */
export type VaccinationDefaultArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the Vaccination
     */
    select?: Prisma.VaccinationSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Vaccination
     */
    omit?: Prisma.VaccinationOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.VaccinationInclude<ExtArgs> | null;
};
