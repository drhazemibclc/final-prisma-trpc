/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/**
 * This file exports the `PatientBills` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from '@prisma/client/runtime/library';
import type * as $Enums from '../enums';
import type * as Prisma from '../internal/prismaNamespace';

/**
 * Model PatientBills
 *
 */
export type PatientBillsModel = runtime.Types.Result.DefaultSelection<Prisma.$PatientBillsPayload>;

export type AggregatePatientBills = {
    _count: PatientBillsCountAggregateOutputType | null;
    _avg: PatientBillsAvgAggregateOutputType | null;
    _sum: PatientBillsSumAggregateOutputType | null;
    _min: PatientBillsMinAggregateOutputType | null;
    _max: PatientBillsMaxAggregateOutputType | null;
};

export type PatientBillsAvgAggregateOutputType = {
    id: number | null;
    billId: number | null;
    serviceId: number | null;
    quantity: number | null;
    unitCost: number | null;
    totalCost: number | null;
};

export type PatientBillsSumAggregateOutputType = {
    id: number | null;
    billId: number | null;
    serviceId: number | null;
    quantity: number | null;
    unitCost: number | null;
    totalCost: number | null;
};

export type PatientBillsMinAggregateOutputType = {
    id: number | null;
    billId: number | null;
    serviceId: number | null;
    serviceDate: Date | null;
    quantity: number | null;
    unitCost: number | null;
    totalCost: number | null;
    createdAt: Date | null;
    updatedAt: Date | null;
};

export type PatientBillsMaxAggregateOutputType = {
    id: number | null;
    billId: number | null;
    serviceId: number | null;
    serviceDate: Date | null;
    quantity: number | null;
    unitCost: number | null;
    totalCost: number | null;
    createdAt: Date | null;
    updatedAt: Date | null;
};

export type PatientBillsCountAggregateOutputType = {
    id: number;
    billId: number;
    serviceId: number;
    serviceDate: number;
    quantity: number;
    unitCost: number;
    totalCost: number;
    createdAt: number;
    updatedAt: number;
    _all: number;
};

export type PatientBillsAvgAggregateInputType = {
    id?: true;
    billId?: true;
    serviceId?: true;
    quantity?: true;
    unitCost?: true;
    totalCost?: true;
};

export type PatientBillsSumAggregateInputType = {
    id?: true;
    billId?: true;
    serviceId?: true;
    quantity?: true;
    unitCost?: true;
    totalCost?: true;
};

export type PatientBillsMinAggregateInputType = {
    id?: true;
    billId?: true;
    serviceId?: true;
    serviceDate?: true;
    quantity?: true;
    unitCost?: true;
    totalCost?: true;
    createdAt?: true;
    updatedAt?: true;
};

export type PatientBillsMaxAggregateInputType = {
    id?: true;
    billId?: true;
    serviceId?: true;
    serviceDate?: true;
    quantity?: true;
    unitCost?: true;
    totalCost?: true;
    createdAt?: true;
    updatedAt?: true;
};

export type PatientBillsCountAggregateInputType = {
    id?: true;
    billId?: true;
    serviceId?: true;
    serviceDate?: true;
    quantity?: true;
    unitCost?: true;
    totalCost?: true;
    createdAt?: true;
    updatedAt?: true;
    _all?: true;
};

export type PatientBillsAggregateArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Filter which PatientBills to aggregate.
     */
    where?: Prisma.PatientBillsWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of PatientBills to fetch.
     */
    orderBy?: Prisma.PatientBillsOrderByWithRelationInput | Prisma.PatientBillsOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the start position
     */
    cursor?: Prisma.PatientBillsWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `Â±n` PatientBills from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` PatientBills.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Count returned PatientBills
     **/
    _count?: true | PatientBillsCountAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to average
     **/
    _avg?: PatientBillsAvgAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to sum
     **/
    _sum?: PatientBillsSumAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the minimum value
     **/
    _min?: PatientBillsMinAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the maximum value
     **/
    _max?: PatientBillsMaxAggregateInputType;
};

export type GetPatientBillsAggregateType<T extends PatientBillsAggregateArgs> = {
    [P in keyof T & keyof AggregatePatientBills]: P extends '_count' | 'count'
        ? T[P] extends true
            ? number
            : Prisma.GetScalarType<T[P], AggregatePatientBills[P]>
        : Prisma.GetScalarType<T[P], AggregatePatientBills[P]>;
};

export type PatientBillsGroupByArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    where?: Prisma.PatientBillsWhereInput;
    orderBy?: Prisma.PatientBillsOrderByWithAggregationInput | Prisma.PatientBillsOrderByWithAggregationInput[];
    by: Prisma.PatientBillsScalarFieldEnum[] | Prisma.PatientBillsScalarFieldEnum;
    having?: Prisma.PatientBillsScalarWhereWithAggregatesInput;
    take?: number;
    skip?: number;
    _count?: PatientBillsCountAggregateInputType | true;
    _avg?: PatientBillsAvgAggregateInputType;
    _sum?: PatientBillsSumAggregateInputType;
    _min?: PatientBillsMinAggregateInputType;
    _max?: PatientBillsMaxAggregateInputType;
};

export type PatientBillsGroupByOutputType = {
    id: number;
    billId: number;
    serviceId: number;
    serviceDate: Date;
    quantity: number;
    unitCost: number;
    totalCost: number;
    createdAt: Date;
    updatedAt: Date;
    _count: PatientBillsCountAggregateOutputType | null;
    _avg: PatientBillsAvgAggregateOutputType | null;
    _sum: PatientBillsSumAggregateOutputType | null;
    _min: PatientBillsMinAggregateOutputType | null;
    _max: PatientBillsMaxAggregateOutputType | null;
};

type GetPatientBillsGroupByPayload<T extends PatientBillsGroupByArgs> = Prisma.PrismaPromise<
    Array<
        Prisma.PickEnumerable<PatientBillsGroupByOutputType, T['by']> & {
            [P in keyof T & keyof PatientBillsGroupByOutputType]: P extends '_count'
                ? T[P] extends boolean
                    ? number
                    : Prisma.GetScalarType<T[P], PatientBillsGroupByOutputType[P]>
                : Prisma.GetScalarType<T[P], PatientBillsGroupByOutputType[P]>;
        }
    >
>;

export type PatientBillsWhereInput = {
    AND?: Prisma.PatientBillsWhereInput | Prisma.PatientBillsWhereInput[];
    OR?: Prisma.PatientBillsWhereInput[];
    NOT?: Prisma.PatientBillsWhereInput | Prisma.PatientBillsWhereInput[];
    id?: Prisma.IntFilter<'PatientBills'> | number;
    billId?: Prisma.IntFilter<'PatientBills'> | number;
    serviceId?: Prisma.IntFilter<'PatientBills'> | number;
    serviceDate?: Prisma.DateTimeFilter<'PatientBills'> | Date | string;
    quantity?: Prisma.IntFilter<'PatientBills'> | number;
    unitCost?: Prisma.FloatFilter<'PatientBills'> | number;
    totalCost?: Prisma.FloatFilter<'PatientBills'> | number;
    createdAt?: Prisma.DateTimeFilter<'PatientBills'> | Date | string;
    updatedAt?: Prisma.DateTimeFilter<'PatientBills'> | Date | string;
    service?: Prisma.XOR<Prisma.ServicesScalarRelationFilter, Prisma.ServicesWhereInput>;
    payment?: Prisma.XOR<Prisma.PaymentScalarRelationFilter, Prisma.PaymentWhereInput>;
};

export type PatientBillsOrderByWithRelationInput = {
    id?: Prisma.SortOrder;
    billId?: Prisma.SortOrder;
    serviceId?: Prisma.SortOrder;
    serviceDate?: Prisma.SortOrder;
    quantity?: Prisma.SortOrder;
    unitCost?: Prisma.SortOrder;
    totalCost?: Prisma.SortOrder;
    createdAt?: Prisma.SortOrder;
    updatedAt?: Prisma.SortOrder;
    service?: Prisma.ServicesOrderByWithRelationInput;
    payment?: Prisma.PaymentOrderByWithRelationInput;
};

export type PatientBillsWhereUniqueInput = Prisma.AtLeast<
    {
        id?: number;
        AND?: Prisma.PatientBillsWhereInput | Prisma.PatientBillsWhereInput[];
        OR?: Prisma.PatientBillsWhereInput[];
        NOT?: Prisma.PatientBillsWhereInput | Prisma.PatientBillsWhereInput[];
        billId?: Prisma.IntFilter<'PatientBills'> | number;
        serviceId?: Prisma.IntFilter<'PatientBills'> | number;
        serviceDate?: Prisma.DateTimeFilter<'PatientBills'> | Date | string;
        quantity?: Prisma.IntFilter<'PatientBills'> | number;
        unitCost?: Prisma.FloatFilter<'PatientBills'> | number;
        totalCost?: Prisma.FloatFilter<'PatientBills'> | number;
        createdAt?: Prisma.DateTimeFilter<'PatientBills'> | Date | string;
        updatedAt?: Prisma.DateTimeFilter<'PatientBills'> | Date | string;
        service?: Prisma.XOR<Prisma.ServicesScalarRelationFilter, Prisma.ServicesWhereInput>;
        payment?: Prisma.XOR<Prisma.PaymentScalarRelationFilter, Prisma.PaymentWhereInput>;
    },
    'id'
>;

export type PatientBillsOrderByWithAggregationInput = {
    id?: Prisma.SortOrder;
    billId?: Prisma.SortOrder;
    serviceId?: Prisma.SortOrder;
    serviceDate?: Prisma.SortOrder;
    quantity?: Prisma.SortOrder;
    unitCost?: Prisma.SortOrder;
    totalCost?: Prisma.SortOrder;
    createdAt?: Prisma.SortOrder;
    updatedAt?: Prisma.SortOrder;
    _count?: Prisma.PatientBillsCountOrderByAggregateInput;
    _avg?: Prisma.PatientBillsAvgOrderByAggregateInput;
    _max?: Prisma.PatientBillsMaxOrderByAggregateInput;
    _min?: Prisma.PatientBillsMinOrderByAggregateInput;
    _sum?: Prisma.PatientBillsSumOrderByAggregateInput;
};

export type PatientBillsScalarWhereWithAggregatesInput = {
    AND?: Prisma.PatientBillsScalarWhereWithAggregatesInput | Prisma.PatientBillsScalarWhereWithAggregatesInput[];
    OR?: Prisma.PatientBillsScalarWhereWithAggregatesInput[];
    NOT?: Prisma.PatientBillsScalarWhereWithAggregatesInput | Prisma.PatientBillsScalarWhereWithAggregatesInput[];
    id?: Prisma.IntWithAggregatesFilter<'PatientBills'> | number;
    billId?: Prisma.IntWithAggregatesFilter<'PatientBills'> | number;
    serviceId?: Prisma.IntWithAggregatesFilter<'PatientBills'> | number;
    serviceDate?: Prisma.DateTimeWithAggregatesFilter<'PatientBills'> | Date | string;
    quantity?: Prisma.IntWithAggregatesFilter<'PatientBills'> | number;
    unitCost?: Prisma.FloatWithAggregatesFilter<'PatientBills'> | number;
    totalCost?: Prisma.FloatWithAggregatesFilter<'PatientBills'> | number;
    createdAt?: Prisma.DateTimeWithAggregatesFilter<'PatientBills'> | Date | string;
    updatedAt?: Prisma.DateTimeWithAggregatesFilter<'PatientBills'> | Date | string;
};

export type PatientBillsCreateInput = {
    serviceDate: Date | string;
    quantity: number;
    unitCost: number;
    totalCost: number;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    service: Prisma.ServicesCreateNestedOneWithoutBillsInput;
    payment: Prisma.PaymentCreateNestedOneWithoutBillsInput;
};

export type PatientBillsUncheckedCreateInput = {
    id?: number;
    billId: number;
    serviceId: number;
    serviceDate: Date | string;
    quantity: number;
    unitCost: number;
    totalCost: number;
    createdAt?: Date | string;
    updatedAt?: Date | string;
};

export type PatientBillsUpdateInput = {
    serviceDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    quantity?: Prisma.IntFieldUpdateOperationsInput | number;
    unitCost?: Prisma.FloatFieldUpdateOperationsInput | number;
    totalCost?: Prisma.FloatFieldUpdateOperationsInput | number;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    service?: Prisma.ServicesUpdateOneRequiredWithoutBillsNestedInput;
    payment?: Prisma.PaymentUpdateOneRequiredWithoutBillsNestedInput;
};

export type PatientBillsUncheckedUpdateInput = {
    id?: Prisma.IntFieldUpdateOperationsInput | number;
    billId?: Prisma.IntFieldUpdateOperationsInput | number;
    serviceId?: Prisma.IntFieldUpdateOperationsInput | number;
    serviceDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    quantity?: Prisma.IntFieldUpdateOperationsInput | number;
    unitCost?: Prisma.FloatFieldUpdateOperationsInput | number;
    totalCost?: Prisma.FloatFieldUpdateOperationsInput | number;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type PatientBillsCreateManyInput = {
    id?: number;
    billId: number;
    serviceId: number;
    serviceDate: Date | string;
    quantity: number;
    unitCost: number;
    totalCost: number;
    createdAt?: Date | string;
    updatedAt?: Date | string;
};

export type PatientBillsUpdateManyMutationInput = {
    serviceDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    quantity?: Prisma.IntFieldUpdateOperationsInput | number;
    unitCost?: Prisma.FloatFieldUpdateOperationsInput | number;
    totalCost?: Prisma.FloatFieldUpdateOperationsInput | number;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type PatientBillsUncheckedUpdateManyInput = {
    id?: Prisma.IntFieldUpdateOperationsInput | number;
    billId?: Prisma.IntFieldUpdateOperationsInput | number;
    serviceId?: Prisma.IntFieldUpdateOperationsInput | number;
    serviceDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    quantity?: Prisma.IntFieldUpdateOperationsInput | number;
    unitCost?: Prisma.FloatFieldUpdateOperationsInput | number;
    totalCost?: Prisma.FloatFieldUpdateOperationsInput | number;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type PatientBillsListRelationFilter = {
    every?: Prisma.PatientBillsWhereInput;
    some?: Prisma.PatientBillsWhereInput;
    none?: Prisma.PatientBillsWhereInput;
};

export type PatientBillsOrderByRelationAggregateInput = {
    _count?: Prisma.SortOrder;
};

export type PatientBillsCountOrderByAggregateInput = {
    id?: Prisma.SortOrder;
    billId?: Prisma.SortOrder;
    serviceId?: Prisma.SortOrder;
    serviceDate?: Prisma.SortOrder;
    quantity?: Prisma.SortOrder;
    unitCost?: Prisma.SortOrder;
    totalCost?: Prisma.SortOrder;
    createdAt?: Prisma.SortOrder;
    updatedAt?: Prisma.SortOrder;
};

export type PatientBillsAvgOrderByAggregateInput = {
    id?: Prisma.SortOrder;
    billId?: Prisma.SortOrder;
    serviceId?: Prisma.SortOrder;
    quantity?: Prisma.SortOrder;
    unitCost?: Prisma.SortOrder;
    totalCost?: Prisma.SortOrder;
};

export type PatientBillsMaxOrderByAggregateInput = {
    id?: Prisma.SortOrder;
    billId?: Prisma.SortOrder;
    serviceId?: Prisma.SortOrder;
    serviceDate?: Prisma.SortOrder;
    quantity?: Prisma.SortOrder;
    unitCost?: Prisma.SortOrder;
    totalCost?: Prisma.SortOrder;
    createdAt?: Prisma.SortOrder;
    updatedAt?: Prisma.SortOrder;
};

export type PatientBillsMinOrderByAggregateInput = {
    id?: Prisma.SortOrder;
    billId?: Prisma.SortOrder;
    serviceId?: Prisma.SortOrder;
    serviceDate?: Prisma.SortOrder;
    quantity?: Prisma.SortOrder;
    unitCost?: Prisma.SortOrder;
    totalCost?: Prisma.SortOrder;
    createdAt?: Prisma.SortOrder;
    updatedAt?: Prisma.SortOrder;
};

export type PatientBillsSumOrderByAggregateInput = {
    id?: Prisma.SortOrder;
    billId?: Prisma.SortOrder;
    serviceId?: Prisma.SortOrder;
    quantity?: Prisma.SortOrder;
    unitCost?: Prisma.SortOrder;
    totalCost?: Prisma.SortOrder;
};

export type PatientBillsCreateNestedManyWithoutPaymentInput = {
    create?:
        | Prisma.XOR<
              Prisma.PatientBillsCreateWithoutPaymentInput,
              Prisma.PatientBillsUncheckedCreateWithoutPaymentInput
          >
        | Prisma.PatientBillsCreateWithoutPaymentInput[]
        | Prisma.PatientBillsUncheckedCreateWithoutPaymentInput[];
    connectOrCreate?:
        | Prisma.PatientBillsCreateOrConnectWithoutPaymentInput
        | Prisma.PatientBillsCreateOrConnectWithoutPaymentInput[];
    createMany?: Prisma.PatientBillsCreateManyPaymentInputEnvelope;
    connect?: Prisma.PatientBillsWhereUniqueInput | Prisma.PatientBillsWhereUniqueInput[];
};

export type PatientBillsUncheckedCreateNestedManyWithoutPaymentInput = {
    create?:
        | Prisma.XOR<
              Prisma.PatientBillsCreateWithoutPaymentInput,
              Prisma.PatientBillsUncheckedCreateWithoutPaymentInput
          >
        | Prisma.PatientBillsCreateWithoutPaymentInput[]
        | Prisma.PatientBillsUncheckedCreateWithoutPaymentInput[];
    connectOrCreate?:
        | Prisma.PatientBillsCreateOrConnectWithoutPaymentInput
        | Prisma.PatientBillsCreateOrConnectWithoutPaymentInput[];
    createMany?: Prisma.PatientBillsCreateManyPaymentInputEnvelope;
    connect?: Prisma.PatientBillsWhereUniqueInput | Prisma.PatientBillsWhereUniqueInput[];
};

export type PatientBillsUpdateManyWithoutPaymentNestedInput = {
    create?:
        | Prisma.XOR<
              Prisma.PatientBillsCreateWithoutPaymentInput,
              Prisma.PatientBillsUncheckedCreateWithoutPaymentInput
          >
        | Prisma.PatientBillsCreateWithoutPaymentInput[]
        | Prisma.PatientBillsUncheckedCreateWithoutPaymentInput[];
    connectOrCreate?:
        | Prisma.PatientBillsCreateOrConnectWithoutPaymentInput
        | Prisma.PatientBillsCreateOrConnectWithoutPaymentInput[];
    upsert?:
        | Prisma.PatientBillsUpsertWithWhereUniqueWithoutPaymentInput
        | Prisma.PatientBillsUpsertWithWhereUniqueWithoutPaymentInput[];
    createMany?: Prisma.PatientBillsCreateManyPaymentInputEnvelope;
    set?: Prisma.PatientBillsWhereUniqueInput | Prisma.PatientBillsWhereUniqueInput[];
    disconnect?: Prisma.PatientBillsWhereUniqueInput | Prisma.PatientBillsWhereUniqueInput[];
    delete?: Prisma.PatientBillsWhereUniqueInput | Prisma.PatientBillsWhereUniqueInput[];
    connect?: Prisma.PatientBillsWhereUniqueInput | Prisma.PatientBillsWhereUniqueInput[];
    update?:
        | Prisma.PatientBillsUpdateWithWhereUniqueWithoutPaymentInput
        | Prisma.PatientBillsUpdateWithWhereUniqueWithoutPaymentInput[];
    updateMany?:
        | Prisma.PatientBillsUpdateManyWithWhereWithoutPaymentInput
        | Prisma.PatientBillsUpdateManyWithWhereWithoutPaymentInput[];
    deleteMany?: Prisma.PatientBillsScalarWhereInput | Prisma.PatientBillsScalarWhereInput[];
};

export type PatientBillsUncheckedUpdateManyWithoutPaymentNestedInput = {
    create?:
        | Prisma.XOR<
              Prisma.PatientBillsCreateWithoutPaymentInput,
              Prisma.PatientBillsUncheckedCreateWithoutPaymentInput
          >
        | Prisma.PatientBillsCreateWithoutPaymentInput[]
        | Prisma.PatientBillsUncheckedCreateWithoutPaymentInput[];
    connectOrCreate?:
        | Prisma.PatientBillsCreateOrConnectWithoutPaymentInput
        | Prisma.PatientBillsCreateOrConnectWithoutPaymentInput[];
    upsert?:
        | Prisma.PatientBillsUpsertWithWhereUniqueWithoutPaymentInput
        | Prisma.PatientBillsUpsertWithWhereUniqueWithoutPaymentInput[];
    createMany?: Prisma.PatientBillsCreateManyPaymentInputEnvelope;
    set?: Prisma.PatientBillsWhereUniqueInput | Prisma.PatientBillsWhereUniqueInput[];
    disconnect?: Prisma.PatientBillsWhereUniqueInput | Prisma.PatientBillsWhereUniqueInput[];
    delete?: Prisma.PatientBillsWhereUniqueInput | Prisma.PatientBillsWhereUniqueInput[];
    connect?: Prisma.PatientBillsWhereUniqueInput | Prisma.PatientBillsWhereUniqueInput[];
    update?:
        | Prisma.PatientBillsUpdateWithWhereUniqueWithoutPaymentInput
        | Prisma.PatientBillsUpdateWithWhereUniqueWithoutPaymentInput[];
    updateMany?:
        | Prisma.PatientBillsUpdateManyWithWhereWithoutPaymentInput
        | Prisma.PatientBillsUpdateManyWithWhereWithoutPaymentInput[];
    deleteMany?: Prisma.PatientBillsScalarWhereInput | Prisma.PatientBillsScalarWhereInput[];
};

export type PatientBillsCreateNestedManyWithoutServiceInput = {
    create?:
        | Prisma.XOR<
              Prisma.PatientBillsCreateWithoutServiceInput,
              Prisma.PatientBillsUncheckedCreateWithoutServiceInput
          >
        | Prisma.PatientBillsCreateWithoutServiceInput[]
        | Prisma.PatientBillsUncheckedCreateWithoutServiceInput[];
    connectOrCreate?:
        | Prisma.PatientBillsCreateOrConnectWithoutServiceInput
        | Prisma.PatientBillsCreateOrConnectWithoutServiceInput[];
    createMany?: Prisma.PatientBillsCreateManyServiceInputEnvelope;
    connect?: Prisma.PatientBillsWhereUniqueInput | Prisma.PatientBillsWhereUniqueInput[];
};

export type PatientBillsUncheckedCreateNestedManyWithoutServiceInput = {
    create?:
        | Prisma.XOR<
              Prisma.PatientBillsCreateWithoutServiceInput,
              Prisma.PatientBillsUncheckedCreateWithoutServiceInput
          >
        | Prisma.PatientBillsCreateWithoutServiceInput[]
        | Prisma.PatientBillsUncheckedCreateWithoutServiceInput[];
    connectOrCreate?:
        | Prisma.PatientBillsCreateOrConnectWithoutServiceInput
        | Prisma.PatientBillsCreateOrConnectWithoutServiceInput[];
    createMany?: Prisma.PatientBillsCreateManyServiceInputEnvelope;
    connect?: Prisma.PatientBillsWhereUniqueInput | Prisma.PatientBillsWhereUniqueInput[];
};

export type PatientBillsUpdateManyWithoutServiceNestedInput = {
    create?:
        | Prisma.XOR<
              Prisma.PatientBillsCreateWithoutServiceInput,
              Prisma.PatientBillsUncheckedCreateWithoutServiceInput
          >
        | Prisma.PatientBillsCreateWithoutServiceInput[]
        | Prisma.PatientBillsUncheckedCreateWithoutServiceInput[];
    connectOrCreate?:
        | Prisma.PatientBillsCreateOrConnectWithoutServiceInput
        | Prisma.PatientBillsCreateOrConnectWithoutServiceInput[];
    upsert?:
        | Prisma.PatientBillsUpsertWithWhereUniqueWithoutServiceInput
        | Prisma.PatientBillsUpsertWithWhereUniqueWithoutServiceInput[];
    createMany?: Prisma.PatientBillsCreateManyServiceInputEnvelope;
    set?: Prisma.PatientBillsWhereUniqueInput | Prisma.PatientBillsWhereUniqueInput[];
    disconnect?: Prisma.PatientBillsWhereUniqueInput | Prisma.PatientBillsWhereUniqueInput[];
    delete?: Prisma.PatientBillsWhereUniqueInput | Prisma.PatientBillsWhereUniqueInput[];
    connect?: Prisma.PatientBillsWhereUniqueInput | Prisma.PatientBillsWhereUniqueInput[];
    update?:
        | Prisma.PatientBillsUpdateWithWhereUniqueWithoutServiceInput
        | Prisma.PatientBillsUpdateWithWhereUniqueWithoutServiceInput[];
    updateMany?:
        | Prisma.PatientBillsUpdateManyWithWhereWithoutServiceInput
        | Prisma.PatientBillsUpdateManyWithWhereWithoutServiceInput[];
    deleteMany?: Prisma.PatientBillsScalarWhereInput | Prisma.PatientBillsScalarWhereInput[];
};

export type PatientBillsUncheckedUpdateManyWithoutServiceNestedInput = {
    create?:
        | Prisma.XOR<
              Prisma.PatientBillsCreateWithoutServiceInput,
              Prisma.PatientBillsUncheckedCreateWithoutServiceInput
          >
        | Prisma.PatientBillsCreateWithoutServiceInput[]
        | Prisma.PatientBillsUncheckedCreateWithoutServiceInput[];
    connectOrCreate?:
        | Prisma.PatientBillsCreateOrConnectWithoutServiceInput
        | Prisma.PatientBillsCreateOrConnectWithoutServiceInput[];
    upsert?:
        | Prisma.PatientBillsUpsertWithWhereUniqueWithoutServiceInput
        | Prisma.PatientBillsUpsertWithWhereUniqueWithoutServiceInput[];
    createMany?: Prisma.PatientBillsCreateManyServiceInputEnvelope;
    set?: Prisma.PatientBillsWhereUniqueInput | Prisma.PatientBillsWhereUniqueInput[];
    disconnect?: Prisma.PatientBillsWhereUniqueInput | Prisma.PatientBillsWhereUniqueInput[];
    delete?: Prisma.PatientBillsWhereUniqueInput | Prisma.PatientBillsWhereUniqueInput[];
    connect?: Prisma.PatientBillsWhereUniqueInput | Prisma.PatientBillsWhereUniqueInput[];
    update?:
        | Prisma.PatientBillsUpdateWithWhereUniqueWithoutServiceInput
        | Prisma.PatientBillsUpdateWithWhereUniqueWithoutServiceInput[];
    updateMany?:
        | Prisma.PatientBillsUpdateManyWithWhereWithoutServiceInput
        | Prisma.PatientBillsUpdateManyWithWhereWithoutServiceInput[];
    deleteMany?: Prisma.PatientBillsScalarWhereInput | Prisma.PatientBillsScalarWhereInput[];
};

export type PatientBillsCreateWithoutPaymentInput = {
    serviceDate: Date | string;
    quantity: number;
    unitCost: number;
    totalCost: number;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    service: Prisma.ServicesCreateNestedOneWithoutBillsInput;
};

export type PatientBillsUncheckedCreateWithoutPaymentInput = {
    id?: number;
    serviceId: number;
    serviceDate: Date | string;
    quantity: number;
    unitCost: number;
    totalCost: number;
    createdAt?: Date | string;
    updatedAt?: Date | string;
};

export type PatientBillsCreateOrConnectWithoutPaymentInput = {
    where: Prisma.PatientBillsWhereUniqueInput;
    create: Prisma.XOR<
        Prisma.PatientBillsCreateWithoutPaymentInput,
        Prisma.PatientBillsUncheckedCreateWithoutPaymentInput
    >;
};

export type PatientBillsCreateManyPaymentInputEnvelope = {
    data: Prisma.PatientBillsCreateManyPaymentInput | Prisma.PatientBillsCreateManyPaymentInput[];
    skipDuplicates?: boolean;
};

export type PatientBillsUpsertWithWhereUniqueWithoutPaymentInput = {
    where: Prisma.PatientBillsWhereUniqueInput;
    update: Prisma.XOR<
        Prisma.PatientBillsUpdateWithoutPaymentInput,
        Prisma.PatientBillsUncheckedUpdateWithoutPaymentInput
    >;
    create: Prisma.XOR<
        Prisma.PatientBillsCreateWithoutPaymentInput,
        Prisma.PatientBillsUncheckedCreateWithoutPaymentInput
    >;
};

export type PatientBillsUpdateWithWhereUniqueWithoutPaymentInput = {
    where: Prisma.PatientBillsWhereUniqueInput;
    data: Prisma.XOR<
        Prisma.PatientBillsUpdateWithoutPaymentInput,
        Prisma.PatientBillsUncheckedUpdateWithoutPaymentInput
    >;
};

export type PatientBillsUpdateManyWithWhereWithoutPaymentInput = {
    where: Prisma.PatientBillsScalarWhereInput;
    data: Prisma.XOR<
        Prisma.PatientBillsUpdateManyMutationInput,
        Prisma.PatientBillsUncheckedUpdateManyWithoutPaymentInput
    >;
};

export type PatientBillsScalarWhereInput = {
    AND?: Prisma.PatientBillsScalarWhereInput | Prisma.PatientBillsScalarWhereInput[];
    OR?: Prisma.PatientBillsScalarWhereInput[];
    NOT?: Prisma.PatientBillsScalarWhereInput | Prisma.PatientBillsScalarWhereInput[];
    id?: Prisma.IntFilter<'PatientBills'> | number;
    billId?: Prisma.IntFilter<'PatientBills'> | number;
    serviceId?: Prisma.IntFilter<'PatientBills'> | number;
    serviceDate?: Prisma.DateTimeFilter<'PatientBills'> | Date | string;
    quantity?: Prisma.IntFilter<'PatientBills'> | number;
    unitCost?: Prisma.FloatFilter<'PatientBills'> | number;
    totalCost?: Prisma.FloatFilter<'PatientBills'> | number;
    createdAt?: Prisma.DateTimeFilter<'PatientBills'> | Date | string;
    updatedAt?: Prisma.DateTimeFilter<'PatientBills'> | Date | string;
};

export type PatientBillsCreateWithoutServiceInput = {
    serviceDate: Date | string;
    quantity: number;
    unitCost: number;
    totalCost: number;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    payment: Prisma.PaymentCreateNestedOneWithoutBillsInput;
};

export type PatientBillsUncheckedCreateWithoutServiceInput = {
    id?: number;
    billId: number;
    serviceDate: Date | string;
    quantity: number;
    unitCost: number;
    totalCost: number;
    createdAt?: Date | string;
    updatedAt?: Date | string;
};

export type PatientBillsCreateOrConnectWithoutServiceInput = {
    where: Prisma.PatientBillsWhereUniqueInput;
    create: Prisma.XOR<
        Prisma.PatientBillsCreateWithoutServiceInput,
        Prisma.PatientBillsUncheckedCreateWithoutServiceInput
    >;
};

export type PatientBillsCreateManyServiceInputEnvelope = {
    data: Prisma.PatientBillsCreateManyServiceInput | Prisma.PatientBillsCreateManyServiceInput[];
    skipDuplicates?: boolean;
};

export type PatientBillsUpsertWithWhereUniqueWithoutServiceInput = {
    where: Prisma.PatientBillsWhereUniqueInput;
    update: Prisma.XOR<
        Prisma.PatientBillsUpdateWithoutServiceInput,
        Prisma.PatientBillsUncheckedUpdateWithoutServiceInput
    >;
    create: Prisma.XOR<
        Prisma.PatientBillsCreateWithoutServiceInput,
        Prisma.PatientBillsUncheckedCreateWithoutServiceInput
    >;
};

export type PatientBillsUpdateWithWhereUniqueWithoutServiceInput = {
    where: Prisma.PatientBillsWhereUniqueInput;
    data: Prisma.XOR<
        Prisma.PatientBillsUpdateWithoutServiceInput,
        Prisma.PatientBillsUncheckedUpdateWithoutServiceInput
    >;
};

export type PatientBillsUpdateManyWithWhereWithoutServiceInput = {
    where: Prisma.PatientBillsScalarWhereInput;
    data: Prisma.XOR<
        Prisma.PatientBillsUpdateManyMutationInput,
        Prisma.PatientBillsUncheckedUpdateManyWithoutServiceInput
    >;
};

export type PatientBillsCreateManyPaymentInput = {
    id?: number;
    serviceId: number;
    serviceDate: Date | string;
    quantity: number;
    unitCost: number;
    totalCost: number;
    createdAt?: Date | string;
    updatedAt?: Date | string;
};

export type PatientBillsUpdateWithoutPaymentInput = {
    serviceDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    quantity?: Prisma.IntFieldUpdateOperationsInput | number;
    unitCost?: Prisma.FloatFieldUpdateOperationsInput | number;
    totalCost?: Prisma.FloatFieldUpdateOperationsInput | number;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    service?: Prisma.ServicesUpdateOneRequiredWithoutBillsNestedInput;
};

export type PatientBillsUncheckedUpdateWithoutPaymentInput = {
    id?: Prisma.IntFieldUpdateOperationsInput | number;
    serviceId?: Prisma.IntFieldUpdateOperationsInput | number;
    serviceDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    quantity?: Prisma.IntFieldUpdateOperationsInput | number;
    unitCost?: Prisma.FloatFieldUpdateOperationsInput | number;
    totalCost?: Prisma.FloatFieldUpdateOperationsInput | number;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type PatientBillsUncheckedUpdateManyWithoutPaymentInput = {
    id?: Prisma.IntFieldUpdateOperationsInput | number;
    serviceId?: Prisma.IntFieldUpdateOperationsInput | number;
    serviceDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    quantity?: Prisma.IntFieldUpdateOperationsInput | number;
    unitCost?: Prisma.FloatFieldUpdateOperationsInput | number;
    totalCost?: Prisma.FloatFieldUpdateOperationsInput | number;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type PatientBillsCreateManyServiceInput = {
    id?: number;
    billId: number;
    serviceDate: Date | string;
    quantity: number;
    unitCost: number;
    totalCost: number;
    createdAt?: Date | string;
    updatedAt?: Date | string;
};

export type PatientBillsUpdateWithoutServiceInput = {
    serviceDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    quantity?: Prisma.IntFieldUpdateOperationsInput | number;
    unitCost?: Prisma.FloatFieldUpdateOperationsInput | number;
    totalCost?: Prisma.FloatFieldUpdateOperationsInput | number;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    payment?: Prisma.PaymentUpdateOneRequiredWithoutBillsNestedInput;
};

export type PatientBillsUncheckedUpdateWithoutServiceInput = {
    id?: Prisma.IntFieldUpdateOperationsInput | number;
    billId?: Prisma.IntFieldUpdateOperationsInput | number;
    serviceDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    quantity?: Prisma.IntFieldUpdateOperationsInput | number;
    unitCost?: Prisma.FloatFieldUpdateOperationsInput | number;
    totalCost?: Prisma.FloatFieldUpdateOperationsInput | number;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type PatientBillsUncheckedUpdateManyWithoutServiceInput = {
    id?: Prisma.IntFieldUpdateOperationsInput | number;
    billId?: Prisma.IntFieldUpdateOperationsInput | number;
    serviceDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    quantity?: Prisma.IntFieldUpdateOperationsInput | number;
    unitCost?: Prisma.FloatFieldUpdateOperationsInput | number;
    totalCost?: Prisma.FloatFieldUpdateOperationsInput | number;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type PatientBillsSelect<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
    {
        id?: boolean;
        billId?: boolean;
        serviceId?: boolean;
        serviceDate?: boolean;
        quantity?: boolean;
        unitCost?: boolean;
        totalCost?: boolean;
        createdAt?: boolean;
        updatedAt?: boolean;
        service?: boolean | Prisma.ServicesDefaultArgs<ExtArgs>;
        payment?: boolean | Prisma.PaymentDefaultArgs<ExtArgs>;
    },
    ExtArgs['result']['patientBills']
>;

export type PatientBillsSelectCreateManyAndReturn<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
    {
        id?: boolean;
        billId?: boolean;
        serviceId?: boolean;
        serviceDate?: boolean;
        quantity?: boolean;
        unitCost?: boolean;
        totalCost?: boolean;
        createdAt?: boolean;
        updatedAt?: boolean;
        service?: boolean | Prisma.ServicesDefaultArgs<ExtArgs>;
        payment?: boolean | Prisma.PaymentDefaultArgs<ExtArgs>;
    },
    ExtArgs['result']['patientBills']
>;

export type PatientBillsSelectUpdateManyAndReturn<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
    {
        id?: boolean;
        billId?: boolean;
        serviceId?: boolean;
        serviceDate?: boolean;
        quantity?: boolean;
        unitCost?: boolean;
        totalCost?: boolean;
        createdAt?: boolean;
        updatedAt?: boolean;
        service?: boolean | Prisma.ServicesDefaultArgs<ExtArgs>;
        payment?: boolean | Prisma.PaymentDefaultArgs<ExtArgs>;
    },
    ExtArgs['result']['patientBills']
>;

export type PatientBillsSelectScalar = {
    id?: boolean;
    billId?: boolean;
    serviceId?: boolean;
    serviceDate?: boolean;
    quantity?: boolean;
    unitCost?: boolean;
    totalCost?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
};

export type PatientBillsOmit<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetOmit<
    'id' | 'billId' | 'serviceId' | 'serviceDate' | 'quantity' | 'unitCost' | 'totalCost' | 'createdAt' | 'updatedAt',
    ExtArgs['result']['patientBills']
>;
export type PatientBillsInclude<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    service?: boolean | Prisma.ServicesDefaultArgs<ExtArgs>;
    payment?: boolean | Prisma.PaymentDefaultArgs<ExtArgs>;
};
export type PatientBillsIncludeCreateManyAndReturn<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    service?: boolean | Prisma.ServicesDefaultArgs<ExtArgs>;
    payment?: boolean | Prisma.PaymentDefaultArgs<ExtArgs>;
};
export type PatientBillsIncludeUpdateManyAndReturn<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    service?: boolean | Prisma.ServicesDefaultArgs<ExtArgs>;
    payment?: boolean | Prisma.PaymentDefaultArgs<ExtArgs>;
};

export type $PatientBillsPayload<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    name: 'PatientBills';
    objects: {
        service: Prisma.$ServicesPayload<ExtArgs>;
        payment: Prisma.$PaymentPayload<ExtArgs>;
    };
    scalars: runtime.Types.Extensions.GetPayloadResult<
        {
            id: number;
            billId: number;
            serviceId: number;
            serviceDate: Date;
            quantity: number;
            unitCost: number;
            totalCost: number;
            createdAt: Date;
            updatedAt: Date;
        },
        ExtArgs['result']['patientBills']
    >;
    composites: {};
};

export type PatientBillsGetPayload<S extends boolean | null | undefined | PatientBillsDefaultArgs> =
    runtime.Types.Result.GetResult<Prisma.$PatientBillsPayload, S>;

export type PatientBillsCountArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = Omit<PatientBillsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: PatientBillsCountAggregateInputType | true;
};

export interface PatientBillsDelegate<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
    GlobalOmitOptions = {}
> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PatientBills']; meta: { name: 'PatientBills' } };
    /**
     * Find zero or one PatientBills that matches the filter.
     * @param {PatientBillsFindUniqueArgs} args - Arguments to find a PatientBills
     * @example
     * // Get one PatientBills
     * const patientBills = await prisma.patientBills.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PatientBillsFindUniqueArgs>(
        args: Prisma.SelectSubset<T, PatientBillsFindUniqueArgs<ExtArgs>>
    ): Prisma.Prisma__PatientBillsClient<
        runtime.Types.Result.GetResult<Prisma.$PatientBillsPayload<ExtArgs>, T, 'findUnique', GlobalOmitOptions> | null,
        null,
        ExtArgs,
        GlobalOmitOptions
    >;

    /**
     * Find one PatientBills that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PatientBillsFindUniqueOrThrowArgs} args - Arguments to find a PatientBills
     * @example
     * // Get one PatientBills
     * const patientBills = await prisma.patientBills.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PatientBillsFindUniqueOrThrowArgs>(
        args: Prisma.SelectSubset<T, PatientBillsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma.Prisma__PatientBillsClient<
        runtime.Types.Result.GetResult<Prisma.$PatientBillsPayload<ExtArgs>, T, 'findUniqueOrThrow', GlobalOmitOptions>,
        never,
        ExtArgs,
        GlobalOmitOptions
    >;

    /**
     * Find the first PatientBills that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientBillsFindFirstArgs} args - Arguments to find a PatientBills
     * @example
     * // Get one PatientBills
     * const patientBills = await prisma.patientBills.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PatientBillsFindFirstArgs>(
        args?: Prisma.SelectSubset<T, PatientBillsFindFirstArgs<ExtArgs>>
    ): Prisma.Prisma__PatientBillsClient<
        runtime.Types.Result.GetResult<Prisma.$PatientBillsPayload<ExtArgs>, T, 'findFirst', GlobalOmitOptions> | null,
        null,
        ExtArgs,
        GlobalOmitOptions
    >;

    /**
     * Find the first PatientBills that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientBillsFindFirstOrThrowArgs} args - Arguments to find a PatientBills
     * @example
     * // Get one PatientBills
     * const patientBills = await prisma.patientBills.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PatientBillsFindFirstOrThrowArgs>(
        args?: Prisma.SelectSubset<T, PatientBillsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma.Prisma__PatientBillsClient<
        runtime.Types.Result.GetResult<Prisma.$PatientBillsPayload<ExtArgs>, T, 'findFirstOrThrow', GlobalOmitOptions>,
        never,
        ExtArgs,
        GlobalOmitOptions
    >;

    /**
     * Find zero or more PatientBills that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientBillsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PatientBills
     * const patientBills = await prisma.patientBills.findMany()
     *
     * // Get first 10 PatientBills
     * const patientBills = await prisma.patientBills.findMany({ take: 10 })
     *
     * // Only select the `id`
     * const patientBillsWithIdOnly = await prisma.patientBills.findMany({ select: { id: true } })
     *
     */
    findMany<T extends PatientBillsFindManyArgs>(
        args?: Prisma.SelectSubset<T, PatientBillsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<
        runtime.Types.Result.GetResult<Prisma.$PatientBillsPayload<ExtArgs>, T, 'findMany', GlobalOmitOptions>
    >;

    /**
     * Create a PatientBills.
     * @param {PatientBillsCreateArgs} args - Arguments to create a PatientBills.
     * @example
     * // Create one PatientBills
     * const PatientBills = await prisma.patientBills.create({
     *   data: {
     *     // ... data to create a PatientBills
     *   }
     * })
     *
     */
    create<T extends PatientBillsCreateArgs>(
        args: Prisma.SelectSubset<T, PatientBillsCreateArgs<ExtArgs>>
    ): Prisma.Prisma__PatientBillsClient<
        runtime.Types.Result.GetResult<Prisma.$PatientBillsPayload<ExtArgs>, T, 'create', GlobalOmitOptions>,
        never,
        ExtArgs,
        GlobalOmitOptions
    >;

    /**
     * Create many PatientBills.
     * @param {PatientBillsCreateManyArgs} args - Arguments to create many PatientBills.
     * @example
     * // Create many PatientBills
     * const patientBills = await prisma.patientBills.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     */
    createMany<T extends PatientBillsCreateManyArgs>(
        args?: Prisma.SelectSubset<T, PatientBillsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<Prisma.BatchPayload>;

    /**
     * Create many PatientBills and returns the data saved in the database.
     * @param {PatientBillsCreateManyAndReturnArgs} args - Arguments to create many PatientBills.
     * @example
     * // Create many PatientBills
     * const patientBills = await prisma.patientBills.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     * // Create many PatientBills and only return the `id`
     * const patientBillsWithIdOnly = await prisma.patientBills.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     *
     */
    createManyAndReturn<T extends PatientBillsCreateManyAndReturnArgs>(
        args?: Prisma.SelectSubset<T, PatientBillsCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<
        runtime.Types.Result.GetResult<
            Prisma.$PatientBillsPayload<ExtArgs>,
            T,
            'createManyAndReturn',
            GlobalOmitOptions
        >
    >;

    /**
     * Delete a PatientBills.
     * @param {PatientBillsDeleteArgs} args - Arguments to delete one PatientBills.
     * @example
     * // Delete one PatientBills
     * const PatientBills = await prisma.patientBills.delete({
     *   where: {
     *     // ... filter to delete one PatientBills
     *   }
     * })
     *
     */
    delete<T extends PatientBillsDeleteArgs>(
        args: Prisma.SelectSubset<T, PatientBillsDeleteArgs<ExtArgs>>
    ): Prisma.Prisma__PatientBillsClient<
        runtime.Types.Result.GetResult<Prisma.$PatientBillsPayload<ExtArgs>, T, 'delete', GlobalOmitOptions>,
        never,
        ExtArgs,
        GlobalOmitOptions
    >;

    /**
     * Update one PatientBills.
     * @param {PatientBillsUpdateArgs} args - Arguments to update one PatientBills.
     * @example
     * // Update one PatientBills
     * const patientBills = await prisma.patientBills.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     */
    update<T extends PatientBillsUpdateArgs>(
        args: Prisma.SelectSubset<T, PatientBillsUpdateArgs<ExtArgs>>
    ): Prisma.Prisma__PatientBillsClient<
        runtime.Types.Result.GetResult<Prisma.$PatientBillsPayload<ExtArgs>, T, 'update', GlobalOmitOptions>,
        never,
        ExtArgs,
        GlobalOmitOptions
    >;

    /**
     * Delete zero or more PatientBills.
     * @param {PatientBillsDeleteManyArgs} args - Arguments to filter PatientBills to delete.
     * @example
     * // Delete a few PatientBills
     * const { count } = await prisma.patientBills.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     *
     */
    deleteMany<T extends PatientBillsDeleteManyArgs>(
        args?: Prisma.SelectSubset<T, PatientBillsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<Prisma.BatchPayload>;

    /**
     * Update zero or more PatientBills.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientBillsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PatientBills
     * const patientBills = await prisma.patientBills.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     */
    updateMany<T extends PatientBillsUpdateManyArgs>(
        args: Prisma.SelectSubset<T, PatientBillsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<Prisma.BatchPayload>;

    /**
     * Update zero or more PatientBills and returns the data updated in the database.
     * @param {PatientBillsUpdateManyAndReturnArgs} args - Arguments to update many PatientBills.
     * @example
     * // Update many PatientBills
     * const patientBills = await prisma.patientBills.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     * // Update zero or more PatientBills and only return the `id`
     * const patientBillsWithIdOnly = await prisma.patientBills.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     *
     */
    updateManyAndReturn<T extends PatientBillsUpdateManyAndReturnArgs>(
        args: Prisma.SelectSubset<T, PatientBillsUpdateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<
        runtime.Types.Result.GetResult<
            Prisma.$PatientBillsPayload<ExtArgs>,
            T,
            'updateManyAndReturn',
            GlobalOmitOptions
        >
    >;

    /**
     * Create or update one PatientBills.
     * @param {PatientBillsUpsertArgs} args - Arguments to update or create a PatientBills.
     * @example
     * // Update or create a PatientBills
     * const patientBills = await prisma.patientBills.upsert({
     *   create: {
     *     // ... data to create a PatientBills
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PatientBills we want to update
     *   }
     * })
     */
    upsert<T extends PatientBillsUpsertArgs>(
        args: Prisma.SelectSubset<T, PatientBillsUpsertArgs<ExtArgs>>
    ): Prisma.Prisma__PatientBillsClient<
        runtime.Types.Result.GetResult<Prisma.$PatientBillsPayload<ExtArgs>, T, 'upsert', GlobalOmitOptions>,
        never,
        ExtArgs,
        GlobalOmitOptions
    >;

    /**
     * Count the number of PatientBills.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientBillsCountArgs} args - Arguments to filter PatientBills to count.
     * @example
     * // Count the number of PatientBills
     * const count = await prisma.patientBills.count({
     *   where: {
     *     // ... the filter for the PatientBills we want to count
     *   }
     * })
     **/
    count<T extends PatientBillsCountArgs>(
        args?: Prisma.Subset<T, PatientBillsCountArgs>
    ): Prisma.PrismaPromise<
        T extends runtime.Types.Utils.Record<'select', any>
            ? T['select'] extends true
                ? number
                : Prisma.GetScalarType<T['select'], PatientBillsCountAggregateOutputType>
            : number
    >;

    /**
     * Allows you to perform aggregations operations on a PatientBills.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientBillsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
     **/
    aggregate<T extends PatientBillsAggregateArgs>(
        args: Prisma.Subset<T, PatientBillsAggregateArgs>
    ): Prisma.PrismaPromise<GetPatientBillsAggregateType<T>>;

    /**
     * Group by PatientBills.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientBillsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     *
     **/
    groupBy<
        T extends PatientBillsGroupByArgs,
        HasSelectOrTake extends Prisma.Or<
            Prisma.Extends<'skip', Prisma.Keys<T>>,
            Prisma.Extends<'take', Prisma.Keys<T>>
        >,
        OrderByArg extends Prisma.True extends HasSelectOrTake
            ? { orderBy: PatientBillsGroupByArgs['orderBy'] }
            : { orderBy?: PatientBillsGroupByArgs['orderBy'] },
        OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
        ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
        ByValid extends Prisma.Has<ByFields, OrderFields>,
        HavingFields extends Prisma.GetHavingFields<T['having']>,
        HavingValid extends Prisma.Has<ByFields, HavingFields>,
        ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
        InputErrors extends ByEmpty extends Prisma.True
            ? `Error: "by" must not be empty.`
            : HavingValid extends Prisma.False
              ? {
                    [P in HavingFields]: P extends ByFields
                        ? never
                        : P extends string
                          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                          : [Error, 'Field ', P, ` in "having" needs to be provided in "by"`];
                }[HavingFields]
              : 'take' extends Prisma.Keys<T>
                ? 'orderBy' extends Prisma.Keys<T>
                    ? ByValid extends Prisma.True
                        ? {}
                        : {
                              [P in OrderFields]: P extends ByFields
                                  ? never
                                  : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                          }[OrderFields]
                    : 'Error: If you provide "take", you also need to provide "orderBy"'
                : 'skip' extends Prisma.Keys<T>
                  ? 'orderBy' extends Prisma.Keys<T>
                      ? ByValid extends Prisma.True
                          ? {}
                          : {
                                [P in OrderFields]: P extends ByFields
                                    ? never
                                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                            }[OrderFields]
                      : 'Error: If you provide "skip", you also need to provide "orderBy"'
                  : ByValid extends Prisma.True
                    ? {}
                    : {
                          [P in OrderFields]: P extends ByFields
                              ? never
                              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                      }[OrderFields]
    >(
        args: Prisma.SubsetIntersection<T, PatientBillsGroupByArgs, OrderByArg> & InputErrors
    ): {} extends InputErrors ? GetPatientBillsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>;
    /**
     * Fields of the PatientBills model
     */
    readonly fields: PatientBillsFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for PatientBills.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__PatientBillsClient<
    T,
    Null = never,
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
    GlobalOmitOptions = {}
> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    service<T extends Prisma.ServicesDefaultArgs<ExtArgs> = {}>(
        args?: Prisma.Subset<T, Prisma.ServicesDefaultArgs<ExtArgs>>
    ): Prisma.Prisma__ServicesClient<
        | runtime.Types.Result.GetResult<Prisma.$ServicesPayload<ExtArgs>, T, 'findUniqueOrThrow', GlobalOmitOptions>
        | Null,
        Null,
        ExtArgs,
        GlobalOmitOptions
    >;
    payment<T extends Prisma.PaymentDefaultArgs<ExtArgs> = {}>(
        args?: Prisma.Subset<T, Prisma.PaymentDefaultArgs<ExtArgs>>
    ): Prisma.Prisma__PaymentClient<
        | runtime.Types.Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, 'findUniqueOrThrow', GlobalOmitOptions>
        | Null,
        Null,
        ExtArgs,
        GlobalOmitOptions
    >;
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(
        onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null,
        onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null
    ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(
        onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null
    ): runtime.Types.Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the PatientBills model
 */
export interface PatientBillsFieldRefs {
    readonly id: Prisma.FieldRef<'PatientBills', 'Int'>;
    readonly billId: Prisma.FieldRef<'PatientBills', 'Int'>;
    readonly serviceId: Prisma.FieldRef<'PatientBills', 'Int'>;
    readonly serviceDate: Prisma.FieldRef<'PatientBills', 'DateTime'>;
    readonly quantity: Prisma.FieldRef<'PatientBills', 'Int'>;
    readonly unitCost: Prisma.FieldRef<'PatientBills', 'Float'>;
    readonly totalCost: Prisma.FieldRef<'PatientBills', 'Float'>;
    readonly createdAt: Prisma.FieldRef<'PatientBills', 'DateTime'>;
    readonly updatedAt: Prisma.FieldRef<'PatientBills', 'DateTime'>;
}

// Custom InputTypes
/**
 * PatientBills findUnique
 */
export type PatientBillsFindUniqueArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the PatientBills
     */
    select?: Prisma.PatientBillsSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the PatientBills
     */
    omit?: Prisma.PatientBillsOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.PatientBillsInclude<ExtArgs> | null;
    /**
     * Filter, which PatientBills to fetch.
     */
    where: Prisma.PatientBillsWhereUniqueInput;
};

/**
 * PatientBills findUniqueOrThrow
 */
export type PatientBillsFindUniqueOrThrowArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the PatientBills
     */
    select?: Prisma.PatientBillsSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the PatientBills
     */
    omit?: Prisma.PatientBillsOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.PatientBillsInclude<ExtArgs> | null;
    /**
     * Filter, which PatientBills to fetch.
     */
    where: Prisma.PatientBillsWhereUniqueInput;
};

/**
 * PatientBills findFirst
 */
export type PatientBillsFindFirstArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the PatientBills
     */
    select?: Prisma.PatientBillsSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the PatientBills
     */
    omit?: Prisma.PatientBillsOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.PatientBillsInclude<ExtArgs> | null;
    /**
     * Filter, which PatientBills to fetch.
     */
    where?: Prisma.PatientBillsWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of PatientBills to fetch.
     */
    orderBy?: Prisma.PatientBillsOrderByWithRelationInput | Prisma.PatientBillsOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for PatientBills.
     */
    cursor?: Prisma.PatientBillsWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `Â±n` PatientBills from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` PatientBills.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of PatientBills.
     */
    distinct?: Prisma.PatientBillsScalarFieldEnum | Prisma.PatientBillsScalarFieldEnum[];
};

/**
 * PatientBills findFirstOrThrow
 */
export type PatientBillsFindFirstOrThrowArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the PatientBills
     */
    select?: Prisma.PatientBillsSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the PatientBills
     */
    omit?: Prisma.PatientBillsOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.PatientBillsInclude<ExtArgs> | null;
    /**
     * Filter, which PatientBills to fetch.
     */
    where?: Prisma.PatientBillsWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of PatientBills to fetch.
     */
    orderBy?: Prisma.PatientBillsOrderByWithRelationInput | Prisma.PatientBillsOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for PatientBills.
     */
    cursor?: Prisma.PatientBillsWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `Â±n` PatientBills from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` PatientBills.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of PatientBills.
     */
    distinct?: Prisma.PatientBillsScalarFieldEnum | Prisma.PatientBillsScalarFieldEnum[];
};

/**
 * PatientBills findMany
 */
export type PatientBillsFindManyArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the PatientBills
     */
    select?: Prisma.PatientBillsSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the PatientBills
     */
    omit?: Prisma.PatientBillsOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.PatientBillsInclude<ExtArgs> | null;
    /**
     * Filter, which PatientBills to fetch.
     */
    where?: Prisma.PatientBillsWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of PatientBills to fetch.
     */
    orderBy?: Prisma.PatientBillsOrderByWithRelationInput | Prisma.PatientBillsOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for listing PatientBills.
     */
    cursor?: Prisma.PatientBillsWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `Â±n` PatientBills from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` PatientBills.
     */
    skip?: number;
    distinct?: Prisma.PatientBillsScalarFieldEnum | Prisma.PatientBillsScalarFieldEnum[];
};

/**
 * PatientBills create
 */
export type PatientBillsCreateArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the PatientBills
     */
    select?: Prisma.PatientBillsSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the PatientBills
     */
    omit?: Prisma.PatientBillsOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.PatientBillsInclude<ExtArgs> | null;
    /**
     * The data needed to create a PatientBills.
     */
    data: Prisma.XOR<Prisma.PatientBillsCreateInput, Prisma.PatientBillsUncheckedCreateInput>;
};

/**
 * PatientBills createMany
 */
export type PatientBillsCreateManyArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * The data used to create many PatientBills.
     */
    data: Prisma.PatientBillsCreateManyInput | Prisma.PatientBillsCreateManyInput[];
    skipDuplicates?: boolean;
};

/**
 * PatientBills createManyAndReturn
 */
export type PatientBillsCreateManyAndReturnArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the PatientBills
     */
    select?: Prisma.PatientBillsSelectCreateManyAndReturn<ExtArgs> | null;
    /**
     * Omit specific fields from the PatientBills
     */
    omit?: Prisma.PatientBillsOmit<ExtArgs> | null;
    /**
     * The data used to create many PatientBills.
     */
    data: Prisma.PatientBillsCreateManyInput | Prisma.PatientBillsCreateManyInput[];
    skipDuplicates?: boolean;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.PatientBillsIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * PatientBills update
 */
export type PatientBillsUpdateArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the PatientBills
     */
    select?: Prisma.PatientBillsSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the PatientBills
     */
    omit?: Prisma.PatientBillsOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.PatientBillsInclude<ExtArgs> | null;
    /**
     * The data needed to update a PatientBills.
     */
    data: Prisma.XOR<Prisma.PatientBillsUpdateInput, Prisma.PatientBillsUncheckedUpdateInput>;
    /**
     * Choose, which PatientBills to update.
     */
    where: Prisma.PatientBillsWhereUniqueInput;
};

/**
 * PatientBills updateMany
 */
export type PatientBillsUpdateManyArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * The data used to update PatientBills.
     */
    data: Prisma.XOR<Prisma.PatientBillsUpdateManyMutationInput, Prisma.PatientBillsUncheckedUpdateManyInput>;
    /**
     * Filter which PatientBills to update
     */
    where?: Prisma.PatientBillsWhereInput;
    /**
     * Limit how many PatientBills to update.
     */
    limit?: number;
};

/**
 * PatientBills updateManyAndReturn
 */
export type PatientBillsUpdateManyAndReturnArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the PatientBills
     */
    select?: Prisma.PatientBillsSelectUpdateManyAndReturn<ExtArgs> | null;
    /**
     * Omit specific fields from the PatientBills
     */
    omit?: Prisma.PatientBillsOmit<ExtArgs> | null;
    /**
     * The data used to update PatientBills.
     */
    data: Prisma.XOR<Prisma.PatientBillsUpdateManyMutationInput, Prisma.PatientBillsUncheckedUpdateManyInput>;
    /**
     * Filter which PatientBills to update
     */
    where?: Prisma.PatientBillsWhereInput;
    /**
     * Limit how many PatientBills to update.
     */
    limit?: number;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.PatientBillsIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * PatientBills upsert
 */
export type PatientBillsUpsertArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the PatientBills
     */
    select?: Prisma.PatientBillsSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the PatientBills
     */
    omit?: Prisma.PatientBillsOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.PatientBillsInclude<ExtArgs> | null;
    /**
     * The filter to search for the PatientBills to update in case it exists.
     */
    where: Prisma.PatientBillsWhereUniqueInput;
    /**
     * In case the PatientBills found by the `where` argument doesn't exist, create a new PatientBills with this data.
     */
    create: Prisma.XOR<Prisma.PatientBillsCreateInput, Prisma.PatientBillsUncheckedCreateInput>;
    /**
     * In case the PatientBills was found with the provided `where` argument, update it with this data.
     */
    update: Prisma.XOR<Prisma.PatientBillsUpdateInput, Prisma.PatientBillsUncheckedUpdateInput>;
};

/**
 * PatientBills delete
 */
export type PatientBillsDeleteArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the PatientBills
     */
    select?: Prisma.PatientBillsSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the PatientBills
     */
    omit?: Prisma.PatientBillsOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.PatientBillsInclude<ExtArgs> | null;
    /**
     * Filter which PatientBills to delete.
     */
    where: Prisma.PatientBillsWhereUniqueInput;
};

/**
 * PatientBills deleteMany
 */
export type PatientBillsDeleteManyArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Filter which PatientBills to delete
     */
    where?: Prisma.PatientBillsWhereInput;
    /**
     * Limit how many PatientBills to delete.
     */
    limit?: number;
};

/**
 * PatientBills without action
 */
export type PatientBillsDefaultArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the PatientBills
     */
    select?: Prisma.PatientBillsSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the PatientBills
     */
    omit?: Prisma.PatientBillsOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.PatientBillsInclude<ExtArgs> | null;
};
