/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/**
 * This file exports the `Patient` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from '@prisma/client/runtime/library';
import type * as $Enums from '../enums';
import type * as Prisma from '../internal/prismaNamespace';

/**
 * Model Patient
 *
 */
export type PatientModel = runtime.Types.Result.DefaultSelection<Prisma.$PatientPayload>;

export type AggregatePatient = {
    _count: PatientCountAggregateOutputType | null;
    _min: PatientMinAggregateOutputType | null;
    _max: PatientMaxAggregateOutputType | null;
};

export type PatientMinAggregateOutputType = {
    id: string | null;
    firstName: string | null;
    lastName: string | null;
    userId: string | null;
    dateOfBirth: Date | null;
    gender: $Enums.Gender | null;
    phone: string | null;
    email: string | null;
    maritalStatus: string | null;
    nutritionalStatus: string | null;
    address: string | null;
    emergencyContactName: string | null;
    emergencyContactNumber: string | null;
    relation: string | null;
    bloodGroup: string | null;
    allergies: string | null;
    medicalConditions: string | null;
    medicalHistory: string | null;
    insuranceProvider: string | null;
    insuranceNumber: string | null;
    privacyConsent: boolean | null;
    serviceConsent: boolean | null;
    medicalConsent: boolean | null;
    img: string | null;
    colorCode: string | null;
    role: $Enums.Role | null;
    createdAt: Date | null;
    updatedAt: Date | null;
};

export type PatientMaxAggregateOutputType = {
    id: string | null;
    firstName: string | null;
    lastName: string | null;
    userId: string | null;
    dateOfBirth: Date | null;
    gender: $Enums.Gender | null;
    phone: string | null;
    email: string | null;
    maritalStatus: string | null;
    nutritionalStatus: string | null;
    address: string | null;
    emergencyContactName: string | null;
    emergencyContactNumber: string | null;
    relation: string | null;
    bloodGroup: string | null;
    allergies: string | null;
    medicalConditions: string | null;
    medicalHistory: string | null;
    insuranceProvider: string | null;
    insuranceNumber: string | null;
    privacyConsent: boolean | null;
    serviceConsent: boolean | null;
    medicalConsent: boolean | null;
    img: string | null;
    colorCode: string | null;
    role: $Enums.Role | null;
    createdAt: Date | null;
    updatedAt: Date | null;
};

export type PatientCountAggregateOutputType = {
    id: number;
    firstName: number;
    lastName: number;
    userId: number;
    dateOfBirth: number;
    gender: number;
    phone: number;
    email: number;
    maritalStatus: number;
    nutritionalStatus: number;
    address: number;
    emergencyContactName: number;
    emergencyContactNumber: number;
    relation: number;
    bloodGroup: number;
    allergies: number;
    medicalConditions: number;
    medicalHistory: number;
    insuranceProvider: number;
    insuranceNumber: number;
    privacyConsent: number;
    serviceConsent: number;
    medicalConsent: number;
    img: number;
    colorCode: number;
    role: number;
    createdAt: number;
    updatedAt: number;
    _all: number;
};

export type PatientMinAggregateInputType = {
    id?: true;
    firstName?: true;
    lastName?: true;
    userId?: true;
    dateOfBirth?: true;
    gender?: true;
    phone?: true;
    email?: true;
    maritalStatus?: true;
    nutritionalStatus?: true;
    address?: true;
    emergencyContactName?: true;
    emergencyContactNumber?: true;
    relation?: true;
    bloodGroup?: true;
    allergies?: true;
    medicalConditions?: true;
    medicalHistory?: true;
    insuranceProvider?: true;
    insuranceNumber?: true;
    privacyConsent?: true;
    serviceConsent?: true;
    medicalConsent?: true;
    img?: true;
    colorCode?: true;
    role?: true;
    createdAt?: true;
    updatedAt?: true;
};

export type PatientMaxAggregateInputType = {
    id?: true;
    firstName?: true;
    lastName?: true;
    userId?: true;
    dateOfBirth?: true;
    gender?: true;
    phone?: true;
    email?: true;
    maritalStatus?: true;
    nutritionalStatus?: true;
    address?: true;
    emergencyContactName?: true;
    emergencyContactNumber?: true;
    relation?: true;
    bloodGroup?: true;
    allergies?: true;
    medicalConditions?: true;
    medicalHistory?: true;
    insuranceProvider?: true;
    insuranceNumber?: true;
    privacyConsent?: true;
    serviceConsent?: true;
    medicalConsent?: true;
    img?: true;
    colorCode?: true;
    role?: true;
    createdAt?: true;
    updatedAt?: true;
};

export type PatientCountAggregateInputType = {
    id?: true;
    firstName?: true;
    lastName?: true;
    userId?: true;
    dateOfBirth?: true;
    gender?: true;
    phone?: true;
    email?: true;
    maritalStatus?: true;
    nutritionalStatus?: true;
    address?: true;
    emergencyContactName?: true;
    emergencyContactNumber?: true;
    relation?: true;
    bloodGroup?: true;
    allergies?: true;
    medicalConditions?: true;
    medicalHistory?: true;
    insuranceProvider?: true;
    insuranceNumber?: true;
    privacyConsent?: true;
    serviceConsent?: true;
    medicalConsent?: true;
    img?: true;
    colorCode?: true;
    role?: true;
    createdAt?: true;
    updatedAt?: true;
    _all?: true;
};

export type PatientAggregateArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Filter which Patient to aggregate.
     */
    where?: Prisma.PatientWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Patients to fetch.
     */
    orderBy?: Prisma.PatientOrderByWithRelationInput | Prisma.PatientOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the start position
     */
    cursor?: Prisma.PatientWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `Â±n` Patients from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Patients.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Count returned Patients
     **/
    _count?: true | PatientCountAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the minimum value
     **/
    _min?: PatientMinAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the maximum value
     **/
    _max?: PatientMaxAggregateInputType;
};

export type GetPatientAggregateType<T extends PatientAggregateArgs> = {
    [P in keyof T & keyof AggregatePatient]: P extends '_count' | 'count'
        ? T[P] extends true
            ? number
            : Prisma.GetScalarType<T[P], AggregatePatient[P]>
        : Prisma.GetScalarType<T[P], AggregatePatient[P]>;
};

export type PatientGroupByArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    where?: Prisma.PatientWhereInput;
    orderBy?: Prisma.PatientOrderByWithAggregationInput | Prisma.PatientOrderByWithAggregationInput[];
    by: Prisma.PatientScalarFieldEnum[] | Prisma.PatientScalarFieldEnum;
    having?: Prisma.PatientScalarWhereWithAggregatesInput;
    take?: number;
    skip?: number;
    _count?: PatientCountAggregateInputType | true;
    _min?: PatientMinAggregateInputType;
    _max?: PatientMaxAggregateInputType;
};

export type PatientGroupByOutputType = {
    id: string;
    firstName: string;
    lastName: string;
    userId: string;
    dateOfBirth: Date;
    gender: $Enums.Gender;
    phone: string | null;
    email: string;
    maritalStatus: string | null;
    nutritionalStatus: string | null;
    address: string | null;
    emergencyContactName: string | null;
    emergencyContactNumber: string | null;
    relation: string | null;
    bloodGroup: string | null;
    allergies: string | null;
    medicalConditions: string | null;
    medicalHistory: string | null;
    insuranceProvider: string | null;
    insuranceNumber: string | null;
    privacyConsent: boolean | null;
    serviceConsent: boolean | null;
    medicalConsent: boolean | null;
    img: string | null;
    colorCode: string | null;
    role: $Enums.Role | null;
    createdAt: Date;
    updatedAt: Date;
    _count: PatientCountAggregateOutputType | null;
    _min: PatientMinAggregateOutputType | null;
    _max: PatientMaxAggregateOutputType | null;
};

type GetPatientGroupByPayload<T extends PatientGroupByArgs> = Prisma.PrismaPromise<
    Array<
        Prisma.PickEnumerable<PatientGroupByOutputType, T['by']> & {
            [P in keyof T & keyof PatientGroupByOutputType]: P extends '_count'
                ? T[P] extends boolean
                    ? number
                    : Prisma.GetScalarType<T[P], PatientGroupByOutputType[P]>
                : Prisma.GetScalarType<T[P], PatientGroupByOutputType[P]>;
        }
    >
>;

export type PatientWhereInput = {
    AND?: Prisma.PatientWhereInput | Prisma.PatientWhereInput[];
    OR?: Prisma.PatientWhereInput[];
    NOT?: Prisma.PatientWhereInput | Prisma.PatientWhereInput[];
    id?: Prisma.StringFilter<'Patient'> | string;
    firstName?: Prisma.StringFilter<'Patient'> | string;
    lastName?: Prisma.StringFilter<'Patient'> | string;
    userId?: Prisma.StringFilter<'Patient'> | string;
    dateOfBirth?: Prisma.DateTimeFilter<'Patient'> | Date | string;
    gender?: Prisma.EnumGenderFilter<'Patient'> | $Enums.Gender;
    phone?: Prisma.StringNullableFilter<'Patient'> | string | null;
    email?: Prisma.StringFilter<'Patient'> | string;
    maritalStatus?: Prisma.StringNullableFilter<'Patient'> | string | null;
    nutritionalStatus?: Prisma.StringNullableFilter<'Patient'> | string | null;
    address?: Prisma.StringNullableFilter<'Patient'> | string | null;
    emergencyContactName?: Prisma.StringNullableFilter<'Patient'> | string | null;
    emergencyContactNumber?: Prisma.StringNullableFilter<'Patient'> | string | null;
    relation?: Prisma.StringNullableFilter<'Patient'> | string | null;
    bloodGroup?: Prisma.StringNullableFilter<'Patient'> | string | null;
    allergies?: Prisma.StringNullableFilter<'Patient'> | string | null;
    medicalConditions?: Prisma.StringNullableFilter<'Patient'> | string | null;
    medicalHistory?: Prisma.StringNullableFilter<'Patient'> | string | null;
    insuranceProvider?: Prisma.StringNullableFilter<'Patient'> | string | null;
    insuranceNumber?: Prisma.StringNullableFilter<'Patient'> | string | null;
    privacyConsent?: Prisma.BoolNullableFilter<'Patient'> | boolean | null;
    serviceConsent?: Prisma.BoolNullableFilter<'Patient'> | boolean | null;
    medicalConsent?: Prisma.BoolNullableFilter<'Patient'> | boolean | null;
    img?: Prisma.StringNullableFilter<'Patient'> | string | null;
    colorCode?: Prisma.StringNullableFilter<'Patient'> | string | null;
    role?: Prisma.EnumRoleNullableFilter<'Patient'> | $Enums.Role | null;
    createdAt?: Prisma.DateTimeFilter<'Patient'> | Date | string;
    updatedAt?: Prisma.DateTimeFilter<'Patient'> | Date | string;
    user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>;
    appointments?: Prisma.AppointmentListRelationFilter;
    medical?: Prisma.MedicalRecordsListRelationFilter;
    payments?: Prisma.PaymentListRelationFilter;
    ratings?: Prisma.RatingListRelationFilter;
    Prescription?: Prisma.PrescriptionListRelationFilter;
    Vaccination?: Prisma.VaccinationListRelationFilter;
};

export type PatientOrderByWithRelationInput = {
    id?: Prisma.SortOrder;
    firstName?: Prisma.SortOrder;
    lastName?: Prisma.SortOrder;
    userId?: Prisma.SortOrder;
    dateOfBirth?: Prisma.SortOrder;
    gender?: Prisma.SortOrder;
    phone?: Prisma.SortOrderInput | Prisma.SortOrder;
    email?: Prisma.SortOrder;
    maritalStatus?: Prisma.SortOrderInput | Prisma.SortOrder;
    nutritionalStatus?: Prisma.SortOrderInput | Prisma.SortOrder;
    address?: Prisma.SortOrderInput | Prisma.SortOrder;
    emergencyContactName?: Prisma.SortOrderInput | Prisma.SortOrder;
    emergencyContactNumber?: Prisma.SortOrderInput | Prisma.SortOrder;
    relation?: Prisma.SortOrderInput | Prisma.SortOrder;
    bloodGroup?: Prisma.SortOrderInput | Prisma.SortOrder;
    allergies?: Prisma.SortOrderInput | Prisma.SortOrder;
    medicalConditions?: Prisma.SortOrderInput | Prisma.SortOrder;
    medicalHistory?: Prisma.SortOrderInput | Prisma.SortOrder;
    insuranceProvider?: Prisma.SortOrderInput | Prisma.SortOrder;
    insuranceNumber?: Prisma.SortOrderInput | Prisma.SortOrder;
    privacyConsent?: Prisma.SortOrderInput | Prisma.SortOrder;
    serviceConsent?: Prisma.SortOrderInput | Prisma.SortOrder;
    medicalConsent?: Prisma.SortOrderInput | Prisma.SortOrder;
    img?: Prisma.SortOrderInput | Prisma.SortOrder;
    colorCode?: Prisma.SortOrderInput | Prisma.SortOrder;
    role?: Prisma.SortOrderInput | Prisma.SortOrder;
    createdAt?: Prisma.SortOrder;
    updatedAt?: Prisma.SortOrder;
    user?: Prisma.UserOrderByWithRelationInput;
    appointments?: Prisma.AppointmentOrderByRelationAggregateInput;
    medical?: Prisma.MedicalRecordsOrderByRelationAggregateInput;
    payments?: Prisma.PaymentOrderByRelationAggregateInput;
    ratings?: Prisma.RatingOrderByRelationAggregateInput;
    Prescription?: Prisma.PrescriptionOrderByRelationAggregateInput;
    Vaccination?: Prisma.VaccinationOrderByRelationAggregateInput;
};

export type PatientWhereUniqueInput = Prisma.AtLeast<
    {
        id?: string;
        userId?: string;
        email?: string;
        AND?: Prisma.PatientWhereInput | Prisma.PatientWhereInput[];
        OR?: Prisma.PatientWhereInput[];
        NOT?: Prisma.PatientWhereInput | Prisma.PatientWhereInput[];
        firstName?: Prisma.StringFilter<'Patient'> | string;
        lastName?: Prisma.StringFilter<'Patient'> | string;
        dateOfBirth?: Prisma.DateTimeFilter<'Patient'> | Date | string;
        gender?: Prisma.EnumGenderFilter<'Patient'> | $Enums.Gender;
        phone?: Prisma.StringNullableFilter<'Patient'> | string | null;
        maritalStatus?: Prisma.StringNullableFilter<'Patient'> | string | null;
        nutritionalStatus?: Prisma.StringNullableFilter<'Patient'> | string | null;
        address?: Prisma.StringNullableFilter<'Patient'> | string | null;
        emergencyContactName?: Prisma.StringNullableFilter<'Patient'> | string | null;
        emergencyContactNumber?: Prisma.StringNullableFilter<'Patient'> | string | null;
        relation?: Prisma.StringNullableFilter<'Patient'> | string | null;
        bloodGroup?: Prisma.StringNullableFilter<'Patient'> | string | null;
        allergies?: Prisma.StringNullableFilter<'Patient'> | string | null;
        medicalConditions?: Prisma.StringNullableFilter<'Patient'> | string | null;
        medicalHistory?: Prisma.StringNullableFilter<'Patient'> | string | null;
        insuranceProvider?: Prisma.StringNullableFilter<'Patient'> | string | null;
        insuranceNumber?: Prisma.StringNullableFilter<'Patient'> | string | null;
        privacyConsent?: Prisma.BoolNullableFilter<'Patient'> | boolean | null;
        serviceConsent?: Prisma.BoolNullableFilter<'Patient'> | boolean | null;
        medicalConsent?: Prisma.BoolNullableFilter<'Patient'> | boolean | null;
        img?: Prisma.StringNullableFilter<'Patient'> | string | null;
        colorCode?: Prisma.StringNullableFilter<'Patient'> | string | null;
        role?: Prisma.EnumRoleNullableFilter<'Patient'> | $Enums.Role | null;
        createdAt?: Prisma.DateTimeFilter<'Patient'> | Date | string;
        updatedAt?: Prisma.DateTimeFilter<'Patient'> | Date | string;
        user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>;
        appointments?: Prisma.AppointmentListRelationFilter;
        medical?: Prisma.MedicalRecordsListRelationFilter;
        payments?: Prisma.PaymentListRelationFilter;
        ratings?: Prisma.RatingListRelationFilter;
        Prescription?: Prisma.PrescriptionListRelationFilter;
        Vaccination?: Prisma.VaccinationListRelationFilter;
    },
    'id' | 'userId' | 'email'
>;

export type PatientOrderByWithAggregationInput = {
    id?: Prisma.SortOrder;
    firstName?: Prisma.SortOrder;
    lastName?: Prisma.SortOrder;
    userId?: Prisma.SortOrder;
    dateOfBirth?: Prisma.SortOrder;
    gender?: Prisma.SortOrder;
    phone?: Prisma.SortOrderInput | Prisma.SortOrder;
    email?: Prisma.SortOrder;
    maritalStatus?: Prisma.SortOrderInput | Prisma.SortOrder;
    nutritionalStatus?: Prisma.SortOrderInput | Prisma.SortOrder;
    address?: Prisma.SortOrderInput | Prisma.SortOrder;
    emergencyContactName?: Prisma.SortOrderInput | Prisma.SortOrder;
    emergencyContactNumber?: Prisma.SortOrderInput | Prisma.SortOrder;
    relation?: Prisma.SortOrderInput | Prisma.SortOrder;
    bloodGroup?: Prisma.SortOrderInput | Prisma.SortOrder;
    allergies?: Prisma.SortOrderInput | Prisma.SortOrder;
    medicalConditions?: Prisma.SortOrderInput | Prisma.SortOrder;
    medicalHistory?: Prisma.SortOrderInput | Prisma.SortOrder;
    insuranceProvider?: Prisma.SortOrderInput | Prisma.SortOrder;
    insuranceNumber?: Prisma.SortOrderInput | Prisma.SortOrder;
    privacyConsent?: Prisma.SortOrderInput | Prisma.SortOrder;
    serviceConsent?: Prisma.SortOrderInput | Prisma.SortOrder;
    medicalConsent?: Prisma.SortOrderInput | Prisma.SortOrder;
    img?: Prisma.SortOrderInput | Prisma.SortOrder;
    colorCode?: Prisma.SortOrderInput | Prisma.SortOrder;
    role?: Prisma.SortOrderInput | Prisma.SortOrder;
    createdAt?: Prisma.SortOrder;
    updatedAt?: Prisma.SortOrder;
    _count?: Prisma.PatientCountOrderByAggregateInput;
    _max?: Prisma.PatientMaxOrderByAggregateInput;
    _min?: Prisma.PatientMinOrderByAggregateInput;
};

export type PatientScalarWhereWithAggregatesInput = {
    AND?: Prisma.PatientScalarWhereWithAggregatesInput | Prisma.PatientScalarWhereWithAggregatesInput[];
    OR?: Prisma.PatientScalarWhereWithAggregatesInput[];
    NOT?: Prisma.PatientScalarWhereWithAggregatesInput | Prisma.PatientScalarWhereWithAggregatesInput[];
    id?: Prisma.StringWithAggregatesFilter<'Patient'> | string;
    firstName?: Prisma.StringWithAggregatesFilter<'Patient'> | string;
    lastName?: Prisma.StringWithAggregatesFilter<'Patient'> | string;
    userId?: Prisma.StringWithAggregatesFilter<'Patient'> | string;
    dateOfBirth?: Prisma.DateTimeWithAggregatesFilter<'Patient'> | Date | string;
    gender?: Prisma.EnumGenderWithAggregatesFilter<'Patient'> | $Enums.Gender;
    phone?: Prisma.StringNullableWithAggregatesFilter<'Patient'> | string | null;
    email?: Prisma.StringWithAggregatesFilter<'Patient'> | string;
    maritalStatus?: Prisma.StringNullableWithAggregatesFilter<'Patient'> | string | null;
    nutritionalStatus?: Prisma.StringNullableWithAggregatesFilter<'Patient'> | string | null;
    address?: Prisma.StringNullableWithAggregatesFilter<'Patient'> | string | null;
    emergencyContactName?: Prisma.StringNullableWithAggregatesFilter<'Patient'> | string | null;
    emergencyContactNumber?: Prisma.StringNullableWithAggregatesFilter<'Patient'> | string | null;
    relation?: Prisma.StringNullableWithAggregatesFilter<'Patient'> | string | null;
    bloodGroup?: Prisma.StringNullableWithAggregatesFilter<'Patient'> | string | null;
    allergies?: Prisma.StringNullableWithAggregatesFilter<'Patient'> | string | null;
    medicalConditions?: Prisma.StringNullableWithAggregatesFilter<'Patient'> | string | null;
    medicalHistory?: Prisma.StringNullableWithAggregatesFilter<'Patient'> | string | null;
    insuranceProvider?: Prisma.StringNullableWithAggregatesFilter<'Patient'> | string | null;
    insuranceNumber?: Prisma.StringNullableWithAggregatesFilter<'Patient'> | string | null;
    privacyConsent?: Prisma.BoolNullableWithAggregatesFilter<'Patient'> | boolean | null;
    serviceConsent?: Prisma.BoolNullableWithAggregatesFilter<'Patient'> | boolean | null;
    medicalConsent?: Prisma.BoolNullableWithAggregatesFilter<'Patient'> | boolean | null;
    img?: Prisma.StringNullableWithAggregatesFilter<'Patient'> | string | null;
    colorCode?: Prisma.StringNullableWithAggregatesFilter<'Patient'> | string | null;
    role?: Prisma.EnumRoleNullableWithAggregatesFilter<'Patient'> | $Enums.Role | null;
    createdAt?: Prisma.DateTimeWithAggregatesFilter<'Patient'> | Date | string;
    updatedAt?: Prisma.DateTimeWithAggregatesFilter<'Patient'> | Date | string;
};

export type PatientCreateInput = {
    id: string;
    firstName: string;
    lastName: string;
    dateOfBirth: Date | string;
    gender?: $Enums.Gender;
    phone?: string | null;
    email: string;
    maritalStatus?: string | null;
    nutritionalStatus?: string | null;
    address?: string | null;
    emergencyContactName?: string | null;
    emergencyContactNumber?: string | null;
    relation?: string | null;
    bloodGroup?: string | null;
    allergies?: string | null;
    medicalConditions?: string | null;
    medicalHistory?: string | null;
    insuranceProvider?: string | null;
    insuranceNumber?: string | null;
    privacyConsent?: boolean | null;
    serviceConsent?: boolean | null;
    medicalConsent?: boolean | null;
    img?: string | null;
    colorCode?: string | null;
    role?: $Enums.Role | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    user: Prisma.UserCreateNestedOneWithoutPatientInput;
    appointments?: Prisma.AppointmentCreateNestedManyWithoutPatientInput;
    medical?: Prisma.MedicalRecordsCreateNestedManyWithoutPatientInput;
    payments?: Prisma.PaymentCreateNestedManyWithoutPatientInput;
    ratings?: Prisma.RatingCreateNestedManyWithoutPatientInput;
    Prescription?: Prisma.PrescriptionCreateNestedManyWithoutPatientInput;
    Vaccination?: Prisma.VaccinationCreateNestedManyWithoutPatientInput;
};

export type PatientUncheckedCreateInput = {
    id: string;
    firstName: string;
    lastName: string;
    userId: string;
    dateOfBirth: Date | string;
    gender?: $Enums.Gender;
    phone?: string | null;
    email: string;
    maritalStatus?: string | null;
    nutritionalStatus?: string | null;
    address?: string | null;
    emergencyContactName?: string | null;
    emergencyContactNumber?: string | null;
    relation?: string | null;
    bloodGroup?: string | null;
    allergies?: string | null;
    medicalConditions?: string | null;
    medicalHistory?: string | null;
    insuranceProvider?: string | null;
    insuranceNumber?: string | null;
    privacyConsent?: boolean | null;
    serviceConsent?: boolean | null;
    medicalConsent?: boolean | null;
    img?: string | null;
    colorCode?: string | null;
    role?: $Enums.Role | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    appointments?: Prisma.AppointmentUncheckedCreateNestedManyWithoutPatientInput;
    medical?: Prisma.MedicalRecordsUncheckedCreateNestedManyWithoutPatientInput;
    payments?: Prisma.PaymentUncheckedCreateNestedManyWithoutPatientInput;
    ratings?: Prisma.RatingUncheckedCreateNestedManyWithoutPatientInput;
    Prescription?: Prisma.PrescriptionUncheckedCreateNestedManyWithoutPatientInput;
    Vaccination?: Prisma.VaccinationUncheckedCreateNestedManyWithoutPatientInput;
};

export type PatientUpdateInput = {
    id?: Prisma.StringFieldUpdateOperationsInput | string;
    firstName?: Prisma.StringFieldUpdateOperationsInput | string;
    lastName?: Prisma.StringFieldUpdateOperationsInput | string;
    dateOfBirth?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    gender?: Prisma.EnumGenderFieldUpdateOperationsInput | $Enums.Gender;
    phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    email?: Prisma.StringFieldUpdateOperationsInput | string;
    maritalStatus?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    nutritionalStatus?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    emergencyContactName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    emergencyContactNumber?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    relation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    bloodGroup?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    allergies?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    medicalConditions?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    medicalHistory?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    insuranceProvider?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    insuranceNumber?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    privacyConsent?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
    serviceConsent?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
    medicalConsent?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
    img?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    colorCode?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    role?: Prisma.NullableEnumRoleFieldUpdateOperationsInput | $Enums.Role | null;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    user?: Prisma.UserUpdateOneRequiredWithoutPatientNestedInput;
    appointments?: Prisma.AppointmentUpdateManyWithoutPatientNestedInput;
    medical?: Prisma.MedicalRecordsUpdateManyWithoutPatientNestedInput;
    payments?: Prisma.PaymentUpdateManyWithoutPatientNestedInput;
    ratings?: Prisma.RatingUpdateManyWithoutPatientNestedInput;
    Prescription?: Prisma.PrescriptionUpdateManyWithoutPatientNestedInput;
    Vaccination?: Prisma.VaccinationUpdateManyWithoutPatientNestedInput;
};

export type PatientUncheckedUpdateInput = {
    id?: Prisma.StringFieldUpdateOperationsInput | string;
    firstName?: Prisma.StringFieldUpdateOperationsInput | string;
    lastName?: Prisma.StringFieldUpdateOperationsInput | string;
    userId?: Prisma.StringFieldUpdateOperationsInput | string;
    dateOfBirth?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    gender?: Prisma.EnumGenderFieldUpdateOperationsInput | $Enums.Gender;
    phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    email?: Prisma.StringFieldUpdateOperationsInput | string;
    maritalStatus?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    nutritionalStatus?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    emergencyContactName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    emergencyContactNumber?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    relation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    bloodGroup?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    allergies?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    medicalConditions?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    medicalHistory?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    insuranceProvider?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    insuranceNumber?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    privacyConsent?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
    serviceConsent?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
    medicalConsent?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
    img?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    colorCode?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    role?: Prisma.NullableEnumRoleFieldUpdateOperationsInput | $Enums.Role | null;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    appointments?: Prisma.AppointmentUncheckedUpdateManyWithoutPatientNestedInput;
    medical?: Prisma.MedicalRecordsUncheckedUpdateManyWithoutPatientNestedInput;
    payments?: Prisma.PaymentUncheckedUpdateManyWithoutPatientNestedInput;
    ratings?: Prisma.RatingUncheckedUpdateManyWithoutPatientNestedInput;
    Prescription?: Prisma.PrescriptionUncheckedUpdateManyWithoutPatientNestedInput;
    Vaccination?: Prisma.VaccinationUncheckedUpdateManyWithoutPatientNestedInput;
};

export type PatientCreateManyInput = {
    id: string;
    firstName: string;
    lastName: string;
    userId: string;
    dateOfBirth: Date | string;
    gender?: $Enums.Gender;
    phone?: string | null;
    email: string;
    maritalStatus?: string | null;
    nutritionalStatus?: string | null;
    address?: string | null;
    emergencyContactName?: string | null;
    emergencyContactNumber?: string | null;
    relation?: string | null;
    bloodGroup?: string | null;
    allergies?: string | null;
    medicalConditions?: string | null;
    medicalHistory?: string | null;
    insuranceProvider?: string | null;
    insuranceNumber?: string | null;
    privacyConsent?: boolean | null;
    serviceConsent?: boolean | null;
    medicalConsent?: boolean | null;
    img?: string | null;
    colorCode?: string | null;
    role?: $Enums.Role | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
};

export type PatientUpdateManyMutationInput = {
    id?: Prisma.StringFieldUpdateOperationsInput | string;
    firstName?: Prisma.StringFieldUpdateOperationsInput | string;
    lastName?: Prisma.StringFieldUpdateOperationsInput | string;
    dateOfBirth?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    gender?: Prisma.EnumGenderFieldUpdateOperationsInput | $Enums.Gender;
    phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    email?: Prisma.StringFieldUpdateOperationsInput | string;
    maritalStatus?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    nutritionalStatus?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    emergencyContactName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    emergencyContactNumber?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    relation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    bloodGroup?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    allergies?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    medicalConditions?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    medicalHistory?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    insuranceProvider?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    insuranceNumber?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    privacyConsent?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
    serviceConsent?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
    medicalConsent?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
    img?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    colorCode?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    role?: Prisma.NullableEnumRoleFieldUpdateOperationsInput | $Enums.Role | null;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type PatientUncheckedUpdateManyInput = {
    id?: Prisma.StringFieldUpdateOperationsInput | string;
    firstName?: Prisma.StringFieldUpdateOperationsInput | string;
    lastName?: Prisma.StringFieldUpdateOperationsInput | string;
    userId?: Prisma.StringFieldUpdateOperationsInput | string;
    dateOfBirth?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    gender?: Prisma.EnumGenderFieldUpdateOperationsInput | $Enums.Gender;
    phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    email?: Prisma.StringFieldUpdateOperationsInput | string;
    maritalStatus?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    nutritionalStatus?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    emergencyContactName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    emergencyContactNumber?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    relation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    bloodGroup?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    allergies?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    medicalConditions?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    medicalHistory?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    insuranceProvider?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    insuranceNumber?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    privacyConsent?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
    serviceConsent?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
    medicalConsent?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
    img?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    colorCode?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    role?: Prisma.NullableEnumRoleFieldUpdateOperationsInput | $Enums.Role | null;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type PatientListRelationFilter = {
    every?: Prisma.PatientWhereInput;
    some?: Prisma.PatientWhereInput;
    none?: Prisma.PatientWhereInput;
};

export type PatientOrderByRelationAggregateInput = {
    _count?: Prisma.SortOrder;
};

export type PatientCountOrderByAggregateInput = {
    id?: Prisma.SortOrder;
    firstName?: Prisma.SortOrder;
    lastName?: Prisma.SortOrder;
    userId?: Prisma.SortOrder;
    dateOfBirth?: Prisma.SortOrder;
    gender?: Prisma.SortOrder;
    phone?: Prisma.SortOrder;
    email?: Prisma.SortOrder;
    maritalStatus?: Prisma.SortOrder;
    nutritionalStatus?: Prisma.SortOrder;
    address?: Prisma.SortOrder;
    emergencyContactName?: Prisma.SortOrder;
    emergencyContactNumber?: Prisma.SortOrder;
    relation?: Prisma.SortOrder;
    bloodGroup?: Prisma.SortOrder;
    allergies?: Prisma.SortOrder;
    medicalConditions?: Prisma.SortOrder;
    medicalHistory?: Prisma.SortOrder;
    insuranceProvider?: Prisma.SortOrder;
    insuranceNumber?: Prisma.SortOrder;
    privacyConsent?: Prisma.SortOrder;
    serviceConsent?: Prisma.SortOrder;
    medicalConsent?: Prisma.SortOrder;
    img?: Prisma.SortOrder;
    colorCode?: Prisma.SortOrder;
    role?: Prisma.SortOrder;
    createdAt?: Prisma.SortOrder;
    updatedAt?: Prisma.SortOrder;
};

export type PatientMaxOrderByAggregateInput = {
    id?: Prisma.SortOrder;
    firstName?: Prisma.SortOrder;
    lastName?: Prisma.SortOrder;
    userId?: Prisma.SortOrder;
    dateOfBirth?: Prisma.SortOrder;
    gender?: Prisma.SortOrder;
    phone?: Prisma.SortOrder;
    email?: Prisma.SortOrder;
    maritalStatus?: Prisma.SortOrder;
    nutritionalStatus?: Prisma.SortOrder;
    address?: Prisma.SortOrder;
    emergencyContactName?: Prisma.SortOrder;
    emergencyContactNumber?: Prisma.SortOrder;
    relation?: Prisma.SortOrder;
    bloodGroup?: Prisma.SortOrder;
    allergies?: Prisma.SortOrder;
    medicalConditions?: Prisma.SortOrder;
    medicalHistory?: Prisma.SortOrder;
    insuranceProvider?: Prisma.SortOrder;
    insuranceNumber?: Prisma.SortOrder;
    privacyConsent?: Prisma.SortOrder;
    serviceConsent?: Prisma.SortOrder;
    medicalConsent?: Prisma.SortOrder;
    img?: Prisma.SortOrder;
    colorCode?: Prisma.SortOrder;
    role?: Prisma.SortOrder;
    createdAt?: Prisma.SortOrder;
    updatedAt?: Prisma.SortOrder;
};

export type PatientMinOrderByAggregateInput = {
    id?: Prisma.SortOrder;
    firstName?: Prisma.SortOrder;
    lastName?: Prisma.SortOrder;
    userId?: Prisma.SortOrder;
    dateOfBirth?: Prisma.SortOrder;
    gender?: Prisma.SortOrder;
    phone?: Prisma.SortOrder;
    email?: Prisma.SortOrder;
    maritalStatus?: Prisma.SortOrder;
    nutritionalStatus?: Prisma.SortOrder;
    address?: Prisma.SortOrder;
    emergencyContactName?: Prisma.SortOrder;
    emergencyContactNumber?: Prisma.SortOrder;
    relation?: Prisma.SortOrder;
    bloodGroup?: Prisma.SortOrder;
    allergies?: Prisma.SortOrder;
    medicalConditions?: Prisma.SortOrder;
    medicalHistory?: Prisma.SortOrder;
    insuranceProvider?: Prisma.SortOrder;
    insuranceNumber?: Prisma.SortOrder;
    privacyConsent?: Prisma.SortOrder;
    serviceConsent?: Prisma.SortOrder;
    medicalConsent?: Prisma.SortOrder;
    img?: Prisma.SortOrder;
    colorCode?: Prisma.SortOrder;
    role?: Prisma.SortOrder;
    createdAt?: Prisma.SortOrder;
    updatedAt?: Prisma.SortOrder;
};

export type PatientScalarRelationFilter = {
    is?: Prisma.PatientWhereInput;
    isNot?: Prisma.PatientWhereInput;
};

export type PatientCreateNestedManyWithoutUserInput = {
    create?:
        | Prisma.XOR<Prisma.PatientCreateWithoutUserInput, Prisma.PatientUncheckedCreateWithoutUserInput>
        | Prisma.PatientCreateWithoutUserInput[]
        | Prisma.PatientUncheckedCreateWithoutUserInput[];
    connectOrCreate?: Prisma.PatientCreateOrConnectWithoutUserInput | Prisma.PatientCreateOrConnectWithoutUserInput[];
    createMany?: Prisma.PatientCreateManyUserInputEnvelope;
    connect?: Prisma.PatientWhereUniqueInput | Prisma.PatientWhereUniqueInput[];
};

export type PatientUncheckedCreateNestedManyWithoutUserInput = {
    create?:
        | Prisma.XOR<Prisma.PatientCreateWithoutUserInput, Prisma.PatientUncheckedCreateWithoutUserInput>
        | Prisma.PatientCreateWithoutUserInput[]
        | Prisma.PatientUncheckedCreateWithoutUserInput[];
    connectOrCreate?: Prisma.PatientCreateOrConnectWithoutUserInput | Prisma.PatientCreateOrConnectWithoutUserInput[];
    createMany?: Prisma.PatientCreateManyUserInputEnvelope;
    connect?: Prisma.PatientWhereUniqueInput | Prisma.PatientWhereUniqueInput[];
};

export type PatientUpdateManyWithoutUserNestedInput = {
    create?:
        | Prisma.XOR<Prisma.PatientCreateWithoutUserInput, Prisma.PatientUncheckedCreateWithoutUserInput>
        | Prisma.PatientCreateWithoutUserInput[]
        | Prisma.PatientUncheckedCreateWithoutUserInput[];
    connectOrCreate?: Prisma.PatientCreateOrConnectWithoutUserInput | Prisma.PatientCreateOrConnectWithoutUserInput[];
    upsert?:
        | Prisma.PatientUpsertWithWhereUniqueWithoutUserInput
        | Prisma.PatientUpsertWithWhereUniqueWithoutUserInput[];
    createMany?: Prisma.PatientCreateManyUserInputEnvelope;
    set?: Prisma.PatientWhereUniqueInput | Prisma.PatientWhereUniqueInput[];
    disconnect?: Prisma.PatientWhereUniqueInput | Prisma.PatientWhereUniqueInput[];
    delete?: Prisma.PatientWhereUniqueInput | Prisma.PatientWhereUniqueInput[];
    connect?: Prisma.PatientWhereUniqueInput | Prisma.PatientWhereUniqueInput[];
    update?:
        | Prisma.PatientUpdateWithWhereUniqueWithoutUserInput
        | Prisma.PatientUpdateWithWhereUniqueWithoutUserInput[];
    updateMany?:
        | Prisma.PatientUpdateManyWithWhereWithoutUserInput
        | Prisma.PatientUpdateManyWithWhereWithoutUserInput[];
    deleteMany?: Prisma.PatientScalarWhereInput | Prisma.PatientScalarWhereInput[];
};

export type PatientUncheckedUpdateManyWithoutUserNestedInput = {
    create?:
        | Prisma.XOR<Prisma.PatientCreateWithoutUserInput, Prisma.PatientUncheckedCreateWithoutUserInput>
        | Prisma.PatientCreateWithoutUserInput[]
        | Prisma.PatientUncheckedCreateWithoutUserInput[];
    connectOrCreate?: Prisma.PatientCreateOrConnectWithoutUserInput | Prisma.PatientCreateOrConnectWithoutUserInput[];
    upsert?:
        | Prisma.PatientUpsertWithWhereUniqueWithoutUserInput
        | Prisma.PatientUpsertWithWhereUniqueWithoutUserInput[];
    createMany?: Prisma.PatientCreateManyUserInputEnvelope;
    set?: Prisma.PatientWhereUniqueInput | Prisma.PatientWhereUniqueInput[];
    disconnect?: Prisma.PatientWhereUniqueInput | Prisma.PatientWhereUniqueInput[];
    delete?: Prisma.PatientWhereUniqueInput | Prisma.PatientWhereUniqueInput[];
    connect?: Prisma.PatientWhereUniqueInput | Prisma.PatientWhereUniqueInput[];
    update?:
        | Prisma.PatientUpdateWithWhereUniqueWithoutUserInput
        | Prisma.PatientUpdateWithWhereUniqueWithoutUserInput[];
    updateMany?:
        | Prisma.PatientUpdateManyWithWhereWithoutUserInput
        | Prisma.PatientUpdateManyWithWhereWithoutUserInput[];
    deleteMany?: Prisma.PatientScalarWhereInput | Prisma.PatientScalarWhereInput[];
};

export type EnumGenderFieldUpdateOperationsInput = {
    set?: $Enums.Gender;
};

export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null;
};

export type NullableEnumRoleFieldUpdateOperationsInput = {
    set?: $Enums.Role | null;
};

export type PatientCreateNestedOneWithoutAppointmentsInput = {
    create?: Prisma.XOR<
        Prisma.PatientCreateWithoutAppointmentsInput,
        Prisma.PatientUncheckedCreateWithoutAppointmentsInput
    >;
    connectOrCreate?: Prisma.PatientCreateOrConnectWithoutAppointmentsInput;
    connect?: Prisma.PatientWhereUniqueInput;
};

export type PatientUpdateOneRequiredWithoutAppointmentsNestedInput = {
    create?: Prisma.XOR<
        Prisma.PatientCreateWithoutAppointmentsInput,
        Prisma.PatientUncheckedCreateWithoutAppointmentsInput
    >;
    connectOrCreate?: Prisma.PatientCreateOrConnectWithoutAppointmentsInput;
    upsert?: Prisma.PatientUpsertWithoutAppointmentsInput;
    connect?: Prisma.PatientWhereUniqueInput;
    update?: Prisma.XOR<
        Prisma.XOR<
            Prisma.PatientUpdateToOneWithWhereWithoutAppointmentsInput,
            Prisma.PatientUpdateWithoutAppointmentsInput
        >,
        Prisma.PatientUncheckedUpdateWithoutAppointmentsInput
    >;
};

export type PatientCreateNestedOneWithoutPaymentsInput = {
    create?: Prisma.XOR<Prisma.PatientCreateWithoutPaymentsInput, Prisma.PatientUncheckedCreateWithoutPaymentsInput>;
    connectOrCreate?: Prisma.PatientCreateOrConnectWithoutPaymentsInput;
    connect?: Prisma.PatientWhereUniqueInput;
};

export type PatientUpdateOneRequiredWithoutPaymentsNestedInput = {
    create?: Prisma.XOR<Prisma.PatientCreateWithoutPaymentsInput, Prisma.PatientUncheckedCreateWithoutPaymentsInput>;
    connectOrCreate?: Prisma.PatientCreateOrConnectWithoutPaymentsInput;
    upsert?: Prisma.PatientUpsertWithoutPaymentsInput;
    connect?: Prisma.PatientWhereUniqueInput;
    update?: Prisma.XOR<
        Prisma.XOR<Prisma.PatientUpdateToOneWithWhereWithoutPaymentsInput, Prisma.PatientUpdateWithoutPaymentsInput>,
        Prisma.PatientUncheckedUpdateWithoutPaymentsInput
    >;
};

export type PatientCreateNestedOneWithoutMedicalInput = {
    create?: Prisma.XOR<Prisma.PatientCreateWithoutMedicalInput, Prisma.PatientUncheckedCreateWithoutMedicalInput>;
    connectOrCreate?: Prisma.PatientCreateOrConnectWithoutMedicalInput;
    connect?: Prisma.PatientWhereUniqueInput;
};

export type PatientUpdateOneRequiredWithoutMedicalNestedInput = {
    create?: Prisma.XOR<Prisma.PatientCreateWithoutMedicalInput, Prisma.PatientUncheckedCreateWithoutMedicalInput>;
    connectOrCreate?: Prisma.PatientCreateOrConnectWithoutMedicalInput;
    upsert?: Prisma.PatientUpsertWithoutMedicalInput;
    connect?: Prisma.PatientWhereUniqueInput;
    update?: Prisma.XOR<
        Prisma.XOR<Prisma.PatientUpdateToOneWithWhereWithoutMedicalInput, Prisma.PatientUpdateWithoutMedicalInput>,
        Prisma.PatientUncheckedUpdateWithoutMedicalInput
    >;
};

export type PatientCreateNestedOneWithoutRatingsInput = {
    create?: Prisma.XOR<Prisma.PatientCreateWithoutRatingsInput, Prisma.PatientUncheckedCreateWithoutRatingsInput>;
    connectOrCreate?: Prisma.PatientCreateOrConnectWithoutRatingsInput;
    connect?: Prisma.PatientWhereUniqueInput;
};

export type PatientUpdateOneRequiredWithoutRatingsNestedInput = {
    create?: Prisma.XOR<Prisma.PatientCreateWithoutRatingsInput, Prisma.PatientUncheckedCreateWithoutRatingsInput>;
    connectOrCreate?: Prisma.PatientCreateOrConnectWithoutRatingsInput;
    upsert?: Prisma.PatientUpsertWithoutRatingsInput;
    connect?: Prisma.PatientWhereUniqueInput;
    update?: Prisma.XOR<
        Prisma.XOR<Prisma.PatientUpdateToOneWithWhereWithoutRatingsInput, Prisma.PatientUpdateWithoutRatingsInput>,
        Prisma.PatientUncheckedUpdateWithoutRatingsInput
    >;
};

export type PatientCreateNestedOneWithoutPrescriptionInput = {
    create?: Prisma.XOR<
        Prisma.PatientCreateWithoutPrescriptionInput,
        Prisma.PatientUncheckedCreateWithoutPrescriptionInput
    >;
    connectOrCreate?: Prisma.PatientCreateOrConnectWithoutPrescriptionInput;
    connect?: Prisma.PatientWhereUniqueInput;
};

export type PatientUpdateOneRequiredWithoutPrescriptionNestedInput = {
    create?: Prisma.XOR<
        Prisma.PatientCreateWithoutPrescriptionInput,
        Prisma.PatientUncheckedCreateWithoutPrescriptionInput
    >;
    connectOrCreate?: Prisma.PatientCreateOrConnectWithoutPrescriptionInput;
    upsert?: Prisma.PatientUpsertWithoutPrescriptionInput;
    connect?: Prisma.PatientWhereUniqueInput;
    update?: Prisma.XOR<
        Prisma.XOR<
            Prisma.PatientUpdateToOneWithWhereWithoutPrescriptionInput,
            Prisma.PatientUpdateWithoutPrescriptionInput
        >,
        Prisma.PatientUncheckedUpdateWithoutPrescriptionInput
    >;
};

export type PatientCreateNestedOneWithoutVaccinationInput = {
    create?: Prisma.XOR<
        Prisma.PatientCreateWithoutVaccinationInput,
        Prisma.PatientUncheckedCreateWithoutVaccinationInput
    >;
    connectOrCreate?: Prisma.PatientCreateOrConnectWithoutVaccinationInput;
    connect?: Prisma.PatientWhereUniqueInput;
};

export type PatientUpdateOneRequiredWithoutVaccinationNestedInput = {
    create?: Prisma.XOR<
        Prisma.PatientCreateWithoutVaccinationInput,
        Prisma.PatientUncheckedCreateWithoutVaccinationInput
    >;
    connectOrCreate?: Prisma.PatientCreateOrConnectWithoutVaccinationInput;
    upsert?: Prisma.PatientUpsertWithoutVaccinationInput;
    connect?: Prisma.PatientWhereUniqueInput;
    update?: Prisma.XOR<
        Prisma.XOR<
            Prisma.PatientUpdateToOneWithWhereWithoutVaccinationInput,
            Prisma.PatientUpdateWithoutVaccinationInput
        >,
        Prisma.PatientUncheckedUpdateWithoutVaccinationInput
    >;
};

export type PatientCreateWithoutUserInput = {
    id: string;
    firstName: string;
    lastName: string;
    dateOfBirth: Date | string;
    gender?: $Enums.Gender;
    phone?: string | null;
    email: string;
    maritalStatus?: string | null;
    nutritionalStatus?: string | null;
    address?: string | null;
    emergencyContactName?: string | null;
    emergencyContactNumber?: string | null;
    relation?: string | null;
    bloodGroup?: string | null;
    allergies?: string | null;
    medicalConditions?: string | null;
    medicalHistory?: string | null;
    insuranceProvider?: string | null;
    insuranceNumber?: string | null;
    privacyConsent?: boolean | null;
    serviceConsent?: boolean | null;
    medicalConsent?: boolean | null;
    img?: string | null;
    colorCode?: string | null;
    role?: $Enums.Role | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    appointments?: Prisma.AppointmentCreateNestedManyWithoutPatientInput;
    medical?: Prisma.MedicalRecordsCreateNestedManyWithoutPatientInput;
    payments?: Prisma.PaymentCreateNestedManyWithoutPatientInput;
    ratings?: Prisma.RatingCreateNestedManyWithoutPatientInput;
    Prescription?: Prisma.PrescriptionCreateNestedManyWithoutPatientInput;
    Vaccination?: Prisma.VaccinationCreateNestedManyWithoutPatientInput;
};

export type PatientUncheckedCreateWithoutUserInput = {
    id: string;
    firstName: string;
    lastName: string;
    dateOfBirth: Date | string;
    gender?: $Enums.Gender;
    phone?: string | null;
    email: string;
    maritalStatus?: string | null;
    nutritionalStatus?: string | null;
    address?: string | null;
    emergencyContactName?: string | null;
    emergencyContactNumber?: string | null;
    relation?: string | null;
    bloodGroup?: string | null;
    allergies?: string | null;
    medicalConditions?: string | null;
    medicalHistory?: string | null;
    insuranceProvider?: string | null;
    insuranceNumber?: string | null;
    privacyConsent?: boolean | null;
    serviceConsent?: boolean | null;
    medicalConsent?: boolean | null;
    img?: string | null;
    colorCode?: string | null;
    role?: $Enums.Role | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    appointments?: Prisma.AppointmentUncheckedCreateNestedManyWithoutPatientInput;
    medical?: Prisma.MedicalRecordsUncheckedCreateNestedManyWithoutPatientInput;
    payments?: Prisma.PaymentUncheckedCreateNestedManyWithoutPatientInput;
    ratings?: Prisma.RatingUncheckedCreateNestedManyWithoutPatientInput;
    Prescription?: Prisma.PrescriptionUncheckedCreateNestedManyWithoutPatientInput;
    Vaccination?: Prisma.VaccinationUncheckedCreateNestedManyWithoutPatientInput;
};

export type PatientCreateOrConnectWithoutUserInput = {
    where: Prisma.PatientWhereUniqueInput;
    create: Prisma.XOR<Prisma.PatientCreateWithoutUserInput, Prisma.PatientUncheckedCreateWithoutUserInput>;
};

export type PatientCreateManyUserInputEnvelope = {
    data: Prisma.PatientCreateManyUserInput | Prisma.PatientCreateManyUserInput[];
    skipDuplicates?: boolean;
};

export type PatientUpsertWithWhereUniqueWithoutUserInput = {
    where: Prisma.PatientWhereUniqueInput;
    update: Prisma.XOR<Prisma.PatientUpdateWithoutUserInput, Prisma.PatientUncheckedUpdateWithoutUserInput>;
    create: Prisma.XOR<Prisma.PatientCreateWithoutUserInput, Prisma.PatientUncheckedCreateWithoutUserInput>;
};

export type PatientUpdateWithWhereUniqueWithoutUserInput = {
    where: Prisma.PatientWhereUniqueInput;
    data: Prisma.XOR<Prisma.PatientUpdateWithoutUserInput, Prisma.PatientUncheckedUpdateWithoutUserInput>;
};

export type PatientUpdateManyWithWhereWithoutUserInput = {
    where: Prisma.PatientScalarWhereInput;
    data: Prisma.XOR<Prisma.PatientUpdateManyMutationInput, Prisma.PatientUncheckedUpdateManyWithoutUserInput>;
};

export type PatientScalarWhereInput = {
    AND?: Prisma.PatientScalarWhereInput | Prisma.PatientScalarWhereInput[];
    OR?: Prisma.PatientScalarWhereInput[];
    NOT?: Prisma.PatientScalarWhereInput | Prisma.PatientScalarWhereInput[];
    id?: Prisma.StringFilter<'Patient'> | string;
    firstName?: Prisma.StringFilter<'Patient'> | string;
    lastName?: Prisma.StringFilter<'Patient'> | string;
    userId?: Prisma.StringFilter<'Patient'> | string;
    dateOfBirth?: Prisma.DateTimeFilter<'Patient'> | Date | string;
    gender?: Prisma.EnumGenderFilter<'Patient'> | $Enums.Gender;
    phone?: Prisma.StringNullableFilter<'Patient'> | string | null;
    email?: Prisma.StringFilter<'Patient'> | string;
    maritalStatus?: Prisma.StringNullableFilter<'Patient'> | string | null;
    nutritionalStatus?: Prisma.StringNullableFilter<'Patient'> | string | null;
    address?: Prisma.StringNullableFilter<'Patient'> | string | null;
    emergencyContactName?: Prisma.StringNullableFilter<'Patient'> | string | null;
    emergencyContactNumber?: Prisma.StringNullableFilter<'Patient'> | string | null;
    relation?: Prisma.StringNullableFilter<'Patient'> | string | null;
    bloodGroup?: Prisma.StringNullableFilter<'Patient'> | string | null;
    allergies?: Prisma.StringNullableFilter<'Patient'> | string | null;
    medicalConditions?: Prisma.StringNullableFilter<'Patient'> | string | null;
    medicalHistory?: Prisma.StringNullableFilter<'Patient'> | string | null;
    insuranceProvider?: Prisma.StringNullableFilter<'Patient'> | string | null;
    insuranceNumber?: Prisma.StringNullableFilter<'Patient'> | string | null;
    privacyConsent?: Prisma.BoolNullableFilter<'Patient'> | boolean | null;
    serviceConsent?: Prisma.BoolNullableFilter<'Patient'> | boolean | null;
    medicalConsent?: Prisma.BoolNullableFilter<'Patient'> | boolean | null;
    img?: Prisma.StringNullableFilter<'Patient'> | string | null;
    colorCode?: Prisma.StringNullableFilter<'Patient'> | string | null;
    role?: Prisma.EnumRoleNullableFilter<'Patient'> | $Enums.Role | null;
    createdAt?: Prisma.DateTimeFilter<'Patient'> | Date | string;
    updatedAt?: Prisma.DateTimeFilter<'Patient'> | Date | string;
};

export type PatientCreateWithoutAppointmentsInput = {
    id: string;
    firstName: string;
    lastName: string;
    dateOfBirth: Date | string;
    gender?: $Enums.Gender;
    phone?: string | null;
    email: string;
    maritalStatus?: string | null;
    nutritionalStatus?: string | null;
    address?: string | null;
    emergencyContactName?: string | null;
    emergencyContactNumber?: string | null;
    relation?: string | null;
    bloodGroup?: string | null;
    allergies?: string | null;
    medicalConditions?: string | null;
    medicalHistory?: string | null;
    insuranceProvider?: string | null;
    insuranceNumber?: string | null;
    privacyConsent?: boolean | null;
    serviceConsent?: boolean | null;
    medicalConsent?: boolean | null;
    img?: string | null;
    colorCode?: string | null;
    role?: $Enums.Role | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    user: Prisma.UserCreateNestedOneWithoutPatientInput;
    medical?: Prisma.MedicalRecordsCreateNestedManyWithoutPatientInput;
    payments?: Prisma.PaymentCreateNestedManyWithoutPatientInput;
    ratings?: Prisma.RatingCreateNestedManyWithoutPatientInput;
    Prescription?: Prisma.PrescriptionCreateNestedManyWithoutPatientInput;
    Vaccination?: Prisma.VaccinationCreateNestedManyWithoutPatientInput;
};

export type PatientUncheckedCreateWithoutAppointmentsInput = {
    id: string;
    firstName: string;
    lastName: string;
    userId: string;
    dateOfBirth: Date | string;
    gender?: $Enums.Gender;
    phone?: string | null;
    email: string;
    maritalStatus?: string | null;
    nutritionalStatus?: string | null;
    address?: string | null;
    emergencyContactName?: string | null;
    emergencyContactNumber?: string | null;
    relation?: string | null;
    bloodGroup?: string | null;
    allergies?: string | null;
    medicalConditions?: string | null;
    medicalHistory?: string | null;
    insuranceProvider?: string | null;
    insuranceNumber?: string | null;
    privacyConsent?: boolean | null;
    serviceConsent?: boolean | null;
    medicalConsent?: boolean | null;
    img?: string | null;
    colorCode?: string | null;
    role?: $Enums.Role | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    medical?: Prisma.MedicalRecordsUncheckedCreateNestedManyWithoutPatientInput;
    payments?: Prisma.PaymentUncheckedCreateNestedManyWithoutPatientInput;
    ratings?: Prisma.RatingUncheckedCreateNestedManyWithoutPatientInput;
    Prescription?: Prisma.PrescriptionUncheckedCreateNestedManyWithoutPatientInput;
    Vaccination?: Prisma.VaccinationUncheckedCreateNestedManyWithoutPatientInput;
};

export type PatientCreateOrConnectWithoutAppointmentsInput = {
    where: Prisma.PatientWhereUniqueInput;
    create: Prisma.XOR<
        Prisma.PatientCreateWithoutAppointmentsInput,
        Prisma.PatientUncheckedCreateWithoutAppointmentsInput
    >;
};

export type PatientUpsertWithoutAppointmentsInput = {
    update: Prisma.XOR<
        Prisma.PatientUpdateWithoutAppointmentsInput,
        Prisma.PatientUncheckedUpdateWithoutAppointmentsInput
    >;
    create: Prisma.XOR<
        Prisma.PatientCreateWithoutAppointmentsInput,
        Prisma.PatientUncheckedCreateWithoutAppointmentsInput
    >;
    where?: Prisma.PatientWhereInput;
};

export type PatientUpdateToOneWithWhereWithoutAppointmentsInput = {
    where?: Prisma.PatientWhereInput;
    data: Prisma.XOR<
        Prisma.PatientUpdateWithoutAppointmentsInput,
        Prisma.PatientUncheckedUpdateWithoutAppointmentsInput
    >;
};

export type PatientUpdateWithoutAppointmentsInput = {
    id?: Prisma.StringFieldUpdateOperationsInput | string;
    firstName?: Prisma.StringFieldUpdateOperationsInput | string;
    lastName?: Prisma.StringFieldUpdateOperationsInput | string;
    dateOfBirth?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    gender?: Prisma.EnumGenderFieldUpdateOperationsInput | $Enums.Gender;
    phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    email?: Prisma.StringFieldUpdateOperationsInput | string;
    maritalStatus?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    nutritionalStatus?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    emergencyContactName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    emergencyContactNumber?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    relation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    bloodGroup?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    allergies?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    medicalConditions?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    medicalHistory?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    insuranceProvider?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    insuranceNumber?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    privacyConsent?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
    serviceConsent?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
    medicalConsent?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
    img?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    colorCode?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    role?: Prisma.NullableEnumRoleFieldUpdateOperationsInput | $Enums.Role | null;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    user?: Prisma.UserUpdateOneRequiredWithoutPatientNestedInput;
    medical?: Prisma.MedicalRecordsUpdateManyWithoutPatientNestedInput;
    payments?: Prisma.PaymentUpdateManyWithoutPatientNestedInput;
    ratings?: Prisma.RatingUpdateManyWithoutPatientNestedInput;
    Prescription?: Prisma.PrescriptionUpdateManyWithoutPatientNestedInput;
    Vaccination?: Prisma.VaccinationUpdateManyWithoutPatientNestedInput;
};

export type PatientUncheckedUpdateWithoutAppointmentsInput = {
    id?: Prisma.StringFieldUpdateOperationsInput | string;
    firstName?: Prisma.StringFieldUpdateOperationsInput | string;
    lastName?: Prisma.StringFieldUpdateOperationsInput | string;
    userId?: Prisma.StringFieldUpdateOperationsInput | string;
    dateOfBirth?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    gender?: Prisma.EnumGenderFieldUpdateOperationsInput | $Enums.Gender;
    phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    email?: Prisma.StringFieldUpdateOperationsInput | string;
    maritalStatus?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    nutritionalStatus?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    emergencyContactName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    emergencyContactNumber?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    relation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    bloodGroup?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    allergies?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    medicalConditions?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    medicalHistory?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    insuranceProvider?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    insuranceNumber?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    privacyConsent?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
    serviceConsent?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
    medicalConsent?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
    img?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    colorCode?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    role?: Prisma.NullableEnumRoleFieldUpdateOperationsInput | $Enums.Role | null;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    medical?: Prisma.MedicalRecordsUncheckedUpdateManyWithoutPatientNestedInput;
    payments?: Prisma.PaymentUncheckedUpdateManyWithoutPatientNestedInput;
    ratings?: Prisma.RatingUncheckedUpdateManyWithoutPatientNestedInput;
    Prescription?: Prisma.PrescriptionUncheckedUpdateManyWithoutPatientNestedInput;
    Vaccination?: Prisma.VaccinationUncheckedUpdateManyWithoutPatientNestedInput;
};

export type PatientCreateWithoutPaymentsInput = {
    id: string;
    firstName: string;
    lastName: string;
    dateOfBirth: Date | string;
    gender?: $Enums.Gender;
    phone?: string | null;
    email: string;
    maritalStatus?: string | null;
    nutritionalStatus?: string | null;
    address?: string | null;
    emergencyContactName?: string | null;
    emergencyContactNumber?: string | null;
    relation?: string | null;
    bloodGroup?: string | null;
    allergies?: string | null;
    medicalConditions?: string | null;
    medicalHistory?: string | null;
    insuranceProvider?: string | null;
    insuranceNumber?: string | null;
    privacyConsent?: boolean | null;
    serviceConsent?: boolean | null;
    medicalConsent?: boolean | null;
    img?: string | null;
    colorCode?: string | null;
    role?: $Enums.Role | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    user: Prisma.UserCreateNestedOneWithoutPatientInput;
    appointments?: Prisma.AppointmentCreateNestedManyWithoutPatientInput;
    medical?: Prisma.MedicalRecordsCreateNestedManyWithoutPatientInput;
    ratings?: Prisma.RatingCreateNestedManyWithoutPatientInput;
    Prescription?: Prisma.PrescriptionCreateNestedManyWithoutPatientInput;
    Vaccination?: Prisma.VaccinationCreateNestedManyWithoutPatientInput;
};

export type PatientUncheckedCreateWithoutPaymentsInput = {
    id: string;
    firstName: string;
    lastName: string;
    userId: string;
    dateOfBirth: Date | string;
    gender?: $Enums.Gender;
    phone?: string | null;
    email: string;
    maritalStatus?: string | null;
    nutritionalStatus?: string | null;
    address?: string | null;
    emergencyContactName?: string | null;
    emergencyContactNumber?: string | null;
    relation?: string | null;
    bloodGroup?: string | null;
    allergies?: string | null;
    medicalConditions?: string | null;
    medicalHistory?: string | null;
    insuranceProvider?: string | null;
    insuranceNumber?: string | null;
    privacyConsent?: boolean | null;
    serviceConsent?: boolean | null;
    medicalConsent?: boolean | null;
    img?: string | null;
    colorCode?: string | null;
    role?: $Enums.Role | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    appointments?: Prisma.AppointmentUncheckedCreateNestedManyWithoutPatientInput;
    medical?: Prisma.MedicalRecordsUncheckedCreateNestedManyWithoutPatientInput;
    ratings?: Prisma.RatingUncheckedCreateNestedManyWithoutPatientInput;
    Prescription?: Prisma.PrescriptionUncheckedCreateNestedManyWithoutPatientInput;
    Vaccination?: Prisma.VaccinationUncheckedCreateNestedManyWithoutPatientInput;
};

export type PatientCreateOrConnectWithoutPaymentsInput = {
    where: Prisma.PatientWhereUniqueInput;
    create: Prisma.XOR<Prisma.PatientCreateWithoutPaymentsInput, Prisma.PatientUncheckedCreateWithoutPaymentsInput>;
};

export type PatientUpsertWithoutPaymentsInput = {
    update: Prisma.XOR<Prisma.PatientUpdateWithoutPaymentsInput, Prisma.PatientUncheckedUpdateWithoutPaymentsInput>;
    create: Prisma.XOR<Prisma.PatientCreateWithoutPaymentsInput, Prisma.PatientUncheckedCreateWithoutPaymentsInput>;
    where?: Prisma.PatientWhereInput;
};

export type PatientUpdateToOneWithWhereWithoutPaymentsInput = {
    where?: Prisma.PatientWhereInput;
    data: Prisma.XOR<Prisma.PatientUpdateWithoutPaymentsInput, Prisma.PatientUncheckedUpdateWithoutPaymentsInput>;
};

export type PatientUpdateWithoutPaymentsInput = {
    id?: Prisma.StringFieldUpdateOperationsInput | string;
    firstName?: Prisma.StringFieldUpdateOperationsInput | string;
    lastName?: Prisma.StringFieldUpdateOperationsInput | string;
    dateOfBirth?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    gender?: Prisma.EnumGenderFieldUpdateOperationsInput | $Enums.Gender;
    phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    email?: Prisma.StringFieldUpdateOperationsInput | string;
    maritalStatus?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    nutritionalStatus?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    emergencyContactName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    emergencyContactNumber?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    relation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    bloodGroup?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    allergies?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    medicalConditions?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    medicalHistory?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    insuranceProvider?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    insuranceNumber?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    privacyConsent?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
    serviceConsent?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
    medicalConsent?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
    img?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    colorCode?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    role?: Prisma.NullableEnumRoleFieldUpdateOperationsInput | $Enums.Role | null;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    user?: Prisma.UserUpdateOneRequiredWithoutPatientNestedInput;
    appointments?: Prisma.AppointmentUpdateManyWithoutPatientNestedInput;
    medical?: Prisma.MedicalRecordsUpdateManyWithoutPatientNestedInput;
    ratings?: Prisma.RatingUpdateManyWithoutPatientNestedInput;
    Prescription?: Prisma.PrescriptionUpdateManyWithoutPatientNestedInput;
    Vaccination?: Prisma.VaccinationUpdateManyWithoutPatientNestedInput;
};

export type PatientUncheckedUpdateWithoutPaymentsInput = {
    id?: Prisma.StringFieldUpdateOperationsInput | string;
    firstName?: Prisma.StringFieldUpdateOperationsInput | string;
    lastName?: Prisma.StringFieldUpdateOperationsInput | string;
    userId?: Prisma.StringFieldUpdateOperationsInput | string;
    dateOfBirth?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    gender?: Prisma.EnumGenderFieldUpdateOperationsInput | $Enums.Gender;
    phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    email?: Prisma.StringFieldUpdateOperationsInput | string;
    maritalStatus?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    nutritionalStatus?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    emergencyContactName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    emergencyContactNumber?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    relation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    bloodGroup?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    allergies?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    medicalConditions?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    medicalHistory?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    insuranceProvider?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    insuranceNumber?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    privacyConsent?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
    serviceConsent?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
    medicalConsent?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
    img?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    colorCode?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    role?: Prisma.NullableEnumRoleFieldUpdateOperationsInput | $Enums.Role | null;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    appointments?: Prisma.AppointmentUncheckedUpdateManyWithoutPatientNestedInput;
    medical?: Prisma.MedicalRecordsUncheckedUpdateManyWithoutPatientNestedInput;
    ratings?: Prisma.RatingUncheckedUpdateManyWithoutPatientNestedInput;
    Prescription?: Prisma.PrescriptionUncheckedUpdateManyWithoutPatientNestedInput;
    Vaccination?: Prisma.VaccinationUncheckedUpdateManyWithoutPatientNestedInput;
};

export type PatientCreateWithoutMedicalInput = {
    id: string;
    firstName: string;
    lastName: string;
    dateOfBirth: Date | string;
    gender?: $Enums.Gender;
    phone?: string | null;
    email: string;
    maritalStatus?: string | null;
    nutritionalStatus?: string | null;
    address?: string | null;
    emergencyContactName?: string | null;
    emergencyContactNumber?: string | null;
    relation?: string | null;
    bloodGroup?: string | null;
    allergies?: string | null;
    medicalConditions?: string | null;
    medicalHistory?: string | null;
    insuranceProvider?: string | null;
    insuranceNumber?: string | null;
    privacyConsent?: boolean | null;
    serviceConsent?: boolean | null;
    medicalConsent?: boolean | null;
    img?: string | null;
    colorCode?: string | null;
    role?: $Enums.Role | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    user: Prisma.UserCreateNestedOneWithoutPatientInput;
    appointments?: Prisma.AppointmentCreateNestedManyWithoutPatientInput;
    payments?: Prisma.PaymentCreateNestedManyWithoutPatientInput;
    ratings?: Prisma.RatingCreateNestedManyWithoutPatientInput;
    Prescription?: Prisma.PrescriptionCreateNestedManyWithoutPatientInput;
    Vaccination?: Prisma.VaccinationCreateNestedManyWithoutPatientInput;
};

export type PatientUncheckedCreateWithoutMedicalInput = {
    id: string;
    firstName: string;
    lastName: string;
    userId: string;
    dateOfBirth: Date | string;
    gender?: $Enums.Gender;
    phone?: string | null;
    email: string;
    maritalStatus?: string | null;
    nutritionalStatus?: string | null;
    address?: string | null;
    emergencyContactName?: string | null;
    emergencyContactNumber?: string | null;
    relation?: string | null;
    bloodGroup?: string | null;
    allergies?: string | null;
    medicalConditions?: string | null;
    medicalHistory?: string | null;
    insuranceProvider?: string | null;
    insuranceNumber?: string | null;
    privacyConsent?: boolean | null;
    serviceConsent?: boolean | null;
    medicalConsent?: boolean | null;
    img?: string | null;
    colorCode?: string | null;
    role?: $Enums.Role | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    appointments?: Prisma.AppointmentUncheckedCreateNestedManyWithoutPatientInput;
    payments?: Prisma.PaymentUncheckedCreateNestedManyWithoutPatientInput;
    ratings?: Prisma.RatingUncheckedCreateNestedManyWithoutPatientInput;
    Prescription?: Prisma.PrescriptionUncheckedCreateNestedManyWithoutPatientInput;
    Vaccination?: Prisma.VaccinationUncheckedCreateNestedManyWithoutPatientInput;
};

export type PatientCreateOrConnectWithoutMedicalInput = {
    where: Prisma.PatientWhereUniqueInput;
    create: Prisma.XOR<Prisma.PatientCreateWithoutMedicalInput, Prisma.PatientUncheckedCreateWithoutMedicalInput>;
};

export type PatientUpsertWithoutMedicalInput = {
    update: Prisma.XOR<Prisma.PatientUpdateWithoutMedicalInput, Prisma.PatientUncheckedUpdateWithoutMedicalInput>;
    create: Prisma.XOR<Prisma.PatientCreateWithoutMedicalInput, Prisma.PatientUncheckedCreateWithoutMedicalInput>;
    where?: Prisma.PatientWhereInput;
};

export type PatientUpdateToOneWithWhereWithoutMedicalInput = {
    where?: Prisma.PatientWhereInput;
    data: Prisma.XOR<Prisma.PatientUpdateWithoutMedicalInput, Prisma.PatientUncheckedUpdateWithoutMedicalInput>;
};

export type PatientUpdateWithoutMedicalInput = {
    id?: Prisma.StringFieldUpdateOperationsInput | string;
    firstName?: Prisma.StringFieldUpdateOperationsInput | string;
    lastName?: Prisma.StringFieldUpdateOperationsInput | string;
    dateOfBirth?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    gender?: Prisma.EnumGenderFieldUpdateOperationsInput | $Enums.Gender;
    phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    email?: Prisma.StringFieldUpdateOperationsInput | string;
    maritalStatus?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    nutritionalStatus?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    emergencyContactName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    emergencyContactNumber?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    relation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    bloodGroup?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    allergies?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    medicalConditions?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    medicalHistory?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    insuranceProvider?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    insuranceNumber?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    privacyConsent?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
    serviceConsent?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
    medicalConsent?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
    img?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    colorCode?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    role?: Prisma.NullableEnumRoleFieldUpdateOperationsInput | $Enums.Role | null;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    user?: Prisma.UserUpdateOneRequiredWithoutPatientNestedInput;
    appointments?: Prisma.AppointmentUpdateManyWithoutPatientNestedInput;
    payments?: Prisma.PaymentUpdateManyWithoutPatientNestedInput;
    ratings?: Prisma.RatingUpdateManyWithoutPatientNestedInput;
    Prescription?: Prisma.PrescriptionUpdateManyWithoutPatientNestedInput;
    Vaccination?: Prisma.VaccinationUpdateManyWithoutPatientNestedInput;
};

export type PatientUncheckedUpdateWithoutMedicalInput = {
    id?: Prisma.StringFieldUpdateOperationsInput | string;
    firstName?: Prisma.StringFieldUpdateOperationsInput | string;
    lastName?: Prisma.StringFieldUpdateOperationsInput | string;
    userId?: Prisma.StringFieldUpdateOperationsInput | string;
    dateOfBirth?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    gender?: Prisma.EnumGenderFieldUpdateOperationsInput | $Enums.Gender;
    phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    email?: Prisma.StringFieldUpdateOperationsInput | string;
    maritalStatus?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    nutritionalStatus?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    emergencyContactName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    emergencyContactNumber?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    relation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    bloodGroup?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    allergies?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    medicalConditions?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    medicalHistory?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    insuranceProvider?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    insuranceNumber?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    privacyConsent?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
    serviceConsent?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
    medicalConsent?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
    img?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    colorCode?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    role?: Prisma.NullableEnumRoleFieldUpdateOperationsInput | $Enums.Role | null;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    appointments?: Prisma.AppointmentUncheckedUpdateManyWithoutPatientNestedInput;
    payments?: Prisma.PaymentUncheckedUpdateManyWithoutPatientNestedInput;
    ratings?: Prisma.RatingUncheckedUpdateManyWithoutPatientNestedInput;
    Prescription?: Prisma.PrescriptionUncheckedUpdateManyWithoutPatientNestedInput;
    Vaccination?: Prisma.VaccinationUncheckedUpdateManyWithoutPatientNestedInput;
};

export type PatientCreateWithoutRatingsInput = {
    id: string;
    firstName: string;
    lastName: string;
    dateOfBirth: Date | string;
    gender?: $Enums.Gender;
    phone?: string | null;
    email: string;
    maritalStatus?: string | null;
    nutritionalStatus?: string | null;
    address?: string | null;
    emergencyContactName?: string | null;
    emergencyContactNumber?: string | null;
    relation?: string | null;
    bloodGroup?: string | null;
    allergies?: string | null;
    medicalConditions?: string | null;
    medicalHistory?: string | null;
    insuranceProvider?: string | null;
    insuranceNumber?: string | null;
    privacyConsent?: boolean | null;
    serviceConsent?: boolean | null;
    medicalConsent?: boolean | null;
    img?: string | null;
    colorCode?: string | null;
    role?: $Enums.Role | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    user: Prisma.UserCreateNestedOneWithoutPatientInput;
    appointments?: Prisma.AppointmentCreateNestedManyWithoutPatientInput;
    medical?: Prisma.MedicalRecordsCreateNestedManyWithoutPatientInput;
    payments?: Prisma.PaymentCreateNestedManyWithoutPatientInput;
    Prescription?: Prisma.PrescriptionCreateNestedManyWithoutPatientInput;
    Vaccination?: Prisma.VaccinationCreateNestedManyWithoutPatientInput;
};

export type PatientUncheckedCreateWithoutRatingsInput = {
    id: string;
    firstName: string;
    lastName: string;
    userId: string;
    dateOfBirth: Date | string;
    gender?: $Enums.Gender;
    phone?: string | null;
    email: string;
    maritalStatus?: string | null;
    nutritionalStatus?: string | null;
    address?: string | null;
    emergencyContactName?: string | null;
    emergencyContactNumber?: string | null;
    relation?: string | null;
    bloodGroup?: string | null;
    allergies?: string | null;
    medicalConditions?: string | null;
    medicalHistory?: string | null;
    insuranceProvider?: string | null;
    insuranceNumber?: string | null;
    privacyConsent?: boolean | null;
    serviceConsent?: boolean | null;
    medicalConsent?: boolean | null;
    img?: string | null;
    colorCode?: string | null;
    role?: $Enums.Role | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    appointments?: Prisma.AppointmentUncheckedCreateNestedManyWithoutPatientInput;
    medical?: Prisma.MedicalRecordsUncheckedCreateNestedManyWithoutPatientInput;
    payments?: Prisma.PaymentUncheckedCreateNestedManyWithoutPatientInput;
    Prescription?: Prisma.PrescriptionUncheckedCreateNestedManyWithoutPatientInput;
    Vaccination?: Prisma.VaccinationUncheckedCreateNestedManyWithoutPatientInput;
};

export type PatientCreateOrConnectWithoutRatingsInput = {
    where: Prisma.PatientWhereUniqueInput;
    create: Prisma.XOR<Prisma.PatientCreateWithoutRatingsInput, Prisma.PatientUncheckedCreateWithoutRatingsInput>;
};

export type PatientUpsertWithoutRatingsInput = {
    update: Prisma.XOR<Prisma.PatientUpdateWithoutRatingsInput, Prisma.PatientUncheckedUpdateWithoutRatingsInput>;
    create: Prisma.XOR<Prisma.PatientCreateWithoutRatingsInput, Prisma.PatientUncheckedCreateWithoutRatingsInput>;
    where?: Prisma.PatientWhereInput;
};

export type PatientUpdateToOneWithWhereWithoutRatingsInput = {
    where?: Prisma.PatientWhereInput;
    data: Prisma.XOR<Prisma.PatientUpdateWithoutRatingsInput, Prisma.PatientUncheckedUpdateWithoutRatingsInput>;
};

export type PatientUpdateWithoutRatingsInput = {
    id?: Prisma.StringFieldUpdateOperationsInput | string;
    firstName?: Prisma.StringFieldUpdateOperationsInput | string;
    lastName?: Prisma.StringFieldUpdateOperationsInput | string;
    dateOfBirth?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    gender?: Prisma.EnumGenderFieldUpdateOperationsInput | $Enums.Gender;
    phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    email?: Prisma.StringFieldUpdateOperationsInput | string;
    maritalStatus?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    nutritionalStatus?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    emergencyContactName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    emergencyContactNumber?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    relation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    bloodGroup?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    allergies?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    medicalConditions?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    medicalHistory?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    insuranceProvider?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    insuranceNumber?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    privacyConsent?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
    serviceConsent?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
    medicalConsent?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
    img?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    colorCode?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    role?: Prisma.NullableEnumRoleFieldUpdateOperationsInput | $Enums.Role | null;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    user?: Prisma.UserUpdateOneRequiredWithoutPatientNestedInput;
    appointments?: Prisma.AppointmentUpdateManyWithoutPatientNestedInput;
    medical?: Prisma.MedicalRecordsUpdateManyWithoutPatientNestedInput;
    payments?: Prisma.PaymentUpdateManyWithoutPatientNestedInput;
    Prescription?: Prisma.PrescriptionUpdateManyWithoutPatientNestedInput;
    Vaccination?: Prisma.VaccinationUpdateManyWithoutPatientNestedInput;
};

export type PatientUncheckedUpdateWithoutRatingsInput = {
    id?: Prisma.StringFieldUpdateOperationsInput | string;
    firstName?: Prisma.StringFieldUpdateOperationsInput | string;
    lastName?: Prisma.StringFieldUpdateOperationsInput | string;
    userId?: Prisma.StringFieldUpdateOperationsInput | string;
    dateOfBirth?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    gender?: Prisma.EnumGenderFieldUpdateOperationsInput | $Enums.Gender;
    phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    email?: Prisma.StringFieldUpdateOperationsInput | string;
    maritalStatus?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    nutritionalStatus?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    emergencyContactName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    emergencyContactNumber?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    relation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    bloodGroup?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    allergies?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    medicalConditions?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    medicalHistory?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    insuranceProvider?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    insuranceNumber?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    privacyConsent?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
    serviceConsent?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
    medicalConsent?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
    img?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    colorCode?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    role?: Prisma.NullableEnumRoleFieldUpdateOperationsInput | $Enums.Role | null;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    appointments?: Prisma.AppointmentUncheckedUpdateManyWithoutPatientNestedInput;
    medical?: Prisma.MedicalRecordsUncheckedUpdateManyWithoutPatientNestedInput;
    payments?: Prisma.PaymentUncheckedUpdateManyWithoutPatientNestedInput;
    Prescription?: Prisma.PrescriptionUncheckedUpdateManyWithoutPatientNestedInput;
    Vaccination?: Prisma.VaccinationUncheckedUpdateManyWithoutPatientNestedInput;
};

export type PatientCreateWithoutPrescriptionInput = {
    id: string;
    firstName: string;
    lastName: string;
    dateOfBirth: Date | string;
    gender?: $Enums.Gender;
    phone?: string | null;
    email: string;
    maritalStatus?: string | null;
    nutritionalStatus?: string | null;
    address?: string | null;
    emergencyContactName?: string | null;
    emergencyContactNumber?: string | null;
    relation?: string | null;
    bloodGroup?: string | null;
    allergies?: string | null;
    medicalConditions?: string | null;
    medicalHistory?: string | null;
    insuranceProvider?: string | null;
    insuranceNumber?: string | null;
    privacyConsent?: boolean | null;
    serviceConsent?: boolean | null;
    medicalConsent?: boolean | null;
    img?: string | null;
    colorCode?: string | null;
    role?: $Enums.Role | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    user: Prisma.UserCreateNestedOneWithoutPatientInput;
    appointments?: Prisma.AppointmentCreateNestedManyWithoutPatientInput;
    medical?: Prisma.MedicalRecordsCreateNestedManyWithoutPatientInput;
    payments?: Prisma.PaymentCreateNestedManyWithoutPatientInput;
    ratings?: Prisma.RatingCreateNestedManyWithoutPatientInput;
    Vaccination?: Prisma.VaccinationCreateNestedManyWithoutPatientInput;
};

export type PatientUncheckedCreateWithoutPrescriptionInput = {
    id: string;
    firstName: string;
    lastName: string;
    userId: string;
    dateOfBirth: Date | string;
    gender?: $Enums.Gender;
    phone?: string | null;
    email: string;
    maritalStatus?: string | null;
    nutritionalStatus?: string | null;
    address?: string | null;
    emergencyContactName?: string | null;
    emergencyContactNumber?: string | null;
    relation?: string | null;
    bloodGroup?: string | null;
    allergies?: string | null;
    medicalConditions?: string | null;
    medicalHistory?: string | null;
    insuranceProvider?: string | null;
    insuranceNumber?: string | null;
    privacyConsent?: boolean | null;
    serviceConsent?: boolean | null;
    medicalConsent?: boolean | null;
    img?: string | null;
    colorCode?: string | null;
    role?: $Enums.Role | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    appointments?: Prisma.AppointmentUncheckedCreateNestedManyWithoutPatientInput;
    medical?: Prisma.MedicalRecordsUncheckedCreateNestedManyWithoutPatientInput;
    payments?: Prisma.PaymentUncheckedCreateNestedManyWithoutPatientInput;
    ratings?: Prisma.RatingUncheckedCreateNestedManyWithoutPatientInput;
    Vaccination?: Prisma.VaccinationUncheckedCreateNestedManyWithoutPatientInput;
};

export type PatientCreateOrConnectWithoutPrescriptionInput = {
    where: Prisma.PatientWhereUniqueInput;
    create: Prisma.XOR<
        Prisma.PatientCreateWithoutPrescriptionInput,
        Prisma.PatientUncheckedCreateWithoutPrescriptionInput
    >;
};

export type PatientUpsertWithoutPrescriptionInput = {
    update: Prisma.XOR<
        Prisma.PatientUpdateWithoutPrescriptionInput,
        Prisma.PatientUncheckedUpdateWithoutPrescriptionInput
    >;
    create: Prisma.XOR<
        Prisma.PatientCreateWithoutPrescriptionInput,
        Prisma.PatientUncheckedCreateWithoutPrescriptionInput
    >;
    where?: Prisma.PatientWhereInput;
};

export type PatientUpdateToOneWithWhereWithoutPrescriptionInput = {
    where?: Prisma.PatientWhereInput;
    data: Prisma.XOR<
        Prisma.PatientUpdateWithoutPrescriptionInput,
        Prisma.PatientUncheckedUpdateWithoutPrescriptionInput
    >;
};

export type PatientUpdateWithoutPrescriptionInput = {
    id?: Prisma.StringFieldUpdateOperationsInput | string;
    firstName?: Prisma.StringFieldUpdateOperationsInput | string;
    lastName?: Prisma.StringFieldUpdateOperationsInput | string;
    dateOfBirth?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    gender?: Prisma.EnumGenderFieldUpdateOperationsInput | $Enums.Gender;
    phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    email?: Prisma.StringFieldUpdateOperationsInput | string;
    maritalStatus?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    nutritionalStatus?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    emergencyContactName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    emergencyContactNumber?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    relation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    bloodGroup?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    allergies?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    medicalConditions?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    medicalHistory?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    insuranceProvider?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    insuranceNumber?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    privacyConsent?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
    serviceConsent?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
    medicalConsent?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
    img?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    colorCode?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    role?: Prisma.NullableEnumRoleFieldUpdateOperationsInput | $Enums.Role | null;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    user?: Prisma.UserUpdateOneRequiredWithoutPatientNestedInput;
    appointments?: Prisma.AppointmentUpdateManyWithoutPatientNestedInput;
    medical?: Prisma.MedicalRecordsUpdateManyWithoutPatientNestedInput;
    payments?: Prisma.PaymentUpdateManyWithoutPatientNestedInput;
    ratings?: Prisma.RatingUpdateManyWithoutPatientNestedInput;
    Vaccination?: Prisma.VaccinationUpdateManyWithoutPatientNestedInput;
};

export type PatientUncheckedUpdateWithoutPrescriptionInput = {
    id?: Prisma.StringFieldUpdateOperationsInput | string;
    firstName?: Prisma.StringFieldUpdateOperationsInput | string;
    lastName?: Prisma.StringFieldUpdateOperationsInput | string;
    userId?: Prisma.StringFieldUpdateOperationsInput | string;
    dateOfBirth?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    gender?: Prisma.EnumGenderFieldUpdateOperationsInput | $Enums.Gender;
    phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    email?: Prisma.StringFieldUpdateOperationsInput | string;
    maritalStatus?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    nutritionalStatus?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    emergencyContactName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    emergencyContactNumber?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    relation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    bloodGroup?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    allergies?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    medicalConditions?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    medicalHistory?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    insuranceProvider?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    insuranceNumber?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    privacyConsent?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
    serviceConsent?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
    medicalConsent?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
    img?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    colorCode?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    role?: Prisma.NullableEnumRoleFieldUpdateOperationsInput | $Enums.Role | null;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    appointments?: Prisma.AppointmentUncheckedUpdateManyWithoutPatientNestedInput;
    medical?: Prisma.MedicalRecordsUncheckedUpdateManyWithoutPatientNestedInput;
    payments?: Prisma.PaymentUncheckedUpdateManyWithoutPatientNestedInput;
    ratings?: Prisma.RatingUncheckedUpdateManyWithoutPatientNestedInput;
    Vaccination?: Prisma.VaccinationUncheckedUpdateManyWithoutPatientNestedInput;
};

export type PatientCreateWithoutVaccinationInput = {
    id: string;
    firstName: string;
    lastName: string;
    dateOfBirth: Date | string;
    gender?: $Enums.Gender;
    phone?: string | null;
    email: string;
    maritalStatus?: string | null;
    nutritionalStatus?: string | null;
    address?: string | null;
    emergencyContactName?: string | null;
    emergencyContactNumber?: string | null;
    relation?: string | null;
    bloodGroup?: string | null;
    allergies?: string | null;
    medicalConditions?: string | null;
    medicalHistory?: string | null;
    insuranceProvider?: string | null;
    insuranceNumber?: string | null;
    privacyConsent?: boolean | null;
    serviceConsent?: boolean | null;
    medicalConsent?: boolean | null;
    img?: string | null;
    colorCode?: string | null;
    role?: $Enums.Role | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    user: Prisma.UserCreateNestedOneWithoutPatientInput;
    appointments?: Prisma.AppointmentCreateNestedManyWithoutPatientInput;
    medical?: Prisma.MedicalRecordsCreateNestedManyWithoutPatientInput;
    payments?: Prisma.PaymentCreateNestedManyWithoutPatientInput;
    ratings?: Prisma.RatingCreateNestedManyWithoutPatientInput;
    Prescription?: Prisma.PrescriptionCreateNestedManyWithoutPatientInput;
};

export type PatientUncheckedCreateWithoutVaccinationInput = {
    id: string;
    firstName: string;
    lastName: string;
    userId: string;
    dateOfBirth: Date | string;
    gender?: $Enums.Gender;
    phone?: string | null;
    email: string;
    maritalStatus?: string | null;
    nutritionalStatus?: string | null;
    address?: string | null;
    emergencyContactName?: string | null;
    emergencyContactNumber?: string | null;
    relation?: string | null;
    bloodGroup?: string | null;
    allergies?: string | null;
    medicalConditions?: string | null;
    medicalHistory?: string | null;
    insuranceProvider?: string | null;
    insuranceNumber?: string | null;
    privacyConsent?: boolean | null;
    serviceConsent?: boolean | null;
    medicalConsent?: boolean | null;
    img?: string | null;
    colorCode?: string | null;
    role?: $Enums.Role | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    appointments?: Prisma.AppointmentUncheckedCreateNestedManyWithoutPatientInput;
    medical?: Prisma.MedicalRecordsUncheckedCreateNestedManyWithoutPatientInput;
    payments?: Prisma.PaymentUncheckedCreateNestedManyWithoutPatientInput;
    ratings?: Prisma.RatingUncheckedCreateNestedManyWithoutPatientInput;
    Prescription?: Prisma.PrescriptionUncheckedCreateNestedManyWithoutPatientInput;
};

export type PatientCreateOrConnectWithoutVaccinationInput = {
    where: Prisma.PatientWhereUniqueInput;
    create: Prisma.XOR<
        Prisma.PatientCreateWithoutVaccinationInput,
        Prisma.PatientUncheckedCreateWithoutVaccinationInput
    >;
};

export type PatientUpsertWithoutVaccinationInput = {
    update: Prisma.XOR<
        Prisma.PatientUpdateWithoutVaccinationInput,
        Prisma.PatientUncheckedUpdateWithoutVaccinationInput
    >;
    create: Prisma.XOR<
        Prisma.PatientCreateWithoutVaccinationInput,
        Prisma.PatientUncheckedCreateWithoutVaccinationInput
    >;
    where?: Prisma.PatientWhereInput;
};

export type PatientUpdateToOneWithWhereWithoutVaccinationInput = {
    where?: Prisma.PatientWhereInput;
    data: Prisma.XOR<Prisma.PatientUpdateWithoutVaccinationInput, Prisma.PatientUncheckedUpdateWithoutVaccinationInput>;
};

export type PatientUpdateWithoutVaccinationInput = {
    id?: Prisma.StringFieldUpdateOperationsInput | string;
    firstName?: Prisma.StringFieldUpdateOperationsInput | string;
    lastName?: Prisma.StringFieldUpdateOperationsInput | string;
    dateOfBirth?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    gender?: Prisma.EnumGenderFieldUpdateOperationsInput | $Enums.Gender;
    phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    email?: Prisma.StringFieldUpdateOperationsInput | string;
    maritalStatus?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    nutritionalStatus?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    emergencyContactName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    emergencyContactNumber?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    relation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    bloodGroup?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    allergies?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    medicalConditions?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    medicalHistory?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    insuranceProvider?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    insuranceNumber?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    privacyConsent?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
    serviceConsent?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
    medicalConsent?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
    img?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    colorCode?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    role?: Prisma.NullableEnumRoleFieldUpdateOperationsInput | $Enums.Role | null;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    user?: Prisma.UserUpdateOneRequiredWithoutPatientNestedInput;
    appointments?: Prisma.AppointmentUpdateManyWithoutPatientNestedInput;
    medical?: Prisma.MedicalRecordsUpdateManyWithoutPatientNestedInput;
    payments?: Prisma.PaymentUpdateManyWithoutPatientNestedInput;
    ratings?: Prisma.RatingUpdateManyWithoutPatientNestedInput;
    Prescription?: Prisma.PrescriptionUpdateManyWithoutPatientNestedInput;
};

export type PatientUncheckedUpdateWithoutVaccinationInput = {
    id?: Prisma.StringFieldUpdateOperationsInput | string;
    firstName?: Prisma.StringFieldUpdateOperationsInput | string;
    lastName?: Prisma.StringFieldUpdateOperationsInput | string;
    userId?: Prisma.StringFieldUpdateOperationsInput | string;
    dateOfBirth?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    gender?: Prisma.EnumGenderFieldUpdateOperationsInput | $Enums.Gender;
    phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    email?: Prisma.StringFieldUpdateOperationsInput | string;
    maritalStatus?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    nutritionalStatus?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    emergencyContactName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    emergencyContactNumber?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    relation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    bloodGroup?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    allergies?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    medicalConditions?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    medicalHistory?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    insuranceProvider?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    insuranceNumber?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    privacyConsent?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
    serviceConsent?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
    medicalConsent?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
    img?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    colorCode?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    role?: Prisma.NullableEnumRoleFieldUpdateOperationsInput | $Enums.Role | null;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    appointments?: Prisma.AppointmentUncheckedUpdateManyWithoutPatientNestedInput;
    medical?: Prisma.MedicalRecordsUncheckedUpdateManyWithoutPatientNestedInput;
    payments?: Prisma.PaymentUncheckedUpdateManyWithoutPatientNestedInput;
    ratings?: Prisma.RatingUncheckedUpdateManyWithoutPatientNestedInput;
    Prescription?: Prisma.PrescriptionUncheckedUpdateManyWithoutPatientNestedInput;
};

export type PatientCreateManyUserInput = {
    id: string;
    firstName: string;
    lastName: string;
    dateOfBirth: Date | string;
    gender?: $Enums.Gender;
    phone?: string | null;
    email: string;
    maritalStatus?: string | null;
    nutritionalStatus?: string | null;
    address?: string | null;
    emergencyContactName?: string | null;
    emergencyContactNumber?: string | null;
    relation?: string | null;
    bloodGroup?: string | null;
    allergies?: string | null;
    medicalConditions?: string | null;
    medicalHistory?: string | null;
    insuranceProvider?: string | null;
    insuranceNumber?: string | null;
    privacyConsent?: boolean | null;
    serviceConsent?: boolean | null;
    medicalConsent?: boolean | null;
    img?: string | null;
    colorCode?: string | null;
    role?: $Enums.Role | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
};

export type PatientUpdateWithoutUserInput = {
    id?: Prisma.StringFieldUpdateOperationsInput | string;
    firstName?: Prisma.StringFieldUpdateOperationsInput | string;
    lastName?: Prisma.StringFieldUpdateOperationsInput | string;
    dateOfBirth?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    gender?: Prisma.EnumGenderFieldUpdateOperationsInput | $Enums.Gender;
    phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    email?: Prisma.StringFieldUpdateOperationsInput | string;
    maritalStatus?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    nutritionalStatus?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    emergencyContactName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    emergencyContactNumber?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    relation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    bloodGroup?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    allergies?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    medicalConditions?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    medicalHistory?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    insuranceProvider?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    insuranceNumber?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    privacyConsent?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
    serviceConsent?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
    medicalConsent?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
    img?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    colorCode?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    role?: Prisma.NullableEnumRoleFieldUpdateOperationsInput | $Enums.Role | null;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    appointments?: Prisma.AppointmentUpdateManyWithoutPatientNestedInput;
    medical?: Prisma.MedicalRecordsUpdateManyWithoutPatientNestedInput;
    payments?: Prisma.PaymentUpdateManyWithoutPatientNestedInput;
    ratings?: Prisma.RatingUpdateManyWithoutPatientNestedInput;
    Prescription?: Prisma.PrescriptionUpdateManyWithoutPatientNestedInput;
    Vaccination?: Prisma.VaccinationUpdateManyWithoutPatientNestedInput;
};

export type PatientUncheckedUpdateWithoutUserInput = {
    id?: Prisma.StringFieldUpdateOperationsInput | string;
    firstName?: Prisma.StringFieldUpdateOperationsInput | string;
    lastName?: Prisma.StringFieldUpdateOperationsInput | string;
    dateOfBirth?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    gender?: Prisma.EnumGenderFieldUpdateOperationsInput | $Enums.Gender;
    phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    email?: Prisma.StringFieldUpdateOperationsInput | string;
    maritalStatus?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    nutritionalStatus?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    emergencyContactName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    emergencyContactNumber?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    relation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    bloodGroup?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    allergies?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    medicalConditions?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    medicalHistory?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    insuranceProvider?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    insuranceNumber?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    privacyConsent?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
    serviceConsent?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
    medicalConsent?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
    img?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    colorCode?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    role?: Prisma.NullableEnumRoleFieldUpdateOperationsInput | $Enums.Role | null;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    appointments?: Prisma.AppointmentUncheckedUpdateManyWithoutPatientNestedInput;
    medical?: Prisma.MedicalRecordsUncheckedUpdateManyWithoutPatientNestedInput;
    payments?: Prisma.PaymentUncheckedUpdateManyWithoutPatientNestedInput;
    ratings?: Prisma.RatingUncheckedUpdateManyWithoutPatientNestedInput;
    Prescription?: Prisma.PrescriptionUncheckedUpdateManyWithoutPatientNestedInput;
    Vaccination?: Prisma.VaccinationUncheckedUpdateManyWithoutPatientNestedInput;
};

export type PatientUncheckedUpdateManyWithoutUserInput = {
    id?: Prisma.StringFieldUpdateOperationsInput | string;
    firstName?: Prisma.StringFieldUpdateOperationsInput | string;
    lastName?: Prisma.StringFieldUpdateOperationsInput | string;
    dateOfBirth?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    gender?: Prisma.EnumGenderFieldUpdateOperationsInput | $Enums.Gender;
    phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    email?: Prisma.StringFieldUpdateOperationsInput | string;
    maritalStatus?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    nutritionalStatus?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    emergencyContactName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    emergencyContactNumber?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    relation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    bloodGroup?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    allergies?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    medicalConditions?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    medicalHistory?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    insuranceProvider?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    insuranceNumber?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    privacyConsent?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
    serviceConsent?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
    medicalConsent?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
    img?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    colorCode?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    role?: Prisma.NullableEnumRoleFieldUpdateOperationsInput | $Enums.Role | null;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

/**
 * Count Type PatientCountOutputType
 */

export type PatientCountOutputType = {
    appointments: number;
    medical: number;
    payments: number;
    ratings: number;
    Prescription: number;
    Vaccination: number;
};

export type PatientCountOutputTypeSelect<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    appointments?: boolean | PatientCountOutputTypeCountAppointmentsArgs;
    medical?: boolean | PatientCountOutputTypeCountMedicalArgs;
    payments?: boolean | PatientCountOutputTypeCountPaymentsArgs;
    ratings?: boolean | PatientCountOutputTypeCountRatingsArgs;
    Prescription?: boolean | PatientCountOutputTypeCountPrescriptionArgs;
    Vaccination?: boolean | PatientCountOutputTypeCountVaccinationArgs;
};

/**
 * PatientCountOutputType without action
 */
export type PatientCountOutputTypeDefaultArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the PatientCountOutputType
     */
    select?: Prisma.PatientCountOutputTypeSelect<ExtArgs> | null;
};

/**
 * PatientCountOutputType without action
 */
export type PatientCountOutputTypeCountAppointmentsArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    where?: Prisma.AppointmentWhereInput;
};

/**
 * PatientCountOutputType without action
 */
export type PatientCountOutputTypeCountMedicalArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    where?: Prisma.MedicalRecordsWhereInput;
};

/**
 * PatientCountOutputType without action
 */
export type PatientCountOutputTypeCountPaymentsArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    where?: Prisma.PaymentWhereInput;
};

/**
 * PatientCountOutputType without action
 */
export type PatientCountOutputTypeCountRatingsArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    where?: Prisma.RatingWhereInput;
};

/**
 * PatientCountOutputType without action
 */
export type PatientCountOutputTypeCountPrescriptionArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    where?: Prisma.PrescriptionWhereInput;
};

/**
 * PatientCountOutputType without action
 */
export type PatientCountOutputTypeCountVaccinationArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    where?: Prisma.VaccinationWhereInput;
};

export type PatientSelect<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
    {
        id?: boolean;
        firstName?: boolean;
        lastName?: boolean;
        userId?: boolean;
        dateOfBirth?: boolean;
        gender?: boolean;
        phone?: boolean;
        email?: boolean;
        maritalStatus?: boolean;
        nutritionalStatus?: boolean;
        address?: boolean;
        emergencyContactName?: boolean;
        emergencyContactNumber?: boolean;
        relation?: boolean;
        bloodGroup?: boolean;
        allergies?: boolean;
        medicalConditions?: boolean;
        medicalHistory?: boolean;
        insuranceProvider?: boolean;
        insuranceNumber?: boolean;
        privacyConsent?: boolean;
        serviceConsent?: boolean;
        medicalConsent?: boolean;
        img?: boolean;
        colorCode?: boolean;
        role?: boolean;
        createdAt?: boolean;
        updatedAt?: boolean;
        user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
        appointments?: boolean | Prisma.Patient$appointmentsArgs<ExtArgs>;
        medical?: boolean | Prisma.Patient$medicalArgs<ExtArgs>;
        payments?: boolean | Prisma.Patient$paymentsArgs<ExtArgs>;
        ratings?: boolean | Prisma.Patient$ratingsArgs<ExtArgs>;
        Prescription?: boolean | Prisma.Patient$PrescriptionArgs<ExtArgs>;
        Vaccination?: boolean | Prisma.Patient$VaccinationArgs<ExtArgs>;
        _count?: boolean | Prisma.PatientCountOutputTypeDefaultArgs<ExtArgs>;
    },
    ExtArgs['result']['patient']
>;

export type PatientSelectCreateManyAndReturn<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
    {
        id?: boolean;
        firstName?: boolean;
        lastName?: boolean;
        userId?: boolean;
        dateOfBirth?: boolean;
        gender?: boolean;
        phone?: boolean;
        email?: boolean;
        maritalStatus?: boolean;
        nutritionalStatus?: boolean;
        address?: boolean;
        emergencyContactName?: boolean;
        emergencyContactNumber?: boolean;
        relation?: boolean;
        bloodGroup?: boolean;
        allergies?: boolean;
        medicalConditions?: boolean;
        medicalHistory?: boolean;
        insuranceProvider?: boolean;
        insuranceNumber?: boolean;
        privacyConsent?: boolean;
        serviceConsent?: boolean;
        medicalConsent?: boolean;
        img?: boolean;
        colorCode?: boolean;
        role?: boolean;
        createdAt?: boolean;
        updatedAt?: boolean;
        user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
    },
    ExtArgs['result']['patient']
>;

export type PatientSelectUpdateManyAndReturn<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
    {
        id?: boolean;
        firstName?: boolean;
        lastName?: boolean;
        userId?: boolean;
        dateOfBirth?: boolean;
        gender?: boolean;
        phone?: boolean;
        email?: boolean;
        maritalStatus?: boolean;
        nutritionalStatus?: boolean;
        address?: boolean;
        emergencyContactName?: boolean;
        emergencyContactNumber?: boolean;
        relation?: boolean;
        bloodGroup?: boolean;
        allergies?: boolean;
        medicalConditions?: boolean;
        medicalHistory?: boolean;
        insuranceProvider?: boolean;
        insuranceNumber?: boolean;
        privacyConsent?: boolean;
        serviceConsent?: boolean;
        medicalConsent?: boolean;
        img?: boolean;
        colorCode?: boolean;
        role?: boolean;
        createdAt?: boolean;
        updatedAt?: boolean;
        user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
    },
    ExtArgs['result']['patient']
>;

export type PatientSelectScalar = {
    id?: boolean;
    firstName?: boolean;
    lastName?: boolean;
    userId?: boolean;
    dateOfBirth?: boolean;
    gender?: boolean;
    phone?: boolean;
    email?: boolean;
    maritalStatus?: boolean;
    nutritionalStatus?: boolean;
    address?: boolean;
    emergencyContactName?: boolean;
    emergencyContactNumber?: boolean;
    relation?: boolean;
    bloodGroup?: boolean;
    allergies?: boolean;
    medicalConditions?: boolean;
    medicalHistory?: boolean;
    insuranceProvider?: boolean;
    insuranceNumber?: boolean;
    privacyConsent?: boolean;
    serviceConsent?: boolean;
    medicalConsent?: boolean;
    img?: boolean;
    colorCode?: boolean;
    role?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
};

export type PatientOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
    runtime.Types.Extensions.GetOmit<
        | 'id'
        | 'firstName'
        | 'lastName'
        | 'userId'
        | 'dateOfBirth'
        | 'gender'
        | 'phone'
        | 'email'
        | 'maritalStatus'
        | 'nutritionalStatus'
        | 'address'
        | 'emergencyContactName'
        | 'emergencyContactNumber'
        | 'relation'
        | 'bloodGroup'
        | 'allergies'
        | 'medicalConditions'
        | 'medicalHistory'
        | 'insuranceProvider'
        | 'insuranceNumber'
        | 'privacyConsent'
        | 'serviceConsent'
        | 'medicalConsent'
        | 'img'
        | 'colorCode'
        | 'role'
        | 'createdAt'
        | 'updatedAt',
        ExtArgs['result']['patient']
    >;
export type PatientInclude<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
    appointments?: boolean | Prisma.Patient$appointmentsArgs<ExtArgs>;
    medical?: boolean | Prisma.Patient$medicalArgs<ExtArgs>;
    payments?: boolean | Prisma.Patient$paymentsArgs<ExtArgs>;
    ratings?: boolean | Prisma.Patient$ratingsArgs<ExtArgs>;
    Prescription?: boolean | Prisma.Patient$PrescriptionArgs<ExtArgs>;
    Vaccination?: boolean | Prisma.Patient$VaccinationArgs<ExtArgs>;
    _count?: boolean | Prisma.PatientCountOutputTypeDefaultArgs<ExtArgs>;
};
export type PatientIncludeCreateManyAndReturn<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
};
export type PatientIncludeUpdateManyAndReturn<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
};

export type $PatientPayload<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    name: 'Patient';
    objects: {
        user: Prisma.$UserPayload<ExtArgs>;
        appointments: Prisma.$AppointmentPayload<ExtArgs>[];
        medical: Prisma.$MedicalRecordsPayload<ExtArgs>[];
        payments: Prisma.$PaymentPayload<ExtArgs>[];
        ratings: Prisma.$RatingPayload<ExtArgs>[];
        Prescription: Prisma.$PrescriptionPayload<ExtArgs>[];
        Vaccination: Prisma.$VaccinationPayload<ExtArgs>[];
    };
    scalars: runtime.Types.Extensions.GetPayloadResult<
        {
            id: string;
            firstName: string;
            lastName: string;
            userId: string;
            dateOfBirth: Date;
            gender: $Enums.Gender;
            phone: string | null;
            email: string;
            maritalStatus: string | null;
            nutritionalStatus: string | null;
            address: string | null;
            emergencyContactName: string | null;
            emergencyContactNumber: string | null;
            relation: string | null;
            bloodGroup: string | null;
            allergies: string | null;
            medicalConditions: string | null;
            medicalHistory: string | null;
            insuranceProvider: string | null;
            insuranceNumber: string | null;
            privacyConsent: boolean | null;
            serviceConsent: boolean | null;
            medicalConsent: boolean | null;
            img: string | null;
            colorCode: string | null;
            role: $Enums.Role | null;
            createdAt: Date;
            updatedAt: Date;
        },
        ExtArgs['result']['patient']
    >;
    composites: {};
};

export type PatientGetPayload<S extends boolean | null | undefined | PatientDefaultArgs> =
    runtime.Types.Result.GetResult<Prisma.$PatientPayload, S>;

export type PatientCountArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = Omit<PatientFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: PatientCountAggregateInputType | true;
};

export interface PatientDelegate<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
    GlobalOmitOptions = {}
> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Patient']; meta: { name: 'Patient' } };
    /**
     * Find zero or one Patient that matches the filter.
     * @param {PatientFindUniqueArgs} args - Arguments to find a Patient
     * @example
     * // Get one Patient
     * const patient = await prisma.patient.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PatientFindUniqueArgs>(
        args: Prisma.SelectSubset<T, PatientFindUniqueArgs<ExtArgs>>
    ): Prisma.Prisma__PatientClient<
        runtime.Types.Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, 'findUnique', GlobalOmitOptions> | null,
        null,
        ExtArgs,
        GlobalOmitOptions
    >;

    /**
     * Find one Patient that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PatientFindUniqueOrThrowArgs} args - Arguments to find a Patient
     * @example
     * // Get one Patient
     * const patient = await prisma.patient.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PatientFindUniqueOrThrowArgs>(
        args: Prisma.SelectSubset<T, PatientFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma.Prisma__PatientClient<
        runtime.Types.Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, 'findUniqueOrThrow', GlobalOmitOptions>,
        never,
        ExtArgs,
        GlobalOmitOptions
    >;

    /**
     * Find the first Patient that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientFindFirstArgs} args - Arguments to find a Patient
     * @example
     * // Get one Patient
     * const patient = await prisma.patient.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PatientFindFirstArgs>(
        args?: Prisma.SelectSubset<T, PatientFindFirstArgs<ExtArgs>>
    ): Prisma.Prisma__PatientClient<
        runtime.Types.Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, 'findFirst', GlobalOmitOptions> | null,
        null,
        ExtArgs,
        GlobalOmitOptions
    >;

    /**
     * Find the first Patient that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientFindFirstOrThrowArgs} args - Arguments to find a Patient
     * @example
     * // Get one Patient
     * const patient = await prisma.patient.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PatientFindFirstOrThrowArgs>(
        args?: Prisma.SelectSubset<T, PatientFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma.Prisma__PatientClient<
        runtime.Types.Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, 'findFirstOrThrow', GlobalOmitOptions>,
        never,
        ExtArgs,
        GlobalOmitOptions
    >;

    /**
     * Find zero or more Patients that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Patients
     * const patients = await prisma.patient.findMany()
     *
     * // Get first 10 Patients
     * const patients = await prisma.patient.findMany({ take: 10 })
     *
     * // Only select the `id`
     * const patientWithIdOnly = await prisma.patient.findMany({ select: { id: true } })
     *
     */
    findMany<T extends PatientFindManyArgs>(
        args?: Prisma.SelectSubset<T, PatientFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<
        runtime.Types.Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, 'findMany', GlobalOmitOptions>
    >;

    /**
     * Create a Patient.
     * @param {PatientCreateArgs} args - Arguments to create a Patient.
     * @example
     * // Create one Patient
     * const Patient = await prisma.patient.create({
     *   data: {
     *     // ... data to create a Patient
     *   }
     * })
     *
     */
    create<T extends PatientCreateArgs>(
        args: Prisma.SelectSubset<T, PatientCreateArgs<ExtArgs>>
    ): Prisma.Prisma__PatientClient<
        runtime.Types.Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, 'create', GlobalOmitOptions>,
        never,
        ExtArgs,
        GlobalOmitOptions
    >;

    /**
     * Create many Patients.
     * @param {PatientCreateManyArgs} args - Arguments to create many Patients.
     * @example
     * // Create many Patients
     * const patient = await prisma.patient.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     */
    createMany<T extends PatientCreateManyArgs>(
        args?: Prisma.SelectSubset<T, PatientCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<Prisma.BatchPayload>;

    /**
     * Create many Patients and returns the data saved in the database.
     * @param {PatientCreateManyAndReturnArgs} args - Arguments to create many Patients.
     * @example
     * // Create many Patients
     * const patient = await prisma.patient.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     * // Create many Patients and only return the `id`
     * const patientWithIdOnly = await prisma.patient.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     *
     */
    createManyAndReturn<T extends PatientCreateManyAndReturnArgs>(
        args?: Prisma.SelectSubset<T, PatientCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<
        runtime.Types.Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, 'createManyAndReturn', GlobalOmitOptions>
    >;

    /**
     * Delete a Patient.
     * @param {PatientDeleteArgs} args - Arguments to delete one Patient.
     * @example
     * // Delete one Patient
     * const Patient = await prisma.patient.delete({
     *   where: {
     *     // ... filter to delete one Patient
     *   }
     * })
     *
     */
    delete<T extends PatientDeleteArgs>(
        args: Prisma.SelectSubset<T, PatientDeleteArgs<ExtArgs>>
    ): Prisma.Prisma__PatientClient<
        runtime.Types.Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, 'delete', GlobalOmitOptions>,
        never,
        ExtArgs,
        GlobalOmitOptions
    >;

    /**
     * Update one Patient.
     * @param {PatientUpdateArgs} args - Arguments to update one Patient.
     * @example
     * // Update one Patient
     * const patient = await prisma.patient.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     */
    update<T extends PatientUpdateArgs>(
        args: Prisma.SelectSubset<T, PatientUpdateArgs<ExtArgs>>
    ): Prisma.Prisma__PatientClient<
        runtime.Types.Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, 'update', GlobalOmitOptions>,
        never,
        ExtArgs,
        GlobalOmitOptions
    >;

    /**
     * Delete zero or more Patients.
     * @param {PatientDeleteManyArgs} args - Arguments to filter Patients to delete.
     * @example
     * // Delete a few Patients
     * const { count } = await prisma.patient.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     *
     */
    deleteMany<T extends PatientDeleteManyArgs>(
        args?: Prisma.SelectSubset<T, PatientDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<Prisma.BatchPayload>;

    /**
     * Update zero or more Patients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Patients
     * const patient = await prisma.patient.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     */
    updateMany<T extends PatientUpdateManyArgs>(
        args: Prisma.SelectSubset<T, PatientUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<Prisma.BatchPayload>;

    /**
     * Update zero or more Patients and returns the data updated in the database.
     * @param {PatientUpdateManyAndReturnArgs} args - Arguments to update many Patients.
     * @example
     * // Update many Patients
     * const patient = await prisma.patient.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     * // Update zero or more Patients and only return the `id`
     * const patientWithIdOnly = await prisma.patient.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     *
     */
    updateManyAndReturn<T extends PatientUpdateManyAndReturnArgs>(
        args: Prisma.SelectSubset<T, PatientUpdateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<
        runtime.Types.Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, 'updateManyAndReturn', GlobalOmitOptions>
    >;

    /**
     * Create or update one Patient.
     * @param {PatientUpsertArgs} args - Arguments to update or create a Patient.
     * @example
     * // Update or create a Patient
     * const patient = await prisma.patient.upsert({
     *   create: {
     *     // ... data to create a Patient
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Patient we want to update
     *   }
     * })
     */
    upsert<T extends PatientUpsertArgs>(
        args: Prisma.SelectSubset<T, PatientUpsertArgs<ExtArgs>>
    ): Prisma.Prisma__PatientClient<
        runtime.Types.Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, 'upsert', GlobalOmitOptions>,
        never,
        ExtArgs,
        GlobalOmitOptions
    >;

    /**
     * Count the number of Patients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientCountArgs} args - Arguments to filter Patients to count.
     * @example
     * // Count the number of Patients
     * const count = await prisma.patient.count({
     *   where: {
     *     // ... the filter for the Patients we want to count
     *   }
     * })
     **/
    count<T extends PatientCountArgs>(
        args?: Prisma.Subset<T, PatientCountArgs>
    ): Prisma.PrismaPromise<
        T extends runtime.Types.Utils.Record<'select', any>
            ? T['select'] extends true
                ? number
                : Prisma.GetScalarType<T['select'], PatientCountAggregateOutputType>
            : number
    >;

    /**
     * Allows you to perform aggregations operations on a Patient.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
     **/
    aggregate<T extends PatientAggregateArgs>(
        args: Prisma.Subset<T, PatientAggregateArgs>
    ): Prisma.PrismaPromise<GetPatientAggregateType<T>>;

    /**
     * Group by Patient.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     *
     **/
    groupBy<
        T extends PatientGroupByArgs,
        HasSelectOrTake extends Prisma.Or<
            Prisma.Extends<'skip', Prisma.Keys<T>>,
            Prisma.Extends<'take', Prisma.Keys<T>>
        >,
        OrderByArg extends Prisma.True extends HasSelectOrTake
            ? { orderBy: PatientGroupByArgs['orderBy'] }
            : { orderBy?: PatientGroupByArgs['orderBy'] },
        OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
        ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
        ByValid extends Prisma.Has<ByFields, OrderFields>,
        HavingFields extends Prisma.GetHavingFields<T['having']>,
        HavingValid extends Prisma.Has<ByFields, HavingFields>,
        ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
        InputErrors extends ByEmpty extends Prisma.True
            ? `Error: "by" must not be empty.`
            : HavingValid extends Prisma.False
              ? {
                    [P in HavingFields]: P extends ByFields
                        ? never
                        : P extends string
                          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                          : [Error, 'Field ', P, ` in "having" needs to be provided in "by"`];
                }[HavingFields]
              : 'take' extends Prisma.Keys<T>
                ? 'orderBy' extends Prisma.Keys<T>
                    ? ByValid extends Prisma.True
                        ? {}
                        : {
                              [P in OrderFields]: P extends ByFields
                                  ? never
                                  : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                          }[OrderFields]
                    : 'Error: If you provide "take", you also need to provide "orderBy"'
                : 'skip' extends Prisma.Keys<T>
                  ? 'orderBy' extends Prisma.Keys<T>
                      ? ByValid extends Prisma.True
                          ? {}
                          : {
                                [P in OrderFields]: P extends ByFields
                                    ? never
                                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                            }[OrderFields]
                      : 'Error: If you provide "skip", you also need to provide "orderBy"'
                  : ByValid extends Prisma.True
                    ? {}
                    : {
                          [P in OrderFields]: P extends ByFields
                              ? never
                              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                      }[OrderFields]
    >(
        args: Prisma.SubsetIntersection<T, PatientGroupByArgs, OrderByArg> & InputErrors
    ): {} extends InputErrors ? GetPatientGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>;
    /**
     * Fields of the Patient model
     */
    readonly fields: PatientFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Patient.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__PatientClient<
    T,
    Null = never,
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
    GlobalOmitOptions = {}
> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(
        args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>
    ): Prisma.Prisma__UserClient<
        runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow', GlobalOmitOptions> | Null,
        Null,
        ExtArgs,
        GlobalOmitOptions
    >;
    appointments<T extends Prisma.Patient$appointmentsArgs<ExtArgs> = {}>(
        args?: Prisma.Subset<T, Prisma.Patient$appointmentsArgs<ExtArgs>>
    ): Prisma.PrismaPromise<
        runtime.Types.Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, 'findMany', GlobalOmitOptions> | Null
    >;
    medical<T extends Prisma.Patient$medicalArgs<ExtArgs> = {}>(
        args?: Prisma.Subset<T, Prisma.Patient$medicalArgs<ExtArgs>>
    ): Prisma.PrismaPromise<
        runtime.Types.Result.GetResult<Prisma.$MedicalRecordsPayload<ExtArgs>, T, 'findMany', GlobalOmitOptions> | Null
    >;
    payments<T extends Prisma.Patient$paymentsArgs<ExtArgs> = {}>(
        args?: Prisma.Subset<T, Prisma.Patient$paymentsArgs<ExtArgs>>
    ): Prisma.PrismaPromise<
        runtime.Types.Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, 'findMany', GlobalOmitOptions> | Null
    >;
    ratings<T extends Prisma.Patient$ratingsArgs<ExtArgs> = {}>(
        args?: Prisma.Subset<T, Prisma.Patient$ratingsArgs<ExtArgs>>
    ): Prisma.PrismaPromise<
        runtime.Types.Result.GetResult<Prisma.$RatingPayload<ExtArgs>, T, 'findMany', GlobalOmitOptions> | Null
    >;
    Prescription<T extends Prisma.Patient$PrescriptionArgs<ExtArgs> = {}>(
        args?: Prisma.Subset<T, Prisma.Patient$PrescriptionArgs<ExtArgs>>
    ): Prisma.PrismaPromise<
        runtime.Types.Result.GetResult<Prisma.$PrescriptionPayload<ExtArgs>, T, 'findMany', GlobalOmitOptions> | Null
    >;
    Vaccination<T extends Prisma.Patient$VaccinationArgs<ExtArgs> = {}>(
        args?: Prisma.Subset<T, Prisma.Patient$VaccinationArgs<ExtArgs>>
    ): Prisma.PrismaPromise<
        runtime.Types.Result.GetResult<Prisma.$VaccinationPayload<ExtArgs>, T, 'findMany', GlobalOmitOptions> | Null
    >;
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(
        onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null,
        onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null
    ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(
        onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null
    ): runtime.Types.Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the Patient model
 */
export interface PatientFieldRefs {
    readonly id: Prisma.FieldRef<'Patient', 'String'>;
    readonly firstName: Prisma.FieldRef<'Patient', 'String'>;
    readonly lastName: Prisma.FieldRef<'Patient', 'String'>;
    readonly userId: Prisma.FieldRef<'Patient', 'String'>;
    readonly dateOfBirth: Prisma.FieldRef<'Patient', 'DateTime'>;
    readonly gender: Prisma.FieldRef<'Patient', 'Gender'>;
    readonly phone: Prisma.FieldRef<'Patient', 'String'>;
    readonly email: Prisma.FieldRef<'Patient', 'String'>;
    readonly maritalStatus: Prisma.FieldRef<'Patient', 'String'>;
    readonly nutritionalStatus: Prisma.FieldRef<'Patient', 'String'>;
    readonly address: Prisma.FieldRef<'Patient', 'String'>;
    readonly emergencyContactName: Prisma.FieldRef<'Patient', 'String'>;
    readonly emergencyContactNumber: Prisma.FieldRef<'Patient', 'String'>;
    readonly relation: Prisma.FieldRef<'Patient', 'String'>;
    readonly bloodGroup: Prisma.FieldRef<'Patient', 'String'>;
    readonly allergies: Prisma.FieldRef<'Patient', 'String'>;
    readonly medicalConditions: Prisma.FieldRef<'Patient', 'String'>;
    readonly medicalHistory: Prisma.FieldRef<'Patient', 'String'>;
    readonly insuranceProvider: Prisma.FieldRef<'Patient', 'String'>;
    readonly insuranceNumber: Prisma.FieldRef<'Patient', 'String'>;
    readonly privacyConsent: Prisma.FieldRef<'Patient', 'Boolean'>;
    readonly serviceConsent: Prisma.FieldRef<'Patient', 'Boolean'>;
    readonly medicalConsent: Prisma.FieldRef<'Patient', 'Boolean'>;
    readonly img: Prisma.FieldRef<'Patient', 'String'>;
    readonly colorCode: Prisma.FieldRef<'Patient', 'String'>;
    readonly role: Prisma.FieldRef<'Patient', 'Role'>;
    readonly createdAt: Prisma.FieldRef<'Patient', 'DateTime'>;
    readonly updatedAt: Prisma.FieldRef<'Patient', 'DateTime'>;
}

// Custom InputTypes
/**
 * Patient findUnique
 */
export type PatientFindUniqueArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: Prisma.PatientSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Patient
     */
    omit?: Prisma.PatientOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.PatientInclude<ExtArgs> | null;
    /**
     * Filter, which Patient to fetch.
     */
    where: Prisma.PatientWhereUniqueInput;
};

/**
 * Patient findUniqueOrThrow
 */
export type PatientFindUniqueOrThrowArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: Prisma.PatientSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Patient
     */
    omit?: Prisma.PatientOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.PatientInclude<ExtArgs> | null;
    /**
     * Filter, which Patient to fetch.
     */
    where: Prisma.PatientWhereUniqueInput;
};

/**
 * Patient findFirst
 */
export type PatientFindFirstArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: Prisma.PatientSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Patient
     */
    omit?: Prisma.PatientOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.PatientInclude<ExtArgs> | null;
    /**
     * Filter, which Patient to fetch.
     */
    where?: Prisma.PatientWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Patients to fetch.
     */
    orderBy?: Prisma.PatientOrderByWithRelationInput | Prisma.PatientOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for Patients.
     */
    cursor?: Prisma.PatientWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `Â±n` Patients from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Patients.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of Patients.
     */
    distinct?: Prisma.PatientScalarFieldEnum | Prisma.PatientScalarFieldEnum[];
};

/**
 * Patient findFirstOrThrow
 */
export type PatientFindFirstOrThrowArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: Prisma.PatientSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Patient
     */
    omit?: Prisma.PatientOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.PatientInclude<ExtArgs> | null;
    /**
     * Filter, which Patient to fetch.
     */
    where?: Prisma.PatientWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Patients to fetch.
     */
    orderBy?: Prisma.PatientOrderByWithRelationInput | Prisma.PatientOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for Patients.
     */
    cursor?: Prisma.PatientWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `Â±n` Patients from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Patients.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of Patients.
     */
    distinct?: Prisma.PatientScalarFieldEnum | Prisma.PatientScalarFieldEnum[];
};

/**
 * Patient findMany
 */
export type PatientFindManyArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: Prisma.PatientSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Patient
     */
    omit?: Prisma.PatientOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.PatientInclude<ExtArgs> | null;
    /**
     * Filter, which Patients to fetch.
     */
    where?: Prisma.PatientWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Patients to fetch.
     */
    orderBy?: Prisma.PatientOrderByWithRelationInput | Prisma.PatientOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for listing Patients.
     */
    cursor?: Prisma.PatientWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `Â±n` Patients from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Patients.
     */
    skip?: number;
    distinct?: Prisma.PatientScalarFieldEnum | Prisma.PatientScalarFieldEnum[];
};

/**
 * Patient create
 */
export type PatientCreateArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: Prisma.PatientSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Patient
     */
    omit?: Prisma.PatientOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.PatientInclude<ExtArgs> | null;
    /**
     * The data needed to create a Patient.
     */
    data: Prisma.XOR<Prisma.PatientCreateInput, Prisma.PatientUncheckedCreateInput>;
};

/**
 * Patient createMany
 */
export type PatientCreateManyArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * The data used to create many Patients.
     */
    data: Prisma.PatientCreateManyInput | Prisma.PatientCreateManyInput[];
    skipDuplicates?: boolean;
};

/**
 * Patient createManyAndReturn
 */
export type PatientCreateManyAndReturnArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: Prisma.PatientSelectCreateManyAndReturn<ExtArgs> | null;
    /**
     * Omit specific fields from the Patient
     */
    omit?: Prisma.PatientOmit<ExtArgs> | null;
    /**
     * The data used to create many Patients.
     */
    data: Prisma.PatientCreateManyInput | Prisma.PatientCreateManyInput[];
    skipDuplicates?: boolean;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.PatientIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * Patient update
 */
export type PatientUpdateArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: Prisma.PatientSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Patient
     */
    omit?: Prisma.PatientOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.PatientInclude<ExtArgs> | null;
    /**
     * The data needed to update a Patient.
     */
    data: Prisma.XOR<Prisma.PatientUpdateInput, Prisma.PatientUncheckedUpdateInput>;
    /**
     * Choose, which Patient to update.
     */
    where: Prisma.PatientWhereUniqueInput;
};

/**
 * Patient updateMany
 */
export type PatientUpdateManyArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * The data used to update Patients.
     */
    data: Prisma.XOR<Prisma.PatientUpdateManyMutationInput, Prisma.PatientUncheckedUpdateManyInput>;
    /**
     * Filter which Patients to update
     */
    where?: Prisma.PatientWhereInput;
    /**
     * Limit how many Patients to update.
     */
    limit?: number;
};

/**
 * Patient updateManyAndReturn
 */
export type PatientUpdateManyAndReturnArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: Prisma.PatientSelectUpdateManyAndReturn<ExtArgs> | null;
    /**
     * Omit specific fields from the Patient
     */
    omit?: Prisma.PatientOmit<ExtArgs> | null;
    /**
     * The data used to update Patients.
     */
    data: Prisma.XOR<Prisma.PatientUpdateManyMutationInput, Prisma.PatientUncheckedUpdateManyInput>;
    /**
     * Filter which Patients to update
     */
    where?: Prisma.PatientWhereInput;
    /**
     * Limit how many Patients to update.
     */
    limit?: number;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.PatientIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * Patient upsert
 */
export type PatientUpsertArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: Prisma.PatientSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Patient
     */
    omit?: Prisma.PatientOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.PatientInclude<ExtArgs> | null;
    /**
     * The filter to search for the Patient to update in case it exists.
     */
    where: Prisma.PatientWhereUniqueInput;
    /**
     * In case the Patient found by the `where` argument doesn't exist, create a new Patient with this data.
     */
    create: Prisma.XOR<Prisma.PatientCreateInput, Prisma.PatientUncheckedCreateInput>;
    /**
     * In case the Patient was found with the provided `where` argument, update it with this data.
     */
    update: Prisma.XOR<Prisma.PatientUpdateInput, Prisma.PatientUncheckedUpdateInput>;
};

/**
 * Patient delete
 */
export type PatientDeleteArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: Prisma.PatientSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Patient
     */
    omit?: Prisma.PatientOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.PatientInclude<ExtArgs> | null;
    /**
     * Filter which Patient to delete.
     */
    where: Prisma.PatientWhereUniqueInput;
};

/**
 * Patient deleteMany
 */
export type PatientDeleteManyArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Filter which Patients to delete
     */
    where?: Prisma.PatientWhereInput;
    /**
     * Limit how many Patients to delete.
     */
    limit?: number;
};

/**
 * Patient.appointments
 */
export type Patient$appointmentsArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: Prisma.AppointmentSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Appointment
     */
    omit?: Prisma.AppointmentOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.AppointmentInclude<ExtArgs> | null;
    where?: Prisma.AppointmentWhereInput;
    orderBy?: Prisma.AppointmentOrderByWithRelationInput | Prisma.AppointmentOrderByWithRelationInput[];
    cursor?: Prisma.AppointmentWhereUniqueInput;
    take?: number;
    skip?: number;
    distinct?: Prisma.AppointmentScalarFieldEnum | Prisma.AppointmentScalarFieldEnum[];
};

/**
 * Patient.medical
 */
export type Patient$medicalArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the MedicalRecords
     */
    select?: Prisma.MedicalRecordsSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the MedicalRecords
     */
    omit?: Prisma.MedicalRecordsOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.MedicalRecordsInclude<ExtArgs> | null;
    where?: Prisma.MedicalRecordsWhereInput;
    orderBy?: Prisma.MedicalRecordsOrderByWithRelationInput | Prisma.MedicalRecordsOrderByWithRelationInput[];
    cursor?: Prisma.MedicalRecordsWhereUniqueInput;
    take?: number;
    skip?: number;
    distinct?: Prisma.MedicalRecordsScalarFieldEnum | Prisma.MedicalRecordsScalarFieldEnum[];
};

/**
 * Patient.payments
 */
export type Patient$paymentsArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: Prisma.PaymentSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Payment
     */
    omit?: Prisma.PaymentOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.PaymentInclude<ExtArgs> | null;
    where?: Prisma.PaymentWhereInput;
    orderBy?: Prisma.PaymentOrderByWithRelationInput | Prisma.PaymentOrderByWithRelationInput[];
    cursor?: Prisma.PaymentWhereUniqueInput;
    take?: number;
    skip?: number;
    distinct?: Prisma.PaymentScalarFieldEnum | Prisma.PaymentScalarFieldEnum[];
};

/**
 * Patient.ratings
 */
export type Patient$ratingsArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: Prisma.RatingSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Rating
     */
    omit?: Prisma.RatingOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.RatingInclude<ExtArgs> | null;
    where?: Prisma.RatingWhereInput;
    orderBy?: Prisma.RatingOrderByWithRelationInput | Prisma.RatingOrderByWithRelationInput[];
    cursor?: Prisma.RatingWhereUniqueInput;
    take?: number;
    skip?: number;
    distinct?: Prisma.RatingScalarFieldEnum | Prisma.RatingScalarFieldEnum[];
};

/**
 * Patient.Prescription
 */
export type Patient$PrescriptionArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the Prescription
     */
    select?: Prisma.PrescriptionSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Prescription
     */
    omit?: Prisma.PrescriptionOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.PrescriptionInclude<ExtArgs> | null;
    where?: Prisma.PrescriptionWhereInput;
    orderBy?: Prisma.PrescriptionOrderByWithRelationInput | Prisma.PrescriptionOrderByWithRelationInput[];
    cursor?: Prisma.PrescriptionWhereUniqueInput;
    take?: number;
    skip?: number;
    distinct?: Prisma.PrescriptionScalarFieldEnum | Prisma.PrescriptionScalarFieldEnum[];
};

/**
 * Patient.Vaccination
 */
export type Patient$VaccinationArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the Vaccination
     */
    select?: Prisma.VaccinationSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Vaccination
     */
    omit?: Prisma.VaccinationOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.VaccinationInclude<ExtArgs> | null;
    where?: Prisma.VaccinationWhereInput;
    orderBy?: Prisma.VaccinationOrderByWithRelationInput | Prisma.VaccinationOrderByWithRelationInput[];
    cursor?: Prisma.VaccinationWhereUniqueInput;
    take?: number;
    skip?: number;
    distinct?: Prisma.VaccinationScalarFieldEnum | Prisma.VaccinationScalarFieldEnum[];
};

/**
 * Patient without action
 */
export type PatientDefaultArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: Prisma.PatientSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Patient
     */
    omit?: Prisma.PatientOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.PatientInclude<ExtArgs> | null;
};
