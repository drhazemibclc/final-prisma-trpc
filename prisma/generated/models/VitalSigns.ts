/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/**
 * This file exports the `VitalSigns` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from '@prisma/client/runtime/library';
import type * as $Enums from '../enums';
import type * as Prisma from '../internal/prismaNamespace';

/**
 * Model VitalSigns
 *
 */
export type VitalSignsModel = runtime.Types.Result.DefaultSelection<Prisma.$VitalSignsPayload>;

export type AggregateVitalSigns = {
    _count: VitalSignsCountAggregateOutputType | null;
    _avg: VitalSignsAvgAggregateOutputType | null;
    _sum: VitalSignsSumAggregateOutputType | null;
    _min: VitalSignsMinAggregateOutputType | null;
    _max: VitalSignsMaxAggregateOutputType | null;
};

export type VitalSignsAvgAggregateOutputType = {
    id: number | null;
    medicalId: number | null;
    bodyTemperature: number | null;
    systolic: number | null;
    diastolic: number | null;
    respiratoryRate: number | null;
    oxygenSaturation: number | null;
    weight: number | null;
    height: number | null;
};

export type VitalSignsSumAggregateOutputType = {
    id: number | null;
    medicalId: number | null;
    bodyTemperature: number | null;
    systolic: number | null;
    diastolic: number | null;
    respiratoryRate: number | null;
    oxygenSaturation: number | null;
    weight: number | null;
    height: number | null;
};

export type VitalSignsMinAggregateOutputType = {
    id: number | null;
    patientId: string | null;
    medicalId: number | null;
    bodyTemperature: number | null;
    systolic: number | null;
    diastolic: number | null;
    heartRate: string | null;
    respiratoryRate: number | null;
    oxygenSaturation: number | null;
    weight: number | null;
    height: number | null;
    createdAt: Date | null;
    updatedAt: Date | null;
};

export type VitalSignsMaxAggregateOutputType = {
    id: number | null;
    patientId: string | null;
    medicalId: number | null;
    bodyTemperature: number | null;
    systolic: number | null;
    diastolic: number | null;
    heartRate: string | null;
    respiratoryRate: number | null;
    oxygenSaturation: number | null;
    weight: number | null;
    height: number | null;
    createdAt: Date | null;
    updatedAt: Date | null;
};

export type VitalSignsCountAggregateOutputType = {
    id: number;
    patientId: number;
    medicalId: number;
    bodyTemperature: number;
    systolic: number;
    diastolic: number;
    heartRate: number;
    respiratoryRate: number;
    oxygenSaturation: number;
    weight: number;
    height: number;
    createdAt: number;
    updatedAt: number;
    _all: number;
};

export type VitalSignsAvgAggregateInputType = {
    id?: true;
    medicalId?: true;
    bodyTemperature?: true;
    systolic?: true;
    diastolic?: true;
    respiratoryRate?: true;
    oxygenSaturation?: true;
    weight?: true;
    height?: true;
};

export type VitalSignsSumAggregateInputType = {
    id?: true;
    medicalId?: true;
    bodyTemperature?: true;
    systolic?: true;
    diastolic?: true;
    respiratoryRate?: true;
    oxygenSaturation?: true;
    weight?: true;
    height?: true;
};

export type VitalSignsMinAggregateInputType = {
    id?: true;
    patientId?: true;
    medicalId?: true;
    bodyTemperature?: true;
    systolic?: true;
    diastolic?: true;
    heartRate?: true;
    respiratoryRate?: true;
    oxygenSaturation?: true;
    weight?: true;
    height?: true;
    createdAt?: true;
    updatedAt?: true;
};

export type VitalSignsMaxAggregateInputType = {
    id?: true;
    patientId?: true;
    medicalId?: true;
    bodyTemperature?: true;
    systolic?: true;
    diastolic?: true;
    heartRate?: true;
    respiratoryRate?: true;
    oxygenSaturation?: true;
    weight?: true;
    height?: true;
    createdAt?: true;
    updatedAt?: true;
};

export type VitalSignsCountAggregateInputType = {
    id?: true;
    patientId?: true;
    medicalId?: true;
    bodyTemperature?: true;
    systolic?: true;
    diastolic?: true;
    heartRate?: true;
    respiratoryRate?: true;
    oxygenSaturation?: true;
    weight?: true;
    height?: true;
    createdAt?: true;
    updatedAt?: true;
    _all?: true;
};

export type VitalSignsAggregateArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Filter which VitalSigns to aggregate.
     */
    where?: Prisma.VitalSignsWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of VitalSigns to fetch.
     */
    orderBy?: Prisma.VitalSignsOrderByWithRelationInput | Prisma.VitalSignsOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the start position
     */
    cursor?: Prisma.VitalSignsWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `Â±n` VitalSigns from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` VitalSigns.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Count returned VitalSigns
     **/
    _count?: true | VitalSignsCountAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to average
     **/
    _avg?: VitalSignsAvgAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to sum
     **/
    _sum?: VitalSignsSumAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the minimum value
     **/
    _min?: VitalSignsMinAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the maximum value
     **/
    _max?: VitalSignsMaxAggregateInputType;
};

export type GetVitalSignsAggregateType<T extends VitalSignsAggregateArgs> = {
    [P in keyof T & keyof AggregateVitalSigns]: P extends '_count' | 'count'
        ? T[P] extends true
            ? number
            : Prisma.GetScalarType<T[P], AggregateVitalSigns[P]>
        : Prisma.GetScalarType<T[P], AggregateVitalSigns[P]>;
};

export type VitalSignsGroupByArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    where?: Prisma.VitalSignsWhereInput;
    orderBy?: Prisma.VitalSignsOrderByWithAggregationInput | Prisma.VitalSignsOrderByWithAggregationInput[];
    by: Prisma.VitalSignsScalarFieldEnum[] | Prisma.VitalSignsScalarFieldEnum;
    having?: Prisma.VitalSignsScalarWhereWithAggregatesInput;
    take?: number;
    skip?: number;
    _count?: VitalSignsCountAggregateInputType | true;
    _avg?: VitalSignsAvgAggregateInputType;
    _sum?: VitalSignsSumAggregateInputType;
    _min?: VitalSignsMinAggregateInputType;
    _max?: VitalSignsMaxAggregateInputType;
};

export type VitalSignsGroupByOutputType = {
    id: number;
    patientId: string;
    medicalId: number;
    bodyTemperature: number | null;
    systolic: number | null;
    diastolic: number | null;
    heartRate: string | null;
    respiratoryRate: number | null;
    oxygenSaturation: number | null;
    weight: number;
    height: number | null;
    createdAt: Date;
    updatedAt: Date;
    _count: VitalSignsCountAggregateOutputType | null;
    _avg: VitalSignsAvgAggregateOutputType | null;
    _sum: VitalSignsSumAggregateOutputType | null;
    _min: VitalSignsMinAggregateOutputType | null;
    _max: VitalSignsMaxAggregateOutputType | null;
};

type GetVitalSignsGroupByPayload<T extends VitalSignsGroupByArgs> = Prisma.PrismaPromise<
    Array<
        Prisma.PickEnumerable<VitalSignsGroupByOutputType, T['by']> & {
            [P in keyof T & keyof VitalSignsGroupByOutputType]: P extends '_count'
                ? T[P] extends boolean
                    ? number
                    : Prisma.GetScalarType<T[P], VitalSignsGroupByOutputType[P]>
                : Prisma.GetScalarType<T[P], VitalSignsGroupByOutputType[P]>;
        }
    >
>;

export type VitalSignsWhereInput = {
    AND?: Prisma.VitalSignsWhereInput | Prisma.VitalSignsWhereInput[];
    OR?: Prisma.VitalSignsWhereInput[];
    NOT?: Prisma.VitalSignsWhereInput | Prisma.VitalSignsWhereInput[];
    id?: Prisma.IntFilter<'VitalSigns'> | number;
    patientId?: Prisma.StringFilter<'VitalSigns'> | string;
    medicalId?: Prisma.IntFilter<'VitalSigns'> | number;
    bodyTemperature?: Prisma.FloatNullableFilter<'VitalSigns'> | number | null;
    systolic?: Prisma.IntNullableFilter<'VitalSigns'> | number | null;
    diastolic?: Prisma.IntNullableFilter<'VitalSigns'> | number | null;
    heartRate?: Prisma.StringNullableFilter<'VitalSigns'> | string | null;
    respiratoryRate?: Prisma.IntNullableFilter<'VitalSigns'> | number | null;
    oxygenSaturation?: Prisma.IntNullableFilter<'VitalSigns'> | number | null;
    weight?: Prisma.FloatFilter<'VitalSigns'> | number;
    height?: Prisma.FloatNullableFilter<'VitalSigns'> | number | null;
    createdAt?: Prisma.DateTimeFilter<'VitalSigns'> | Date | string;
    updatedAt?: Prisma.DateTimeFilter<'VitalSigns'> | Date | string;
    medical?: Prisma.XOR<Prisma.MedicalRecordsScalarRelationFilter, Prisma.MedicalRecordsWhereInput>;
};

export type VitalSignsOrderByWithRelationInput = {
    id?: Prisma.SortOrder;
    patientId?: Prisma.SortOrder;
    medicalId?: Prisma.SortOrder;
    bodyTemperature?: Prisma.SortOrderInput | Prisma.SortOrder;
    systolic?: Prisma.SortOrderInput | Prisma.SortOrder;
    diastolic?: Prisma.SortOrderInput | Prisma.SortOrder;
    heartRate?: Prisma.SortOrderInput | Prisma.SortOrder;
    respiratoryRate?: Prisma.SortOrderInput | Prisma.SortOrder;
    oxygenSaturation?: Prisma.SortOrderInput | Prisma.SortOrder;
    weight?: Prisma.SortOrder;
    height?: Prisma.SortOrderInput | Prisma.SortOrder;
    createdAt?: Prisma.SortOrder;
    updatedAt?: Prisma.SortOrder;
    medical?: Prisma.MedicalRecordsOrderByWithRelationInput;
};

export type VitalSignsWhereUniqueInput = Prisma.AtLeast<
    {
        id?: number;
        AND?: Prisma.VitalSignsWhereInput | Prisma.VitalSignsWhereInput[];
        OR?: Prisma.VitalSignsWhereInput[];
        NOT?: Prisma.VitalSignsWhereInput | Prisma.VitalSignsWhereInput[];
        patientId?: Prisma.StringFilter<'VitalSigns'> | string;
        medicalId?: Prisma.IntFilter<'VitalSigns'> | number;
        bodyTemperature?: Prisma.FloatNullableFilter<'VitalSigns'> | number | null;
        systolic?: Prisma.IntNullableFilter<'VitalSigns'> | number | null;
        diastolic?: Prisma.IntNullableFilter<'VitalSigns'> | number | null;
        heartRate?: Prisma.StringNullableFilter<'VitalSigns'> | string | null;
        respiratoryRate?: Prisma.IntNullableFilter<'VitalSigns'> | number | null;
        oxygenSaturation?: Prisma.IntNullableFilter<'VitalSigns'> | number | null;
        weight?: Prisma.FloatFilter<'VitalSigns'> | number;
        height?: Prisma.FloatNullableFilter<'VitalSigns'> | number | null;
        createdAt?: Prisma.DateTimeFilter<'VitalSigns'> | Date | string;
        updatedAt?: Prisma.DateTimeFilter<'VitalSigns'> | Date | string;
        medical?: Prisma.XOR<Prisma.MedicalRecordsScalarRelationFilter, Prisma.MedicalRecordsWhereInput>;
    },
    'id'
>;

export type VitalSignsOrderByWithAggregationInput = {
    id?: Prisma.SortOrder;
    patientId?: Prisma.SortOrder;
    medicalId?: Prisma.SortOrder;
    bodyTemperature?: Prisma.SortOrderInput | Prisma.SortOrder;
    systolic?: Prisma.SortOrderInput | Prisma.SortOrder;
    diastolic?: Prisma.SortOrderInput | Prisma.SortOrder;
    heartRate?: Prisma.SortOrderInput | Prisma.SortOrder;
    respiratoryRate?: Prisma.SortOrderInput | Prisma.SortOrder;
    oxygenSaturation?: Prisma.SortOrderInput | Prisma.SortOrder;
    weight?: Prisma.SortOrder;
    height?: Prisma.SortOrderInput | Prisma.SortOrder;
    createdAt?: Prisma.SortOrder;
    updatedAt?: Prisma.SortOrder;
    _count?: Prisma.VitalSignsCountOrderByAggregateInput;
    _avg?: Prisma.VitalSignsAvgOrderByAggregateInput;
    _max?: Prisma.VitalSignsMaxOrderByAggregateInput;
    _min?: Prisma.VitalSignsMinOrderByAggregateInput;
    _sum?: Prisma.VitalSignsSumOrderByAggregateInput;
};

export type VitalSignsScalarWhereWithAggregatesInput = {
    AND?: Prisma.VitalSignsScalarWhereWithAggregatesInput | Prisma.VitalSignsScalarWhereWithAggregatesInput[];
    OR?: Prisma.VitalSignsScalarWhereWithAggregatesInput[];
    NOT?: Prisma.VitalSignsScalarWhereWithAggregatesInput | Prisma.VitalSignsScalarWhereWithAggregatesInput[];
    id?: Prisma.IntWithAggregatesFilter<'VitalSigns'> | number;
    patientId?: Prisma.StringWithAggregatesFilter<'VitalSigns'> | string;
    medicalId?: Prisma.IntWithAggregatesFilter<'VitalSigns'> | number;
    bodyTemperature?: Prisma.FloatNullableWithAggregatesFilter<'VitalSigns'> | number | null;
    systolic?: Prisma.IntNullableWithAggregatesFilter<'VitalSigns'> | number | null;
    diastolic?: Prisma.IntNullableWithAggregatesFilter<'VitalSigns'> | number | null;
    heartRate?: Prisma.StringNullableWithAggregatesFilter<'VitalSigns'> | string | null;
    respiratoryRate?: Prisma.IntNullableWithAggregatesFilter<'VitalSigns'> | number | null;
    oxygenSaturation?: Prisma.IntNullableWithAggregatesFilter<'VitalSigns'> | number | null;
    weight?: Prisma.FloatWithAggregatesFilter<'VitalSigns'> | number;
    height?: Prisma.FloatNullableWithAggregatesFilter<'VitalSigns'> | number | null;
    createdAt?: Prisma.DateTimeWithAggregatesFilter<'VitalSigns'> | Date | string;
    updatedAt?: Prisma.DateTimeWithAggregatesFilter<'VitalSigns'> | Date | string;
};

export type VitalSignsCreateInput = {
    patientId: string;
    bodyTemperature?: number | null;
    systolic?: number | null;
    diastolic?: number | null;
    heartRate?: string | null;
    respiratoryRate?: number | null;
    oxygenSaturation?: number | null;
    weight: number;
    height?: number | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    medical: Prisma.MedicalRecordsCreateNestedOneWithoutVitalSignsInput;
};

export type VitalSignsUncheckedCreateInput = {
    id?: number;
    patientId: string;
    medicalId: number;
    bodyTemperature?: number | null;
    systolic?: number | null;
    diastolic?: number | null;
    heartRate?: string | null;
    respiratoryRate?: number | null;
    oxygenSaturation?: number | null;
    weight: number;
    height?: number | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
};

export type VitalSignsUpdateInput = {
    patientId?: Prisma.StringFieldUpdateOperationsInput | string;
    bodyTemperature?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null;
    systolic?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
    diastolic?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
    heartRate?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    respiratoryRate?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
    oxygenSaturation?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
    weight?: Prisma.FloatFieldUpdateOperationsInput | number;
    height?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    medical?: Prisma.MedicalRecordsUpdateOneRequiredWithoutVitalSignsNestedInput;
};

export type VitalSignsUncheckedUpdateInput = {
    id?: Prisma.IntFieldUpdateOperationsInput | number;
    patientId?: Prisma.StringFieldUpdateOperationsInput | string;
    medicalId?: Prisma.IntFieldUpdateOperationsInput | number;
    bodyTemperature?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null;
    systolic?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
    diastolic?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
    heartRate?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    respiratoryRate?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
    oxygenSaturation?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
    weight?: Prisma.FloatFieldUpdateOperationsInput | number;
    height?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type VitalSignsCreateManyInput = {
    id?: number;
    patientId: string;
    medicalId: number;
    bodyTemperature?: number | null;
    systolic?: number | null;
    diastolic?: number | null;
    heartRate?: string | null;
    respiratoryRate?: number | null;
    oxygenSaturation?: number | null;
    weight: number;
    height?: number | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
};

export type VitalSignsUpdateManyMutationInput = {
    patientId?: Prisma.StringFieldUpdateOperationsInput | string;
    bodyTemperature?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null;
    systolic?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
    diastolic?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
    heartRate?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    respiratoryRate?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
    oxygenSaturation?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
    weight?: Prisma.FloatFieldUpdateOperationsInput | number;
    height?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type VitalSignsUncheckedUpdateManyInput = {
    id?: Prisma.IntFieldUpdateOperationsInput | number;
    patientId?: Prisma.StringFieldUpdateOperationsInput | string;
    medicalId?: Prisma.IntFieldUpdateOperationsInput | number;
    bodyTemperature?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null;
    systolic?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
    diastolic?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
    heartRate?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    respiratoryRate?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
    oxygenSaturation?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
    weight?: Prisma.FloatFieldUpdateOperationsInput | number;
    height?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type VitalSignsListRelationFilter = {
    every?: Prisma.VitalSignsWhereInput;
    some?: Prisma.VitalSignsWhereInput;
    none?: Prisma.VitalSignsWhereInput;
};

export type VitalSignsOrderByRelationAggregateInput = {
    _count?: Prisma.SortOrder;
};

export type VitalSignsCountOrderByAggregateInput = {
    id?: Prisma.SortOrder;
    patientId?: Prisma.SortOrder;
    medicalId?: Prisma.SortOrder;
    bodyTemperature?: Prisma.SortOrder;
    systolic?: Prisma.SortOrder;
    diastolic?: Prisma.SortOrder;
    heartRate?: Prisma.SortOrder;
    respiratoryRate?: Prisma.SortOrder;
    oxygenSaturation?: Prisma.SortOrder;
    weight?: Prisma.SortOrder;
    height?: Prisma.SortOrder;
    createdAt?: Prisma.SortOrder;
    updatedAt?: Prisma.SortOrder;
};

export type VitalSignsAvgOrderByAggregateInput = {
    id?: Prisma.SortOrder;
    medicalId?: Prisma.SortOrder;
    bodyTemperature?: Prisma.SortOrder;
    systolic?: Prisma.SortOrder;
    diastolic?: Prisma.SortOrder;
    respiratoryRate?: Prisma.SortOrder;
    oxygenSaturation?: Prisma.SortOrder;
    weight?: Prisma.SortOrder;
    height?: Prisma.SortOrder;
};

export type VitalSignsMaxOrderByAggregateInput = {
    id?: Prisma.SortOrder;
    patientId?: Prisma.SortOrder;
    medicalId?: Prisma.SortOrder;
    bodyTemperature?: Prisma.SortOrder;
    systolic?: Prisma.SortOrder;
    diastolic?: Prisma.SortOrder;
    heartRate?: Prisma.SortOrder;
    respiratoryRate?: Prisma.SortOrder;
    oxygenSaturation?: Prisma.SortOrder;
    weight?: Prisma.SortOrder;
    height?: Prisma.SortOrder;
    createdAt?: Prisma.SortOrder;
    updatedAt?: Prisma.SortOrder;
};

export type VitalSignsMinOrderByAggregateInput = {
    id?: Prisma.SortOrder;
    patientId?: Prisma.SortOrder;
    medicalId?: Prisma.SortOrder;
    bodyTemperature?: Prisma.SortOrder;
    systolic?: Prisma.SortOrder;
    diastolic?: Prisma.SortOrder;
    heartRate?: Prisma.SortOrder;
    respiratoryRate?: Prisma.SortOrder;
    oxygenSaturation?: Prisma.SortOrder;
    weight?: Prisma.SortOrder;
    height?: Prisma.SortOrder;
    createdAt?: Prisma.SortOrder;
    updatedAt?: Prisma.SortOrder;
};

export type VitalSignsSumOrderByAggregateInput = {
    id?: Prisma.SortOrder;
    medicalId?: Prisma.SortOrder;
    bodyTemperature?: Prisma.SortOrder;
    systolic?: Prisma.SortOrder;
    diastolic?: Prisma.SortOrder;
    respiratoryRate?: Prisma.SortOrder;
    oxygenSaturation?: Prisma.SortOrder;
    weight?: Prisma.SortOrder;
    height?: Prisma.SortOrder;
};

export type VitalSignsCreateNestedManyWithoutMedicalInput = {
    create?:
        | Prisma.XOR<Prisma.VitalSignsCreateWithoutMedicalInput, Prisma.VitalSignsUncheckedCreateWithoutMedicalInput>
        | Prisma.VitalSignsCreateWithoutMedicalInput[]
        | Prisma.VitalSignsUncheckedCreateWithoutMedicalInput[];
    connectOrCreate?:
        | Prisma.VitalSignsCreateOrConnectWithoutMedicalInput
        | Prisma.VitalSignsCreateOrConnectWithoutMedicalInput[];
    createMany?: Prisma.VitalSignsCreateManyMedicalInputEnvelope;
    connect?: Prisma.VitalSignsWhereUniqueInput | Prisma.VitalSignsWhereUniqueInput[];
};

export type VitalSignsUncheckedCreateNestedManyWithoutMedicalInput = {
    create?:
        | Prisma.XOR<Prisma.VitalSignsCreateWithoutMedicalInput, Prisma.VitalSignsUncheckedCreateWithoutMedicalInput>
        | Prisma.VitalSignsCreateWithoutMedicalInput[]
        | Prisma.VitalSignsUncheckedCreateWithoutMedicalInput[];
    connectOrCreate?:
        | Prisma.VitalSignsCreateOrConnectWithoutMedicalInput
        | Prisma.VitalSignsCreateOrConnectWithoutMedicalInput[];
    createMany?: Prisma.VitalSignsCreateManyMedicalInputEnvelope;
    connect?: Prisma.VitalSignsWhereUniqueInput | Prisma.VitalSignsWhereUniqueInput[];
};

export type VitalSignsUpdateManyWithoutMedicalNestedInput = {
    create?:
        | Prisma.XOR<Prisma.VitalSignsCreateWithoutMedicalInput, Prisma.VitalSignsUncheckedCreateWithoutMedicalInput>
        | Prisma.VitalSignsCreateWithoutMedicalInput[]
        | Prisma.VitalSignsUncheckedCreateWithoutMedicalInput[];
    connectOrCreate?:
        | Prisma.VitalSignsCreateOrConnectWithoutMedicalInput
        | Prisma.VitalSignsCreateOrConnectWithoutMedicalInput[];
    upsert?:
        | Prisma.VitalSignsUpsertWithWhereUniqueWithoutMedicalInput
        | Prisma.VitalSignsUpsertWithWhereUniqueWithoutMedicalInput[];
    createMany?: Prisma.VitalSignsCreateManyMedicalInputEnvelope;
    set?: Prisma.VitalSignsWhereUniqueInput | Prisma.VitalSignsWhereUniqueInput[];
    disconnect?: Prisma.VitalSignsWhereUniqueInput | Prisma.VitalSignsWhereUniqueInput[];
    delete?: Prisma.VitalSignsWhereUniqueInput | Prisma.VitalSignsWhereUniqueInput[];
    connect?: Prisma.VitalSignsWhereUniqueInput | Prisma.VitalSignsWhereUniqueInput[];
    update?:
        | Prisma.VitalSignsUpdateWithWhereUniqueWithoutMedicalInput
        | Prisma.VitalSignsUpdateWithWhereUniqueWithoutMedicalInput[];
    updateMany?:
        | Prisma.VitalSignsUpdateManyWithWhereWithoutMedicalInput
        | Prisma.VitalSignsUpdateManyWithWhereWithoutMedicalInput[];
    deleteMany?: Prisma.VitalSignsScalarWhereInput | Prisma.VitalSignsScalarWhereInput[];
};

export type VitalSignsUncheckedUpdateManyWithoutMedicalNestedInput = {
    create?:
        | Prisma.XOR<Prisma.VitalSignsCreateWithoutMedicalInput, Prisma.VitalSignsUncheckedCreateWithoutMedicalInput>
        | Prisma.VitalSignsCreateWithoutMedicalInput[]
        | Prisma.VitalSignsUncheckedCreateWithoutMedicalInput[];
    connectOrCreate?:
        | Prisma.VitalSignsCreateOrConnectWithoutMedicalInput
        | Prisma.VitalSignsCreateOrConnectWithoutMedicalInput[];
    upsert?:
        | Prisma.VitalSignsUpsertWithWhereUniqueWithoutMedicalInput
        | Prisma.VitalSignsUpsertWithWhereUniqueWithoutMedicalInput[];
    createMany?: Prisma.VitalSignsCreateManyMedicalInputEnvelope;
    set?: Prisma.VitalSignsWhereUniqueInput | Prisma.VitalSignsWhereUniqueInput[];
    disconnect?: Prisma.VitalSignsWhereUniqueInput | Prisma.VitalSignsWhereUniqueInput[];
    delete?: Prisma.VitalSignsWhereUniqueInput | Prisma.VitalSignsWhereUniqueInput[];
    connect?: Prisma.VitalSignsWhereUniqueInput | Prisma.VitalSignsWhereUniqueInput[];
    update?:
        | Prisma.VitalSignsUpdateWithWhereUniqueWithoutMedicalInput
        | Prisma.VitalSignsUpdateWithWhereUniqueWithoutMedicalInput[];
    updateMany?:
        | Prisma.VitalSignsUpdateManyWithWhereWithoutMedicalInput
        | Prisma.VitalSignsUpdateManyWithWhereWithoutMedicalInput[];
    deleteMany?: Prisma.VitalSignsScalarWhereInput | Prisma.VitalSignsScalarWhereInput[];
};

export type VitalSignsCreateWithoutMedicalInput = {
    patientId: string;
    bodyTemperature?: number | null;
    systolic?: number | null;
    diastolic?: number | null;
    heartRate?: string | null;
    respiratoryRate?: number | null;
    oxygenSaturation?: number | null;
    weight: number;
    height?: number | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
};

export type VitalSignsUncheckedCreateWithoutMedicalInput = {
    id?: number;
    patientId: string;
    bodyTemperature?: number | null;
    systolic?: number | null;
    diastolic?: number | null;
    heartRate?: string | null;
    respiratoryRate?: number | null;
    oxygenSaturation?: number | null;
    weight: number;
    height?: number | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
};

export type VitalSignsCreateOrConnectWithoutMedicalInput = {
    where: Prisma.VitalSignsWhereUniqueInput;
    create: Prisma.XOR<Prisma.VitalSignsCreateWithoutMedicalInput, Prisma.VitalSignsUncheckedCreateWithoutMedicalInput>;
};

export type VitalSignsCreateManyMedicalInputEnvelope = {
    data: Prisma.VitalSignsCreateManyMedicalInput | Prisma.VitalSignsCreateManyMedicalInput[];
    skipDuplicates?: boolean;
};

export type VitalSignsUpsertWithWhereUniqueWithoutMedicalInput = {
    where: Prisma.VitalSignsWhereUniqueInput;
    update: Prisma.XOR<Prisma.VitalSignsUpdateWithoutMedicalInput, Prisma.VitalSignsUncheckedUpdateWithoutMedicalInput>;
    create: Prisma.XOR<Prisma.VitalSignsCreateWithoutMedicalInput, Prisma.VitalSignsUncheckedCreateWithoutMedicalInput>;
};

export type VitalSignsUpdateWithWhereUniqueWithoutMedicalInput = {
    where: Prisma.VitalSignsWhereUniqueInput;
    data: Prisma.XOR<Prisma.VitalSignsUpdateWithoutMedicalInput, Prisma.VitalSignsUncheckedUpdateWithoutMedicalInput>;
};

export type VitalSignsUpdateManyWithWhereWithoutMedicalInput = {
    where: Prisma.VitalSignsScalarWhereInput;
    data: Prisma.XOR<Prisma.VitalSignsUpdateManyMutationInput, Prisma.VitalSignsUncheckedUpdateManyWithoutMedicalInput>;
};

export type VitalSignsScalarWhereInput = {
    AND?: Prisma.VitalSignsScalarWhereInput | Prisma.VitalSignsScalarWhereInput[];
    OR?: Prisma.VitalSignsScalarWhereInput[];
    NOT?: Prisma.VitalSignsScalarWhereInput | Prisma.VitalSignsScalarWhereInput[];
    id?: Prisma.IntFilter<'VitalSigns'> | number;
    patientId?: Prisma.StringFilter<'VitalSigns'> | string;
    medicalId?: Prisma.IntFilter<'VitalSigns'> | number;
    bodyTemperature?: Prisma.FloatNullableFilter<'VitalSigns'> | number | null;
    systolic?: Prisma.IntNullableFilter<'VitalSigns'> | number | null;
    diastolic?: Prisma.IntNullableFilter<'VitalSigns'> | number | null;
    heartRate?: Prisma.StringNullableFilter<'VitalSigns'> | string | null;
    respiratoryRate?: Prisma.IntNullableFilter<'VitalSigns'> | number | null;
    oxygenSaturation?: Prisma.IntNullableFilter<'VitalSigns'> | number | null;
    weight?: Prisma.FloatFilter<'VitalSigns'> | number;
    height?: Prisma.FloatNullableFilter<'VitalSigns'> | number | null;
    createdAt?: Prisma.DateTimeFilter<'VitalSigns'> | Date | string;
    updatedAt?: Prisma.DateTimeFilter<'VitalSigns'> | Date | string;
};

export type VitalSignsCreateManyMedicalInput = {
    id?: number;
    patientId: string;
    bodyTemperature?: number | null;
    systolic?: number | null;
    diastolic?: number | null;
    heartRate?: string | null;
    respiratoryRate?: number | null;
    oxygenSaturation?: number | null;
    weight: number;
    height?: number | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
};

export type VitalSignsUpdateWithoutMedicalInput = {
    patientId?: Prisma.StringFieldUpdateOperationsInput | string;
    bodyTemperature?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null;
    systolic?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
    diastolic?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
    heartRate?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    respiratoryRate?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
    oxygenSaturation?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
    weight?: Prisma.FloatFieldUpdateOperationsInput | number;
    height?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type VitalSignsUncheckedUpdateWithoutMedicalInput = {
    id?: Prisma.IntFieldUpdateOperationsInput | number;
    patientId?: Prisma.StringFieldUpdateOperationsInput | string;
    bodyTemperature?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null;
    systolic?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
    diastolic?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
    heartRate?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    respiratoryRate?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
    oxygenSaturation?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
    weight?: Prisma.FloatFieldUpdateOperationsInput | number;
    height?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type VitalSignsUncheckedUpdateManyWithoutMedicalInput = {
    id?: Prisma.IntFieldUpdateOperationsInput | number;
    patientId?: Prisma.StringFieldUpdateOperationsInput | string;
    bodyTemperature?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null;
    systolic?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
    diastolic?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
    heartRate?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    respiratoryRate?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
    oxygenSaturation?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
    weight?: Prisma.FloatFieldUpdateOperationsInput | number;
    height?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type VitalSignsSelect<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
    {
        id?: boolean;
        patientId?: boolean;
        medicalId?: boolean;
        bodyTemperature?: boolean;
        systolic?: boolean;
        diastolic?: boolean;
        heartRate?: boolean;
        respiratoryRate?: boolean;
        oxygenSaturation?: boolean;
        weight?: boolean;
        height?: boolean;
        createdAt?: boolean;
        updatedAt?: boolean;
        medical?: boolean | Prisma.MedicalRecordsDefaultArgs<ExtArgs>;
    },
    ExtArgs['result']['vitalSigns']
>;

export type VitalSignsSelectCreateManyAndReturn<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
    {
        id?: boolean;
        patientId?: boolean;
        medicalId?: boolean;
        bodyTemperature?: boolean;
        systolic?: boolean;
        diastolic?: boolean;
        heartRate?: boolean;
        respiratoryRate?: boolean;
        oxygenSaturation?: boolean;
        weight?: boolean;
        height?: boolean;
        createdAt?: boolean;
        updatedAt?: boolean;
        medical?: boolean | Prisma.MedicalRecordsDefaultArgs<ExtArgs>;
    },
    ExtArgs['result']['vitalSigns']
>;

export type VitalSignsSelectUpdateManyAndReturn<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
    {
        id?: boolean;
        patientId?: boolean;
        medicalId?: boolean;
        bodyTemperature?: boolean;
        systolic?: boolean;
        diastolic?: boolean;
        heartRate?: boolean;
        respiratoryRate?: boolean;
        oxygenSaturation?: boolean;
        weight?: boolean;
        height?: boolean;
        createdAt?: boolean;
        updatedAt?: boolean;
        medical?: boolean | Prisma.MedicalRecordsDefaultArgs<ExtArgs>;
    },
    ExtArgs['result']['vitalSigns']
>;

export type VitalSignsSelectScalar = {
    id?: boolean;
    patientId?: boolean;
    medicalId?: boolean;
    bodyTemperature?: boolean;
    systolic?: boolean;
    diastolic?: boolean;
    heartRate?: boolean;
    respiratoryRate?: boolean;
    oxygenSaturation?: boolean;
    weight?: boolean;
    height?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
};

export type VitalSignsOmit<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetOmit<
    | 'id'
    | 'patientId'
    | 'medicalId'
    | 'bodyTemperature'
    | 'systolic'
    | 'diastolic'
    | 'heartRate'
    | 'respiratoryRate'
    | 'oxygenSaturation'
    | 'weight'
    | 'height'
    | 'createdAt'
    | 'updatedAt',
    ExtArgs['result']['vitalSigns']
>;
export type VitalSignsInclude<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    medical?: boolean | Prisma.MedicalRecordsDefaultArgs<ExtArgs>;
};
export type VitalSignsIncludeCreateManyAndReturn<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    medical?: boolean | Prisma.MedicalRecordsDefaultArgs<ExtArgs>;
};
export type VitalSignsIncludeUpdateManyAndReturn<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    medical?: boolean | Prisma.MedicalRecordsDefaultArgs<ExtArgs>;
};

export type $VitalSignsPayload<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    name: 'VitalSigns';
    objects: {
        medical: Prisma.$MedicalRecordsPayload<ExtArgs>;
    };
    scalars: runtime.Types.Extensions.GetPayloadResult<
        {
            id: number;
            patientId: string;
            medicalId: number;
            bodyTemperature: number | null;
            systolic: number | null;
            diastolic: number | null;
            heartRate: string | null;
            respiratoryRate: number | null;
            oxygenSaturation: number | null;
            weight: number;
            height: number | null;
            createdAt: Date;
            updatedAt: Date;
        },
        ExtArgs['result']['vitalSigns']
    >;
    composites: {};
};

export type VitalSignsGetPayload<S extends boolean | null | undefined | VitalSignsDefaultArgs> =
    runtime.Types.Result.GetResult<Prisma.$VitalSignsPayload, S>;

export type VitalSignsCountArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = Omit<VitalSignsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: VitalSignsCountAggregateInputType | true;
};

export interface VitalSignsDelegate<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
    GlobalOmitOptions = {}
> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['VitalSigns']; meta: { name: 'VitalSigns' } };
    /**
     * Find zero or one VitalSigns that matches the filter.
     * @param {VitalSignsFindUniqueArgs} args - Arguments to find a VitalSigns
     * @example
     * // Get one VitalSigns
     * const vitalSigns = await prisma.vitalSigns.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VitalSignsFindUniqueArgs>(
        args: Prisma.SelectSubset<T, VitalSignsFindUniqueArgs<ExtArgs>>
    ): Prisma.Prisma__VitalSignsClient<
        runtime.Types.Result.GetResult<Prisma.$VitalSignsPayload<ExtArgs>, T, 'findUnique', GlobalOmitOptions> | null,
        null,
        ExtArgs,
        GlobalOmitOptions
    >;

    /**
     * Find one VitalSigns that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {VitalSignsFindUniqueOrThrowArgs} args - Arguments to find a VitalSigns
     * @example
     * // Get one VitalSigns
     * const vitalSigns = await prisma.vitalSigns.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VitalSignsFindUniqueOrThrowArgs>(
        args: Prisma.SelectSubset<T, VitalSignsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma.Prisma__VitalSignsClient<
        runtime.Types.Result.GetResult<Prisma.$VitalSignsPayload<ExtArgs>, T, 'findUniqueOrThrow', GlobalOmitOptions>,
        never,
        ExtArgs,
        GlobalOmitOptions
    >;

    /**
     * Find the first VitalSigns that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VitalSignsFindFirstArgs} args - Arguments to find a VitalSigns
     * @example
     * // Get one VitalSigns
     * const vitalSigns = await prisma.vitalSigns.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VitalSignsFindFirstArgs>(
        args?: Prisma.SelectSubset<T, VitalSignsFindFirstArgs<ExtArgs>>
    ): Prisma.Prisma__VitalSignsClient<
        runtime.Types.Result.GetResult<Prisma.$VitalSignsPayload<ExtArgs>, T, 'findFirst', GlobalOmitOptions> | null,
        null,
        ExtArgs,
        GlobalOmitOptions
    >;

    /**
     * Find the first VitalSigns that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VitalSignsFindFirstOrThrowArgs} args - Arguments to find a VitalSigns
     * @example
     * // Get one VitalSigns
     * const vitalSigns = await prisma.vitalSigns.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VitalSignsFindFirstOrThrowArgs>(
        args?: Prisma.SelectSubset<T, VitalSignsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma.Prisma__VitalSignsClient<
        runtime.Types.Result.GetResult<Prisma.$VitalSignsPayload<ExtArgs>, T, 'findFirstOrThrow', GlobalOmitOptions>,
        never,
        ExtArgs,
        GlobalOmitOptions
    >;

    /**
     * Find zero or more VitalSigns that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VitalSignsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all VitalSigns
     * const vitalSigns = await prisma.vitalSigns.findMany()
     *
     * // Get first 10 VitalSigns
     * const vitalSigns = await prisma.vitalSigns.findMany({ take: 10 })
     *
     * // Only select the `id`
     * const vitalSignsWithIdOnly = await prisma.vitalSigns.findMany({ select: { id: true } })
     *
     */
    findMany<T extends VitalSignsFindManyArgs>(
        args?: Prisma.SelectSubset<T, VitalSignsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<
        runtime.Types.Result.GetResult<Prisma.$VitalSignsPayload<ExtArgs>, T, 'findMany', GlobalOmitOptions>
    >;

    /**
     * Create a VitalSigns.
     * @param {VitalSignsCreateArgs} args - Arguments to create a VitalSigns.
     * @example
     * // Create one VitalSigns
     * const VitalSigns = await prisma.vitalSigns.create({
     *   data: {
     *     // ... data to create a VitalSigns
     *   }
     * })
     *
     */
    create<T extends VitalSignsCreateArgs>(
        args: Prisma.SelectSubset<T, VitalSignsCreateArgs<ExtArgs>>
    ): Prisma.Prisma__VitalSignsClient<
        runtime.Types.Result.GetResult<Prisma.$VitalSignsPayload<ExtArgs>, T, 'create', GlobalOmitOptions>,
        never,
        ExtArgs,
        GlobalOmitOptions
    >;

    /**
     * Create many VitalSigns.
     * @param {VitalSignsCreateManyArgs} args - Arguments to create many VitalSigns.
     * @example
     * // Create many VitalSigns
     * const vitalSigns = await prisma.vitalSigns.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     */
    createMany<T extends VitalSignsCreateManyArgs>(
        args?: Prisma.SelectSubset<T, VitalSignsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<Prisma.BatchPayload>;

    /**
     * Create many VitalSigns and returns the data saved in the database.
     * @param {VitalSignsCreateManyAndReturnArgs} args - Arguments to create many VitalSigns.
     * @example
     * // Create many VitalSigns
     * const vitalSigns = await prisma.vitalSigns.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     * // Create many VitalSigns and only return the `id`
     * const vitalSignsWithIdOnly = await prisma.vitalSigns.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     *
     */
    createManyAndReturn<T extends VitalSignsCreateManyAndReturnArgs>(
        args?: Prisma.SelectSubset<T, VitalSignsCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<
        runtime.Types.Result.GetResult<Prisma.$VitalSignsPayload<ExtArgs>, T, 'createManyAndReturn', GlobalOmitOptions>
    >;

    /**
     * Delete a VitalSigns.
     * @param {VitalSignsDeleteArgs} args - Arguments to delete one VitalSigns.
     * @example
     * // Delete one VitalSigns
     * const VitalSigns = await prisma.vitalSigns.delete({
     *   where: {
     *     // ... filter to delete one VitalSigns
     *   }
     * })
     *
     */
    delete<T extends VitalSignsDeleteArgs>(
        args: Prisma.SelectSubset<T, VitalSignsDeleteArgs<ExtArgs>>
    ): Prisma.Prisma__VitalSignsClient<
        runtime.Types.Result.GetResult<Prisma.$VitalSignsPayload<ExtArgs>, T, 'delete', GlobalOmitOptions>,
        never,
        ExtArgs,
        GlobalOmitOptions
    >;

    /**
     * Update one VitalSigns.
     * @param {VitalSignsUpdateArgs} args - Arguments to update one VitalSigns.
     * @example
     * // Update one VitalSigns
     * const vitalSigns = await prisma.vitalSigns.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     */
    update<T extends VitalSignsUpdateArgs>(
        args: Prisma.SelectSubset<T, VitalSignsUpdateArgs<ExtArgs>>
    ): Prisma.Prisma__VitalSignsClient<
        runtime.Types.Result.GetResult<Prisma.$VitalSignsPayload<ExtArgs>, T, 'update', GlobalOmitOptions>,
        never,
        ExtArgs,
        GlobalOmitOptions
    >;

    /**
     * Delete zero or more VitalSigns.
     * @param {VitalSignsDeleteManyArgs} args - Arguments to filter VitalSigns to delete.
     * @example
     * // Delete a few VitalSigns
     * const { count } = await prisma.vitalSigns.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     *
     */
    deleteMany<T extends VitalSignsDeleteManyArgs>(
        args?: Prisma.SelectSubset<T, VitalSignsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<Prisma.BatchPayload>;

    /**
     * Update zero or more VitalSigns.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VitalSignsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many VitalSigns
     * const vitalSigns = await prisma.vitalSigns.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     */
    updateMany<T extends VitalSignsUpdateManyArgs>(
        args: Prisma.SelectSubset<T, VitalSignsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<Prisma.BatchPayload>;

    /**
     * Update zero or more VitalSigns and returns the data updated in the database.
     * @param {VitalSignsUpdateManyAndReturnArgs} args - Arguments to update many VitalSigns.
     * @example
     * // Update many VitalSigns
     * const vitalSigns = await prisma.vitalSigns.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     * // Update zero or more VitalSigns and only return the `id`
     * const vitalSignsWithIdOnly = await prisma.vitalSigns.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     *
     */
    updateManyAndReturn<T extends VitalSignsUpdateManyAndReturnArgs>(
        args: Prisma.SelectSubset<T, VitalSignsUpdateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<
        runtime.Types.Result.GetResult<Prisma.$VitalSignsPayload<ExtArgs>, T, 'updateManyAndReturn', GlobalOmitOptions>
    >;

    /**
     * Create or update one VitalSigns.
     * @param {VitalSignsUpsertArgs} args - Arguments to update or create a VitalSigns.
     * @example
     * // Update or create a VitalSigns
     * const vitalSigns = await prisma.vitalSigns.upsert({
     *   create: {
     *     // ... data to create a VitalSigns
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the VitalSigns we want to update
     *   }
     * })
     */
    upsert<T extends VitalSignsUpsertArgs>(
        args: Prisma.SelectSubset<T, VitalSignsUpsertArgs<ExtArgs>>
    ): Prisma.Prisma__VitalSignsClient<
        runtime.Types.Result.GetResult<Prisma.$VitalSignsPayload<ExtArgs>, T, 'upsert', GlobalOmitOptions>,
        never,
        ExtArgs,
        GlobalOmitOptions
    >;

    /**
     * Count the number of VitalSigns.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VitalSignsCountArgs} args - Arguments to filter VitalSigns to count.
     * @example
     * // Count the number of VitalSigns
     * const count = await prisma.vitalSigns.count({
     *   where: {
     *     // ... the filter for the VitalSigns we want to count
     *   }
     * })
     **/
    count<T extends VitalSignsCountArgs>(
        args?: Prisma.Subset<T, VitalSignsCountArgs>
    ): Prisma.PrismaPromise<
        T extends runtime.Types.Utils.Record<'select', any>
            ? T['select'] extends true
                ? number
                : Prisma.GetScalarType<T['select'], VitalSignsCountAggregateOutputType>
            : number
    >;

    /**
     * Allows you to perform aggregations operations on a VitalSigns.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VitalSignsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
     **/
    aggregate<T extends VitalSignsAggregateArgs>(
        args: Prisma.Subset<T, VitalSignsAggregateArgs>
    ): Prisma.PrismaPromise<GetVitalSignsAggregateType<T>>;

    /**
     * Group by VitalSigns.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VitalSignsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     *
     **/
    groupBy<
        T extends VitalSignsGroupByArgs,
        HasSelectOrTake extends Prisma.Or<
            Prisma.Extends<'skip', Prisma.Keys<T>>,
            Prisma.Extends<'take', Prisma.Keys<T>>
        >,
        OrderByArg extends Prisma.True extends HasSelectOrTake
            ? { orderBy: VitalSignsGroupByArgs['orderBy'] }
            : { orderBy?: VitalSignsGroupByArgs['orderBy'] },
        OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
        ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
        ByValid extends Prisma.Has<ByFields, OrderFields>,
        HavingFields extends Prisma.GetHavingFields<T['having']>,
        HavingValid extends Prisma.Has<ByFields, HavingFields>,
        ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
        InputErrors extends ByEmpty extends Prisma.True
            ? `Error: "by" must not be empty.`
            : HavingValid extends Prisma.False
              ? {
                    [P in HavingFields]: P extends ByFields
                        ? never
                        : P extends string
                          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                          : [Error, 'Field ', P, ` in "having" needs to be provided in "by"`];
                }[HavingFields]
              : 'take' extends Prisma.Keys<T>
                ? 'orderBy' extends Prisma.Keys<T>
                    ? ByValid extends Prisma.True
                        ? {}
                        : {
                              [P in OrderFields]: P extends ByFields
                                  ? never
                                  : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                          }[OrderFields]
                    : 'Error: If you provide "take", you also need to provide "orderBy"'
                : 'skip' extends Prisma.Keys<T>
                  ? 'orderBy' extends Prisma.Keys<T>
                      ? ByValid extends Prisma.True
                          ? {}
                          : {
                                [P in OrderFields]: P extends ByFields
                                    ? never
                                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                            }[OrderFields]
                      : 'Error: If you provide "skip", you also need to provide "orderBy"'
                  : ByValid extends Prisma.True
                    ? {}
                    : {
                          [P in OrderFields]: P extends ByFields
                              ? never
                              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                      }[OrderFields]
    >(
        args: Prisma.SubsetIntersection<T, VitalSignsGroupByArgs, OrderByArg> & InputErrors
    ): {} extends InputErrors ? GetVitalSignsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>;
    /**
     * Fields of the VitalSigns model
     */
    readonly fields: VitalSignsFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for VitalSigns.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__VitalSignsClient<
    T,
    Null = never,
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
    GlobalOmitOptions = {}
> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    medical<T extends Prisma.MedicalRecordsDefaultArgs<ExtArgs> = {}>(
        args?: Prisma.Subset<T, Prisma.MedicalRecordsDefaultArgs<ExtArgs>>
    ): Prisma.Prisma__MedicalRecordsClient<
        | runtime.Types.Result.GetResult<
              Prisma.$MedicalRecordsPayload<ExtArgs>,
              T,
              'findUniqueOrThrow',
              GlobalOmitOptions
          >
        | Null,
        Null,
        ExtArgs,
        GlobalOmitOptions
    >;
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(
        onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null,
        onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null
    ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(
        onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null
    ): runtime.Types.Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the VitalSigns model
 */
export interface VitalSignsFieldRefs {
    readonly id: Prisma.FieldRef<'VitalSigns', 'Int'>;
    readonly patientId: Prisma.FieldRef<'VitalSigns', 'String'>;
    readonly medicalId: Prisma.FieldRef<'VitalSigns', 'Int'>;
    readonly bodyTemperature: Prisma.FieldRef<'VitalSigns', 'Float'>;
    readonly systolic: Prisma.FieldRef<'VitalSigns', 'Int'>;
    readonly diastolic: Prisma.FieldRef<'VitalSigns', 'Int'>;
    readonly heartRate: Prisma.FieldRef<'VitalSigns', 'String'>;
    readonly respiratoryRate: Prisma.FieldRef<'VitalSigns', 'Int'>;
    readonly oxygenSaturation: Prisma.FieldRef<'VitalSigns', 'Int'>;
    readonly weight: Prisma.FieldRef<'VitalSigns', 'Float'>;
    readonly height: Prisma.FieldRef<'VitalSigns', 'Float'>;
    readonly createdAt: Prisma.FieldRef<'VitalSigns', 'DateTime'>;
    readonly updatedAt: Prisma.FieldRef<'VitalSigns', 'DateTime'>;
}

// Custom InputTypes
/**
 * VitalSigns findUnique
 */
export type VitalSignsFindUniqueArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the VitalSigns
     */
    select?: Prisma.VitalSignsSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the VitalSigns
     */
    omit?: Prisma.VitalSignsOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.VitalSignsInclude<ExtArgs> | null;
    /**
     * Filter, which VitalSigns to fetch.
     */
    where: Prisma.VitalSignsWhereUniqueInput;
};

/**
 * VitalSigns findUniqueOrThrow
 */
export type VitalSignsFindUniqueOrThrowArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the VitalSigns
     */
    select?: Prisma.VitalSignsSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the VitalSigns
     */
    omit?: Prisma.VitalSignsOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.VitalSignsInclude<ExtArgs> | null;
    /**
     * Filter, which VitalSigns to fetch.
     */
    where: Prisma.VitalSignsWhereUniqueInput;
};

/**
 * VitalSigns findFirst
 */
export type VitalSignsFindFirstArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the VitalSigns
     */
    select?: Prisma.VitalSignsSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the VitalSigns
     */
    omit?: Prisma.VitalSignsOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.VitalSignsInclude<ExtArgs> | null;
    /**
     * Filter, which VitalSigns to fetch.
     */
    where?: Prisma.VitalSignsWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of VitalSigns to fetch.
     */
    orderBy?: Prisma.VitalSignsOrderByWithRelationInput | Prisma.VitalSignsOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for VitalSigns.
     */
    cursor?: Prisma.VitalSignsWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `Â±n` VitalSigns from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` VitalSigns.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of VitalSigns.
     */
    distinct?: Prisma.VitalSignsScalarFieldEnum | Prisma.VitalSignsScalarFieldEnum[];
};

/**
 * VitalSigns findFirstOrThrow
 */
export type VitalSignsFindFirstOrThrowArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the VitalSigns
     */
    select?: Prisma.VitalSignsSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the VitalSigns
     */
    omit?: Prisma.VitalSignsOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.VitalSignsInclude<ExtArgs> | null;
    /**
     * Filter, which VitalSigns to fetch.
     */
    where?: Prisma.VitalSignsWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of VitalSigns to fetch.
     */
    orderBy?: Prisma.VitalSignsOrderByWithRelationInput | Prisma.VitalSignsOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for VitalSigns.
     */
    cursor?: Prisma.VitalSignsWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `Â±n` VitalSigns from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` VitalSigns.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of VitalSigns.
     */
    distinct?: Prisma.VitalSignsScalarFieldEnum | Prisma.VitalSignsScalarFieldEnum[];
};

/**
 * VitalSigns findMany
 */
export type VitalSignsFindManyArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the VitalSigns
     */
    select?: Prisma.VitalSignsSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the VitalSigns
     */
    omit?: Prisma.VitalSignsOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.VitalSignsInclude<ExtArgs> | null;
    /**
     * Filter, which VitalSigns to fetch.
     */
    where?: Prisma.VitalSignsWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of VitalSigns to fetch.
     */
    orderBy?: Prisma.VitalSignsOrderByWithRelationInput | Prisma.VitalSignsOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for listing VitalSigns.
     */
    cursor?: Prisma.VitalSignsWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `Â±n` VitalSigns from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` VitalSigns.
     */
    skip?: number;
    distinct?: Prisma.VitalSignsScalarFieldEnum | Prisma.VitalSignsScalarFieldEnum[];
};

/**
 * VitalSigns create
 */
export type VitalSignsCreateArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the VitalSigns
     */
    select?: Prisma.VitalSignsSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the VitalSigns
     */
    omit?: Prisma.VitalSignsOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.VitalSignsInclude<ExtArgs> | null;
    /**
     * The data needed to create a VitalSigns.
     */
    data: Prisma.XOR<Prisma.VitalSignsCreateInput, Prisma.VitalSignsUncheckedCreateInput>;
};

/**
 * VitalSigns createMany
 */
export type VitalSignsCreateManyArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * The data used to create many VitalSigns.
     */
    data: Prisma.VitalSignsCreateManyInput | Prisma.VitalSignsCreateManyInput[];
    skipDuplicates?: boolean;
};

/**
 * VitalSigns createManyAndReturn
 */
export type VitalSignsCreateManyAndReturnArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the VitalSigns
     */
    select?: Prisma.VitalSignsSelectCreateManyAndReturn<ExtArgs> | null;
    /**
     * Omit specific fields from the VitalSigns
     */
    omit?: Prisma.VitalSignsOmit<ExtArgs> | null;
    /**
     * The data used to create many VitalSigns.
     */
    data: Prisma.VitalSignsCreateManyInput | Prisma.VitalSignsCreateManyInput[];
    skipDuplicates?: boolean;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.VitalSignsIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * VitalSigns update
 */
export type VitalSignsUpdateArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the VitalSigns
     */
    select?: Prisma.VitalSignsSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the VitalSigns
     */
    omit?: Prisma.VitalSignsOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.VitalSignsInclude<ExtArgs> | null;
    /**
     * The data needed to update a VitalSigns.
     */
    data: Prisma.XOR<Prisma.VitalSignsUpdateInput, Prisma.VitalSignsUncheckedUpdateInput>;
    /**
     * Choose, which VitalSigns to update.
     */
    where: Prisma.VitalSignsWhereUniqueInput;
};

/**
 * VitalSigns updateMany
 */
export type VitalSignsUpdateManyArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * The data used to update VitalSigns.
     */
    data: Prisma.XOR<Prisma.VitalSignsUpdateManyMutationInput, Prisma.VitalSignsUncheckedUpdateManyInput>;
    /**
     * Filter which VitalSigns to update
     */
    where?: Prisma.VitalSignsWhereInput;
    /**
     * Limit how many VitalSigns to update.
     */
    limit?: number;
};

/**
 * VitalSigns updateManyAndReturn
 */
export type VitalSignsUpdateManyAndReturnArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the VitalSigns
     */
    select?: Prisma.VitalSignsSelectUpdateManyAndReturn<ExtArgs> | null;
    /**
     * Omit specific fields from the VitalSigns
     */
    omit?: Prisma.VitalSignsOmit<ExtArgs> | null;
    /**
     * The data used to update VitalSigns.
     */
    data: Prisma.XOR<Prisma.VitalSignsUpdateManyMutationInput, Prisma.VitalSignsUncheckedUpdateManyInput>;
    /**
     * Filter which VitalSigns to update
     */
    where?: Prisma.VitalSignsWhereInput;
    /**
     * Limit how many VitalSigns to update.
     */
    limit?: number;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.VitalSignsIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * VitalSigns upsert
 */
export type VitalSignsUpsertArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the VitalSigns
     */
    select?: Prisma.VitalSignsSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the VitalSigns
     */
    omit?: Prisma.VitalSignsOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.VitalSignsInclude<ExtArgs> | null;
    /**
     * The filter to search for the VitalSigns to update in case it exists.
     */
    where: Prisma.VitalSignsWhereUniqueInput;
    /**
     * In case the VitalSigns found by the `where` argument doesn't exist, create a new VitalSigns with this data.
     */
    create: Prisma.XOR<Prisma.VitalSignsCreateInput, Prisma.VitalSignsUncheckedCreateInput>;
    /**
     * In case the VitalSigns was found with the provided `where` argument, update it with this data.
     */
    update: Prisma.XOR<Prisma.VitalSignsUpdateInput, Prisma.VitalSignsUncheckedUpdateInput>;
};

/**
 * VitalSigns delete
 */
export type VitalSignsDeleteArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the VitalSigns
     */
    select?: Prisma.VitalSignsSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the VitalSigns
     */
    omit?: Prisma.VitalSignsOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.VitalSignsInclude<ExtArgs> | null;
    /**
     * Filter which VitalSigns to delete.
     */
    where: Prisma.VitalSignsWhereUniqueInput;
};

/**
 * VitalSigns deleteMany
 */
export type VitalSignsDeleteManyArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Filter which VitalSigns to delete
     */
    where?: Prisma.VitalSignsWhereInput;
    /**
     * Limit how many VitalSigns to delete.
     */
    limit?: number;
};

/**
 * VitalSigns without action
 */
export type VitalSignsDefaultArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the VitalSigns
     */
    select?: Prisma.VitalSignsSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the VitalSigns
     */
    omit?: Prisma.VitalSignsOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.VitalSignsInclude<ExtArgs> | null;
};
