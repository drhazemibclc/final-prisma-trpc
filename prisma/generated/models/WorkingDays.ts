/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/**
 * This file exports the `WorkingDays` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from '@prisma/client/runtime/library';
import type * as $Enums from '../enums';
import type * as Prisma from '../internal/prismaNamespace';

/**
 * Model WorkingDays
 *
 */
export type WorkingDaysModel = runtime.Types.Result.DefaultSelection<Prisma.$WorkingDaysPayload>;

export type AggregateWorkingDays = {
    _count: WorkingDaysCountAggregateOutputType | null;
    _avg: WorkingDaysAvgAggregateOutputType | null;
    _sum: WorkingDaysSumAggregateOutputType | null;
    _min: WorkingDaysMinAggregateOutputType | null;
    _max: WorkingDaysMaxAggregateOutputType | null;
};

export type WorkingDaysAvgAggregateOutputType = {
    id: number | null;
};

export type WorkingDaysSumAggregateOutputType = {
    id: number | null;
};

export type WorkingDaysMinAggregateOutputType = {
    id: number | null;
    doctorId: string | null;
    day: string | null;
    startTime: string | null;
    closeTime: string | null;
    createdAt: Date | null;
    updatedAt: Date | null;
};

export type WorkingDaysMaxAggregateOutputType = {
    id: number | null;
    doctorId: string | null;
    day: string | null;
    startTime: string | null;
    closeTime: string | null;
    createdAt: Date | null;
    updatedAt: Date | null;
};

export type WorkingDaysCountAggregateOutputType = {
    id: number;
    doctorId: number;
    day: number;
    startTime: number;
    closeTime: number;
    createdAt: number;
    updatedAt: number;
    _all: number;
};

export type WorkingDaysAvgAggregateInputType = {
    id?: true;
};

export type WorkingDaysSumAggregateInputType = {
    id?: true;
};

export type WorkingDaysMinAggregateInputType = {
    id?: true;
    doctorId?: true;
    day?: true;
    startTime?: true;
    closeTime?: true;
    createdAt?: true;
    updatedAt?: true;
};

export type WorkingDaysMaxAggregateInputType = {
    id?: true;
    doctorId?: true;
    day?: true;
    startTime?: true;
    closeTime?: true;
    createdAt?: true;
    updatedAt?: true;
};

export type WorkingDaysCountAggregateInputType = {
    id?: true;
    doctorId?: true;
    day?: true;
    startTime?: true;
    closeTime?: true;
    createdAt?: true;
    updatedAt?: true;
    _all?: true;
};

export type WorkingDaysAggregateArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Filter which WorkingDays to aggregate.
     */
    where?: Prisma.WorkingDaysWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of WorkingDays to fetch.
     */
    orderBy?: Prisma.WorkingDaysOrderByWithRelationInput | Prisma.WorkingDaysOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the start position
     */
    cursor?: Prisma.WorkingDaysWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `Â±n` WorkingDays from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` WorkingDays.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Count returned WorkingDays
     **/
    _count?: true | WorkingDaysCountAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to average
     **/
    _avg?: WorkingDaysAvgAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to sum
     **/
    _sum?: WorkingDaysSumAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the minimum value
     **/
    _min?: WorkingDaysMinAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the maximum value
     **/
    _max?: WorkingDaysMaxAggregateInputType;
};

export type GetWorkingDaysAggregateType<T extends WorkingDaysAggregateArgs> = {
    [P in keyof T & keyof AggregateWorkingDays]: P extends '_count' | 'count'
        ? T[P] extends true
            ? number
            : Prisma.GetScalarType<T[P], AggregateWorkingDays[P]>
        : Prisma.GetScalarType<T[P], AggregateWorkingDays[P]>;
};

export type WorkingDaysGroupByArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    where?: Prisma.WorkingDaysWhereInput;
    orderBy?: Prisma.WorkingDaysOrderByWithAggregationInput | Prisma.WorkingDaysOrderByWithAggregationInput[];
    by: Prisma.WorkingDaysScalarFieldEnum[] | Prisma.WorkingDaysScalarFieldEnum;
    having?: Prisma.WorkingDaysScalarWhereWithAggregatesInput;
    take?: number;
    skip?: number;
    _count?: WorkingDaysCountAggregateInputType | true;
    _avg?: WorkingDaysAvgAggregateInputType;
    _sum?: WorkingDaysSumAggregateInputType;
    _min?: WorkingDaysMinAggregateInputType;
    _max?: WorkingDaysMaxAggregateInputType;
};

export type WorkingDaysGroupByOutputType = {
    id: number;
    doctorId: string;
    day: string;
    startTime: string;
    closeTime: string;
    createdAt: Date;
    updatedAt: Date;
    _count: WorkingDaysCountAggregateOutputType | null;
    _avg: WorkingDaysAvgAggregateOutputType | null;
    _sum: WorkingDaysSumAggregateOutputType | null;
    _min: WorkingDaysMinAggregateOutputType | null;
    _max: WorkingDaysMaxAggregateOutputType | null;
};

type GetWorkingDaysGroupByPayload<T extends WorkingDaysGroupByArgs> = Prisma.PrismaPromise<
    Array<
        Prisma.PickEnumerable<WorkingDaysGroupByOutputType, T['by']> & {
            [P in keyof T & keyof WorkingDaysGroupByOutputType]: P extends '_count'
                ? T[P] extends boolean
                    ? number
                    : Prisma.GetScalarType<T[P], WorkingDaysGroupByOutputType[P]>
                : Prisma.GetScalarType<T[P], WorkingDaysGroupByOutputType[P]>;
        }
    >
>;

export type WorkingDaysWhereInput = {
    AND?: Prisma.WorkingDaysWhereInput | Prisma.WorkingDaysWhereInput[];
    OR?: Prisma.WorkingDaysWhereInput[];
    NOT?: Prisma.WorkingDaysWhereInput | Prisma.WorkingDaysWhereInput[];
    id?: Prisma.IntFilter<'WorkingDays'> | number;
    doctorId?: Prisma.StringFilter<'WorkingDays'> | string;
    day?: Prisma.StringFilter<'WorkingDays'> | string;
    startTime?: Prisma.StringFilter<'WorkingDays'> | string;
    closeTime?: Prisma.StringFilter<'WorkingDays'> | string;
    createdAt?: Prisma.DateTimeFilter<'WorkingDays'> | Date | string;
    updatedAt?: Prisma.DateTimeFilter<'WorkingDays'> | Date | string;
    doctor?: Prisma.XOR<Prisma.DoctorScalarRelationFilter, Prisma.DoctorWhereInput>;
};

export type WorkingDaysOrderByWithRelationInput = {
    id?: Prisma.SortOrder;
    doctorId?: Prisma.SortOrder;
    day?: Prisma.SortOrder;
    startTime?: Prisma.SortOrder;
    closeTime?: Prisma.SortOrder;
    createdAt?: Prisma.SortOrder;
    updatedAt?: Prisma.SortOrder;
    doctor?: Prisma.DoctorOrderByWithRelationInput;
};

export type WorkingDaysWhereUniqueInput = Prisma.AtLeast<
    {
        id?: number;
        AND?: Prisma.WorkingDaysWhereInput | Prisma.WorkingDaysWhereInput[];
        OR?: Prisma.WorkingDaysWhereInput[];
        NOT?: Prisma.WorkingDaysWhereInput | Prisma.WorkingDaysWhereInput[];
        doctorId?: Prisma.StringFilter<'WorkingDays'> | string;
        day?: Prisma.StringFilter<'WorkingDays'> | string;
        startTime?: Prisma.StringFilter<'WorkingDays'> | string;
        closeTime?: Prisma.StringFilter<'WorkingDays'> | string;
        createdAt?: Prisma.DateTimeFilter<'WorkingDays'> | Date | string;
        updatedAt?: Prisma.DateTimeFilter<'WorkingDays'> | Date | string;
        doctor?: Prisma.XOR<Prisma.DoctorScalarRelationFilter, Prisma.DoctorWhereInput>;
    },
    'id'
>;

export type WorkingDaysOrderByWithAggregationInput = {
    id?: Prisma.SortOrder;
    doctorId?: Prisma.SortOrder;
    day?: Prisma.SortOrder;
    startTime?: Prisma.SortOrder;
    closeTime?: Prisma.SortOrder;
    createdAt?: Prisma.SortOrder;
    updatedAt?: Prisma.SortOrder;
    _count?: Prisma.WorkingDaysCountOrderByAggregateInput;
    _avg?: Prisma.WorkingDaysAvgOrderByAggregateInput;
    _max?: Prisma.WorkingDaysMaxOrderByAggregateInput;
    _min?: Prisma.WorkingDaysMinOrderByAggregateInput;
    _sum?: Prisma.WorkingDaysSumOrderByAggregateInput;
};

export type WorkingDaysScalarWhereWithAggregatesInput = {
    AND?: Prisma.WorkingDaysScalarWhereWithAggregatesInput | Prisma.WorkingDaysScalarWhereWithAggregatesInput[];
    OR?: Prisma.WorkingDaysScalarWhereWithAggregatesInput[];
    NOT?: Prisma.WorkingDaysScalarWhereWithAggregatesInput | Prisma.WorkingDaysScalarWhereWithAggregatesInput[];
    id?: Prisma.IntWithAggregatesFilter<'WorkingDays'> | number;
    doctorId?: Prisma.StringWithAggregatesFilter<'WorkingDays'> | string;
    day?: Prisma.StringWithAggregatesFilter<'WorkingDays'> | string;
    startTime?: Prisma.StringWithAggregatesFilter<'WorkingDays'> | string;
    closeTime?: Prisma.StringWithAggregatesFilter<'WorkingDays'> | string;
    createdAt?: Prisma.DateTimeWithAggregatesFilter<'WorkingDays'> | Date | string;
    updatedAt?: Prisma.DateTimeWithAggregatesFilter<'WorkingDays'> | Date | string;
};

export type WorkingDaysCreateInput = {
    day: string;
    startTime: string;
    closeTime: string;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    doctor: Prisma.DoctorCreateNestedOneWithoutWorkingDaysInput;
};

export type WorkingDaysUncheckedCreateInput = {
    id?: number;
    doctorId: string;
    day: string;
    startTime: string;
    closeTime: string;
    createdAt?: Date | string;
    updatedAt?: Date | string;
};

export type WorkingDaysUpdateInput = {
    day?: Prisma.StringFieldUpdateOperationsInput | string;
    startTime?: Prisma.StringFieldUpdateOperationsInput | string;
    closeTime?: Prisma.StringFieldUpdateOperationsInput | string;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    doctor?: Prisma.DoctorUpdateOneRequiredWithoutWorkingDaysNestedInput;
};

export type WorkingDaysUncheckedUpdateInput = {
    id?: Prisma.IntFieldUpdateOperationsInput | number;
    doctorId?: Prisma.StringFieldUpdateOperationsInput | string;
    day?: Prisma.StringFieldUpdateOperationsInput | string;
    startTime?: Prisma.StringFieldUpdateOperationsInput | string;
    closeTime?: Prisma.StringFieldUpdateOperationsInput | string;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type WorkingDaysCreateManyInput = {
    id?: number;
    doctorId: string;
    day: string;
    startTime: string;
    closeTime: string;
    createdAt?: Date | string;
    updatedAt?: Date | string;
};

export type WorkingDaysUpdateManyMutationInput = {
    day?: Prisma.StringFieldUpdateOperationsInput | string;
    startTime?: Prisma.StringFieldUpdateOperationsInput | string;
    closeTime?: Prisma.StringFieldUpdateOperationsInput | string;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type WorkingDaysUncheckedUpdateManyInput = {
    id?: Prisma.IntFieldUpdateOperationsInput | number;
    doctorId?: Prisma.StringFieldUpdateOperationsInput | string;
    day?: Prisma.StringFieldUpdateOperationsInput | string;
    startTime?: Prisma.StringFieldUpdateOperationsInput | string;
    closeTime?: Prisma.StringFieldUpdateOperationsInput | string;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type WorkingDaysListRelationFilter = {
    every?: Prisma.WorkingDaysWhereInput;
    some?: Prisma.WorkingDaysWhereInput;
    none?: Prisma.WorkingDaysWhereInput;
};

export type WorkingDaysOrderByRelationAggregateInput = {
    _count?: Prisma.SortOrder;
};

export type WorkingDaysCountOrderByAggregateInput = {
    id?: Prisma.SortOrder;
    doctorId?: Prisma.SortOrder;
    day?: Prisma.SortOrder;
    startTime?: Prisma.SortOrder;
    closeTime?: Prisma.SortOrder;
    createdAt?: Prisma.SortOrder;
    updatedAt?: Prisma.SortOrder;
};

export type WorkingDaysAvgOrderByAggregateInput = {
    id?: Prisma.SortOrder;
};

export type WorkingDaysMaxOrderByAggregateInput = {
    id?: Prisma.SortOrder;
    doctorId?: Prisma.SortOrder;
    day?: Prisma.SortOrder;
    startTime?: Prisma.SortOrder;
    closeTime?: Prisma.SortOrder;
    createdAt?: Prisma.SortOrder;
    updatedAt?: Prisma.SortOrder;
};

export type WorkingDaysMinOrderByAggregateInput = {
    id?: Prisma.SortOrder;
    doctorId?: Prisma.SortOrder;
    day?: Prisma.SortOrder;
    startTime?: Prisma.SortOrder;
    closeTime?: Prisma.SortOrder;
    createdAt?: Prisma.SortOrder;
    updatedAt?: Prisma.SortOrder;
};

export type WorkingDaysSumOrderByAggregateInput = {
    id?: Prisma.SortOrder;
};

export type WorkingDaysCreateNestedManyWithoutDoctorInput = {
    create?:
        | Prisma.XOR<Prisma.WorkingDaysCreateWithoutDoctorInput, Prisma.WorkingDaysUncheckedCreateWithoutDoctorInput>
        | Prisma.WorkingDaysCreateWithoutDoctorInput[]
        | Prisma.WorkingDaysUncheckedCreateWithoutDoctorInput[];
    connectOrCreate?:
        | Prisma.WorkingDaysCreateOrConnectWithoutDoctorInput
        | Prisma.WorkingDaysCreateOrConnectWithoutDoctorInput[];
    createMany?: Prisma.WorkingDaysCreateManyDoctorInputEnvelope;
    connect?: Prisma.WorkingDaysWhereUniqueInput | Prisma.WorkingDaysWhereUniqueInput[];
};

export type WorkingDaysUncheckedCreateNestedManyWithoutDoctorInput = {
    create?:
        | Prisma.XOR<Prisma.WorkingDaysCreateWithoutDoctorInput, Prisma.WorkingDaysUncheckedCreateWithoutDoctorInput>
        | Prisma.WorkingDaysCreateWithoutDoctorInput[]
        | Prisma.WorkingDaysUncheckedCreateWithoutDoctorInput[];
    connectOrCreate?:
        | Prisma.WorkingDaysCreateOrConnectWithoutDoctorInput
        | Prisma.WorkingDaysCreateOrConnectWithoutDoctorInput[];
    createMany?: Prisma.WorkingDaysCreateManyDoctorInputEnvelope;
    connect?: Prisma.WorkingDaysWhereUniqueInput | Prisma.WorkingDaysWhereUniqueInput[];
};

export type WorkingDaysUpdateManyWithoutDoctorNestedInput = {
    create?:
        | Prisma.XOR<Prisma.WorkingDaysCreateWithoutDoctorInput, Prisma.WorkingDaysUncheckedCreateWithoutDoctorInput>
        | Prisma.WorkingDaysCreateWithoutDoctorInput[]
        | Prisma.WorkingDaysUncheckedCreateWithoutDoctorInput[];
    connectOrCreate?:
        | Prisma.WorkingDaysCreateOrConnectWithoutDoctorInput
        | Prisma.WorkingDaysCreateOrConnectWithoutDoctorInput[];
    upsert?:
        | Prisma.WorkingDaysUpsertWithWhereUniqueWithoutDoctorInput
        | Prisma.WorkingDaysUpsertWithWhereUniqueWithoutDoctorInput[];
    createMany?: Prisma.WorkingDaysCreateManyDoctorInputEnvelope;
    set?: Prisma.WorkingDaysWhereUniqueInput | Prisma.WorkingDaysWhereUniqueInput[];
    disconnect?: Prisma.WorkingDaysWhereUniqueInput | Prisma.WorkingDaysWhereUniqueInput[];
    delete?: Prisma.WorkingDaysWhereUniqueInput | Prisma.WorkingDaysWhereUniqueInput[];
    connect?: Prisma.WorkingDaysWhereUniqueInput | Prisma.WorkingDaysWhereUniqueInput[];
    update?:
        | Prisma.WorkingDaysUpdateWithWhereUniqueWithoutDoctorInput
        | Prisma.WorkingDaysUpdateWithWhereUniqueWithoutDoctorInput[];
    updateMany?:
        | Prisma.WorkingDaysUpdateManyWithWhereWithoutDoctorInput
        | Prisma.WorkingDaysUpdateManyWithWhereWithoutDoctorInput[];
    deleteMany?: Prisma.WorkingDaysScalarWhereInput | Prisma.WorkingDaysScalarWhereInput[];
};

export type WorkingDaysUncheckedUpdateManyWithoutDoctorNestedInput = {
    create?:
        | Prisma.XOR<Prisma.WorkingDaysCreateWithoutDoctorInput, Prisma.WorkingDaysUncheckedCreateWithoutDoctorInput>
        | Prisma.WorkingDaysCreateWithoutDoctorInput[]
        | Prisma.WorkingDaysUncheckedCreateWithoutDoctorInput[];
    connectOrCreate?:
        | Prisma.WorkingDaysCreateOrConnectWithoutDoctorInput
        | Prisma.WorkingDaysCreateOrConnectWithoutDoctorInput[];
    upsert?:
        | Prisma.WorkingDaysUpsertWithWhereUniqueWithoutDoctorInput
        | Prisma.WorkingDaysUpsertWithWhereUniqueWithoutDoctorInput[];
    createMany?: Prisma.WorkingDaysCreateManyDoctorInputEnvelope;
    set?: Prisma.WorkingDaysWhereUniqueInput | Prisma.WorkingDaysWhereUniqueInput[];
    disconnect?: Prisma.WorkingDaysWhereUniqueInput | Prisma.WorkingDaysWhereUniqueInput[];
    delete?: Prisma.WorkingDaysWhereUniqueInput | Prisma.WorkingDaysWhereUniqueInput[];
    connect?: Prisma.WorkingDaysWhereUniqueInput | Prisma.WorkingDaysWhereUniqueInput[];
    update?:
        | Prisma.WorkingDaysUpdateWithWhereUniqueWithoutDoctorInput
        | Prisma.WorkingDaysUpdateWithWhereUniqueWithoutDoctorInput[];
    updateMany?:
        | Prisma.WorkingDaysUpdateManyWithWhereWithoutDoctorInput
        | Prisma.WorkingDaysUpdateManyWithWhereWithoutDoctorInput[];
    deleteMany?: Prisma.WorkingDaysScalarWhereInput | Prisma.WorkingDaysScalarWhereInput[];
};

export type IntFieldUpdateOperationsInput = {
    set?: number;
    increment?: number;
    decrement?: number;
    multiply?: number;
    divide?: number;
};

export type WorkingDaysCreateWithoutDoctorInput = {
    day: string;
    startTime: string;
    closeTime: string;
    createdAt?: Date | string;
    updatedAt?: Date | string;
};

export type WorkingDaysUncheckedCreateWithoutDoctorInput = {
    id?: number;
    day: string;
    startTime: string;
    closeTime: string;
    createdAt?: Date | string;
    updatedAt?: Date | string;
};

export type WorkingDaysCreateOrConnectWithoutDoctorInput = {
    where: Prisma.WorkingDaysWhereUniqueInput;
    create: Prisma.XOR<Prisma.WorkingDaysCreateWithoutDoctorInput, Prisma.WorkingDaysUncheckedCreateWithoutDoctorInput>;
};

export type WorkingDaysCreateManyDoctorInputEnvelope = {
    data: Prisma.WorkingDaysCreateManyDoctorInput | Prisma.WorkingDaysCreateManyDoctorInput[];
    skipDuplicates?: boolean;
};

export type WorkingDaysUpsertWithWhereUniqueWithoutDoctorInput = {
    where: Prisma.WorkingDaysWhereUniqueInput;
    update: Prisma.XOR<Prisma.WorkingDaysUpdateWithoutDoctorInput, Prisma.WorkingDaysUncheckedUpdateWithoutDoctorInput>;
    create: Prisma.XOR<Prisma.WorkingDaysCreateWithoutDoctorInput, Prisma.WorkingDaysUncheckedCreateWithoutDoctorInput>;
};

export type WorkingDaysUpdateWithWhereUniqueWithoutDoctorInput = {
    where: Prisma.WorkingDaysWhereUniqueInput;
    data: Prisma.XOR<Prisma.WorkingDaysUpdateWithoutDoctorInput, Prisma.WorkingDaysUncheckedUpdateWithoutDoctorInput>;
};

export type WorkingDaysUpdateManyWithWhereWithoutDoctorInput = {
    where: Prisma.WorkingDaysScalarWhereInput;
    data: Prisma.XOR<
        Prisma.WorkingDaysUpdateManyMutationInput,
        Prisma.WorkingDaysUncheckedUpdateManyWithoutDoctorInput
    >;
};

export type WorkingDaysScalarWhereInput = {
    AND?: Prisma.WorkingDaysScalarWhereInput | Prisma.WorkingDaysScalarWhereInput[];
    OR?: Prisma.WorkingDaysScalarWhereInput[];
    NOT?: Prisma.WorkingDaysScalarWhereInput | Prisma.WorkingDaysScalarWhereInput[];
    id?: Prisma.IntFilter<'WorkingDays'> | number;
    doctorId?: Prisma.StringFilter<'WorkingDays'> | string;
    day?: Prisma.StringFilter<'WorkingDays'> | string;
    startTime?: Prisma.StringFilter<'WorkingDays'> | string;
    closeTime?: Prisma.StringFilter<'WorkingDays'> | string;
    createdAt?: Prisma.DateTimeFilter<'WorkingDays'> | Date | string;
    updatedAt?: Prisma.DateTimeFilter<'WorkingDays'> | Date | string;
};

export type WorkingDaysCreateManyDoctorInput = {
    id?: number;
    day: string;
    startTime: string;
    closeTime: string;
    createdAt?: Date | string;
    updatedAt?: Date | string;
};

export type WorkingDaysUpdateWithoutDoctorInput = {
    day?: Prisma.StringFieldUpdateOperationsInput | string;
    startTime?: Prisma.StringFieldUpdateOperationsInput | string;
    closeTime?: Prisma.StringFieldUpdateOperationsInput | string;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type WorkingDaysUncheckedUpdateWithoutDoctorInput = {
    id?: Prisma.IntFieldUpdateOperationsInput | number;
    day?: Prisma.StringFieldUpdateOperationsInput | string;
    startTime?: Prisma.StringFieldUpdateOperationsInput | string;
    closeTime?: Prisma.StringFieldUpdateOperationsInput | string;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type WorkingDaysUncheckedUpdateManyWithoutDoctorInput = {
    id?: Prisma.IntFieldUpdateOperationsInput | number;
    day?: Prisma.StringFieldUpdateOperationsInput | string;
    startTime?: Prisma.StringFieldUpdateOperationsInput | string;
    closeTime?: Prisma.StringFieldUpdateOperationsInput | string;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type WorkingDaysSelect<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
    {
        id?: boolean;
        doctorId?: boolean;
        day?: boolean;
        startTime?: boolean;
        closeTime?: boolean;
        createdAt?: boolean;
        updatedAt?: boolean;
        doctor?: boolean | Prisma.DoctorDefaultArgs<ExtArgs>;
    },
    ExtArgs['result']['workingDays']
>;

export type WorkingDaysSelectCreateManyAndReturn<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
    {
        id?: boolean;
        doctorId?: boolean;
        day?: boolean;
        startTime?: boolean;
        closeTime?: boolean;
        createdAt?: boolean;
        updatedAt?: boolean;
        doctor?: boolean | Prisma.DoctorDefaultArgs<ExtArgs>;
    },
    ExtArgs['result']['workingDays']
>;

export type WorkingDaysSelectUpdateManyAndReturn<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
    {
        id?: boolean;
        doctorId?: boolean;
        day?: boolean;
        startTime?: boolean;
        closeTime?: boolean;
        createdAt?: boolean;
        updatedAt?: boolean;
        doctor?: boolean | Prisma.DoctorDefaultArgs<ExtArgs>;
    },
    ExtArgs['result']['workingDays']
>;

export type WorkingDaysSelectScalar = {
    id?: boolean;
    doctorId?: boolean;
    day?: boolean;
    startTime?: boolean;
    closeTime?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
};

export type WorkingDaysOmit<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetOmit<
    'id' | 'doctorId' | 'day' | 'startTime' | 'closeTime' | 'createdAt' | 'updatedAt',
    ExtArgs['result']['workingDays']
>;
export type WorkingDaysInclude<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    doctor?: boolean | Prisma.DoctorDefaultArgs<ExtArgs>;
};
export type WorkingDaysIncludeCreateManyAndReturn<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    doctor?: boolean | Prisma.DoctorDefaultArgs<ExtArgs>;
};
export type WorkingDaysIncludeUpdateManyAndReturn<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    doctor?: boolean | Prisma.DoctorDefaultArgs<ExtArgs>;
};

export type $WorkingDaysPayload<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    name: 'WorkingDays';
    objects: {
        doctor: Prisma.$DoctorPayload<ExtArgs>;
    };
    scalars: runtime.Types.Extensions.GetPayloadResult<
        {
            id: number;
            doctorId: string;
            day: string;
            startTime: string;
            closeTime: string;
            createdAt: Date;
            updatedAt: Date;
        },
        ExtArgs['result']['workingDays']
    >;
    composites: {};
};

export type WorkingDaysGetPayload<S extends boolean | null | undefined | WorkingDaysDefaultArgs> =
    runtime.Types.Result.GetResult<Prisma.$WorkingDaysPayload, S>;

export type WorkingDaysCountArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = Omit<WorkingDaysFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: WorkingDaysCountAggregateInputType | true;
};

export interface WorkingDaysDelegate<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
    GlobalOmitOptions = {}
> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WorkingDays']; meta: { name: 'WorkingDays' } };
    /**
     * Find zero or one WorkingDays that matches the filter.
     * @param {WorkingDaysFindUniqueArgs} args - Arguments to find a WorkingDays
     * @example
     * // Get one WorkingDays
     * const workingDays = await prisma.workingDays.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WorkingDaysFindUniqueArgs>(
        args: Prisma.SelectSubset<T, WorkingDaysFindUniqueArgs<ExtArgs>>
    ): Prisma.Prisma__WorkingDaysClient<
        runtime.Types.Result.GetResult<Prisma.$WorkingDaysPayload<ExtArgs>, T, 'findUnique', GlobalOmitOptions> | null,
        null,
        ExtArgs,
        GlobalOmitOptions
    >;

    /**
     * Find one WorkingDays that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {WorkingDaysFindUniqueOrThrowArgs} args - Arguments to find a WorkingDays
     * @example
     * // Get one WorkingDays
     * const workingDays = await prisma.workingDays.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WorkingDaysFindUniqueOrThrowArgs>(
        args: Prisma.SelectSubset<T, WorkingDaysFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma.Prisma__WorkingDaysClient<
        runtime.Types.Result.GetResult<Prisma.$WorkingDaysPayload<ExtArgs>, T, 'findUniqueOrThrow', GlobalOmitOptions>,
        never,
        ExtArgs,
        GlobalOmitOptions
    >;

    /**
     * Find the first WorkingDays that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkingDaysFindFirstArgs} args - Arguments to find a WorkingDays
     * @example
     * // Get one WorkingDays
     * const workingDays = await prisma.workingDays.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WorkingDaysFindFirstArgs>(
        args?: Prisma.SelectSubset<T, WorkingDaysFindFirstArgs<ExtArgs>>
    ): Prisma.Prisma__WorkingDaysClient<
        runtime.Types.Result.GetResult<Prisma.$WorkingDaysPayload<ExtArgs>, T, 'findFirst', GlobalOmitOptions> | null,
        null,
        ExtArgs,
        GlobalOmitOptions
    >;

    /**
     * Find the first WorkingDays that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkingDaysFindFirstOrThrowArgs} args - Arguments to find a WorkingDays
     * @example
     * // Get one WorkingDays
     * const workingDays = await prisma.workingDays.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WorkingDaysFindFirstOrThrowArgs>(
        args?: Prisma.SelectSubset<T, WorkingDaysFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma.Prisma__WorkingDaysClient<
        runtime.Types.Result.GetResult<Prisma.$WorkingDaysPayload<ExtArgs>, T, 'findFirstOrThrow', GlobalOmitOptions>,
        never,
        ExtArgs,
        GlobalOmitOptions
    >;

    /**
     * Find zero or more WorkingDays that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkingDaysFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WorkingDays
     * const workingDays = await prisma.workingDays.findMany()
     *
     * // Get first 10 WorkingDays
     * const workingDays = await prisma.workingDays.findMany({ take: 10 })
     *
     * // Only select the `id`
     * const workingDaysWithIdOnly = await prisma.workingDays.findMany({ select: { id: true } })
     *
     */
    findMany<T extends WorkingDaysFindManyArgs>(
        args?: Prisma.SelectSubset<T, WorkingDaysFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<
        runtime.Types.Result.GetResult<Prisma.$WorkingDaysPayload<ExtArgs>, T, 'findMany', GlobalOmitOptions>
    >;

    /**
     * Create a WorkingDays.
     * @param {WorkingDaysCreateArgs} args - Arguments to create a WorkingDays.
     * @example
     * // Create one WorkingDays
     * const WorkingDays = await prisma.workingDays.create({
     *   data: {
     *     // ... data to create a WorkingDays
     *   }
     * })
     *
     */
    create<T extends WorkingDaysCreateArgs>(
        args: Prisma.SelectSubset<T, WorkingDaysCreateArgs<ExtArgs>>
    ): Prisma.Prisma__WorkingDaysClient<
        runtime.Types.Result.GetResult<Prisma.$WorkingDaysPayload<ExtArgs>, T, 'create', GlobalOmitOptions>,
        never,
        ExtArgs,
        GlobalOmitOptions
    >;

    /**
     * Create many WorkingDays.
     * @param {WorkingDaysCreateManyArgs} args - Arguments to create many WorkingDays.
     * @example
     * // Create many WorkingDays
     * const workingDays = await prisma.workingDays.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     */
    createMany<T extends WorkingDaysCreateManyArgs>(
        args?: Prisma.SelectSubset<T, WorkingDaysCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<Prisma.BatchPayload>;

    /**
     * Create many WorkingDays and returns the data saved in the database.
     * @param {WorkingDaysCreateManyAndReturnArgs} args - Arguments to create many WorkingDays.
     * @example
     * // Create many WorkingDays
     * const workingDays = await prisma.workingDays.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     * // Create many WorkingDays and only return the `id`
     * const workingDaysWithIdOnly = await prisma.workingDays.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     *
     */
    createManyAndReturn<T extends WorkingDaysCreateManyAndReturnArgs>(
        args?: Prisma.SelectSubset<T, WorkingDaysCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<
        runtime.Types.Result.GetResult<Prisma.$WorkingDaysPayload<ExtArgs>, T, 'createManyAndReturn', GlobalOmitOptions>
    >;

    /**
     * Delete a WorkingDays.
     * @param {WorkingDaysDeleteArgs} args - Arguments to delete one WorkingDays.
     * @example
     * // Delete one WorkingDays
     * const WorkingDays = await prisma.workingDays.delete({
     *   where: {
     *     // ... filter to delete one WorkingDays
     *   }
     * })
     *
     */
    delete<T extends WorkingDaysDeleteArgs>(
        args: Prisma.SelectSubset<T, WorkingDaysDeleteArgs<ExtArgs>>
    ): Prisma.Prisma__WorkingDaysClient<
        runtime.Types.Result.GetResult<Prisma.$WorkingDaysPayload<ExtArgs>, T, 'delete', GlobalOmitOptions>,
        never,
        ExtArgs,
        GlobalOmitOptions
    >;

    /**
     * Update one WorkingDays.
     * @param {WorkingDaysUpdateArgs} args - Arguments to update one WorkingDays.
     * @example
     * // Update one WorkingDays
     * const workingDays = await prisma.workingDays.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     */
    update<T extends WorkingDaysUpdateArgs>(
        args: Prisma.SelectSubset<T, WorkingDaysUpdateArgs<ExtArgs>>
    ): Prisma.Prisma__WorkingDaysClient<
        runtime.Types.Result.GetResult<Prisma.$WorkingDaysPayload<ExtArgs>, T, 'update', GlobalOmitOptions>,
        never,
        ExtArgs,
        GlobalOmitOptions
    >;

    /**
     * Delete zero or more WorkingDays.
     * @param {WorkingDaysDeleteManyArgs} args - Arguments to filter WorkingDays to delete.
     * @example
     * // Delete a few WorkingDays
     * const { count } = await prisma.workingDays.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     *
     */
    deleteMany<T extends WorkingDaysDeleteManyArgs>(
        args?: Prisma.SelectSubset<T, WorkingDaysDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<Prisma.BatchPayload>;

    /**
     * Update zero or more WorkingDays.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkingDaysUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WorkingDays
     * const workingDays = await prisma.workingDays.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     */
    updateMany<T extends WorkingDaysUpdateManyArgs>(
        args: Prisma.SelectSubset<T, WorkingDaysUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<Prisma.BatchPayload>;

    /**
     * Update zero or more WorkingDays and returns the data updated in the database.
     * @param {WorkingDaysUpdateManyAndReturnArgs} args - Arguments to update many WorkingDays.
     * @example
     * // Update many WorkingDays
     * const workingDays = await prisma.workingDays.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     * // Update zero or more WorkingDays and only return the `id`
     * const workingDaysWithIdOnly = await prisma.workingDays.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     *
     */
    updateManyAndReturn<T extends WorkingDaysUpdateManyAndReturnArgs>(
        args: Prisma.SelectSubset<T, WorkingDaysUpdateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<
        runtime.Types.Result.GetResult<Prisma.$WorkingDaysPayload<ExtArgs>, T, 'updateManyAndReturn', GlobalOmitOptions>
    >;

    /**
     * Create or update one WorkingDays.
     * @param {WorkingDaysUpsertArgs} args - Arguments to update or create a WorkingDays.
     * @example
     * // Update or create a WorkingDays
     * const workingDays = await prisma.workingDays.upsert({
     *   create: {
     *     // ... data to create a WorkingDays
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WorkingDays we want to update
     *   }
     * })
     */
    upsert<T extends WorkingDaysUpsertArgs>(
        args: Prisma.SelectSubset<T, WorkingDaysUpsertArgs<ExtArgs>>
    ): Prisma.Prisma__WorkingDaysClient<
        runtime.Types.Result.GetResult<Prisma.$WorkingDaysPayload<ExtArgs>, T, 'upsert', GlobalOmitOptions>,
        never,
        ExtArgs,
        GlobalOmitOptions
    >;

    /**
     * Count the number of WorkingDays.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkingDaysCountArgs} args - Arguments to filter WorkingDays to count.
     * @example
     * // Count the number of WorkingDays
     * const count = await prisma.workingDays.count({
     *   where: {
     *     // ... the filter for the WorkingDays we want to count
     *   }
     * })
     **/
    count<T extends WorkingDaysCountArgs>(
        args?: Prisma.Subset<T, WorkingDaysCountArgs>
    ): Prisma.PrismaPromise<
        T extends runtime.Types.Utils.Record<'select', any>
            ? T['select'] extends true
                ? number
                : Prisma.GetScalarType<T['select'], WorkingDaysCountAggregateOutputType>
            : number
    >;

    /**
     * Allows you to perform aggregations operations on a WorkingDays.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkingDaysAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
     **/
    aggregate<T extends WorkingDaysAggregateArgs>(
        args: Prisma.Subset<T, WorkingDaysAggregateArgs>
    ): Prisma.PrismaPromise<GetWorkingDaysAggregateType<T>>;

    /**
     * Group by WorkingDays.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkingDaysGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     *
     **/
    groupBy<
        T extends WorkingDaysGroupByArgs,
        HasSelectOrTake extends Prisma.Or<
            Prisma.Extends<'skip', Prisma.Keys<T>>,
            Prisma.Extends<'take', Prisma.Keys<T>>
        >,
        OrderByArg extends Prisma.True extends HasSelectOrTake
            ? { orderBy: WorkingDaysGroupByArgs['orderBy'] }
            : { orderBy?: WorkingDaysGroupByArgs['orderBy'] },
        OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
        ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
        ByValid extends Prisma.Has<ByFields, OrderFields>,
        HavingFields extends Prisma.GetHavingFields<T['having']>,
        HavingValid extends Prisma.Has<ByFields, HavingFields>,
        ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
        InputErrors extends ByEmpty extends Prisma.True
            ? `Error: "by" must not be empty.`
            : HavingValid extends Prisma.False
              ? {
                    [P in HavingFields]: P extends ByFields
                        ? never
                        : P extends string
                          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                          : [Error, 'Field ', P, ` in "having" needs to be provided in "by"`];
                }[HavingFields]
              : 'take' extends Prisma.Keys<T>
                ? 'orderBy' extends Prisma.Keys<T>
                    ? ByValid extends Prisma.True
                        ? {}
                        : {
                              [P in OrderFields]: P extends ByFields
                                  ? never
                                  : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                          }[OrderFields]
                    : 'Error: If you provide "take", you also need to provide "orderBy"'
                : 'skip' extends Prisma.Keys<T>
                  ? 'orderBy' extends Prisma.Keys<T>
                      ? ByValid extends Prisma.True
                          ? {}
                          : {
                                [P in OrderFields]: P extends ByFields
                                    ? never
                                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                            }[OrderFields]
                      : 'Error: If you provide "skip", you also need to provide "orderBy"'
                  : ByValid extends Prisma.True
                    ? {}
                    : {
                          [P in OrderFields]: P extends ByFields
                              ? never
                              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                      }[OrderFields]
    >(
        args: Prisma.SubsetIntersection<T, WorkingDaysGroupByArgs, OrderByArg> & InputErrors
    ): {} extends InputErrors ? GetWorkingDaysGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>;
    /**
     * Fields of the WorkingDays model
     */
    readonly fields: WorkingDaysFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for WorkingDays.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__WorkingDaysClient<
    T,
    Null = never,
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
    GlobalOmitOptions = {}
> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    doctor<T extends Prisma.DoctorDefaultArgs<ExtArgs> = {}>(
        args?: Prisma.Subset<T, Prisma.DoctorDefaultArgs<ExtArgs>>
    ): Prisma.Prisma__DoctorClient<
        | runtime.Types.Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, 'findUniqueOrThrow', GlobalOmitOptions>
        | Null,
        Null,
        ExtArgs,
        GlobalOmitOptions
    >;
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(
        onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null,
        onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null
    ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(
        onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null
    ): runtime.Types.Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the WorkingDays model
 */
export interface WorkingDaysFieldRefs {
    readonly id: Prisma.FieldRef<'WorkingDays', 'Int'>;
    readonly doctorId: Prisma.FieldRef<'WorkingDays', 'String'>;
    readonly day: Prisma.FieldRef<'WorkingDays', 'String'>;
    readonly startTime: Prisma.FieldRef<'WorkingDays', 'String'>;
    readonly closeTime: Prisma.FieldRef<'WorkingDays', 'String'>;
    readonly createdAt: Prisma.FieldRef<'WorkingDays', 'DateTime'>;
    readonly updatedAt: Prisma.FieldRef<'WorkingDays', 'DateTime'>;
}

// Custom InputTypes
/**
 * WorkingDays findUnique
 */
export type WorkingDaysFindUniqueArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the WorkingDays
     */
    select?: Prisma.WorkingDaysSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the WorkingDays
     */
    omit?: Prisma.WorkingDaysOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.WorkingDaysInclude<ExtArgs> | null;
    /**
     * Filter, which WorkingDays to fetch.
     */
    where: Prisma.WorkingDaysWhereUniqueInput;
};

/**
 * WorkingDays findUniqueOrThrow
 */
export type WorkingDaysFindUniqueOrThrowArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the WorkingDays
     */
    select?: Prisma.WorkingDaysSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the WorkingDays
     */
    omit?: Prisma.WorkingDaysOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.WorkingDaysInclude<ExtArgs> | null;
    /**
     * Filter, which WorkingDays to fetch.
     */
    where: Prisma.WorkingDaysWhereUniqueInput;
};

/**
 * WorkingDays findFirst
 */
export type WorkingDaysFindFirstArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the WorkingDays
     */
    select?: Prisma.WorkingDaysSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the WorkingDays
     */
    omit?: Prisma.WorkingDaysOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.WorkingDaysInclude<ExtArgs> | null;
    /**
     * Filter, which WorkingDays to fetch.
     */
    where?: Prisma.WorkingDaysWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of WorkingDays to fetch.
     */
    orderBy?: Prisma.WorkingDaysOrderByWithRelationInput | Prisma.WorkingDaysOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for WorkingDays.
     */
    cursor?: Prisma.WorkingDaysWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `Â±n` WorkingDays from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` WorkingDays.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of WorkingDays.
     */
    distinct?: Prisma.WorkingDaysScalarFieldEnum | Prisma.WorkingDaysScalarFieldEnum[];
};

/**
 * WorkingDays findFirstOrThrow
 */
export type WorkingDaysFindFirstOrThrowArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the WorkingDays
     */
    select?: Prisma.WorkingDaysSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the WorkingDays
     */
    omit?: Prisma.WorkingDaysOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.WorkingDaysInclude<ExtArgs> | null;
    /**
     * Filter, which WorkingDays to fetch.
     */
    where?: Prisma.WorkingDaysWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of WorkingDays to fetch.
     */
    orderBy?: Prisma.WorkingDaysOrderByWithRelationInput | Prisma.WorkingDaysOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for WorkingDays.
     */
    cursor?: Prisma.WorkingDaysWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `Â±n` WorkingDays from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` WorkingDays.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of WorkingDays.
     */
    distinct?: Prisma.WorkingDaysScalarFieldEnum | Prisma.WorkingDaysScalarFieldEnum[];
};

/**
 * WorkingDays findMany
 */
export type WorkingDaysFindManyArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the WorkingDays
     */
    select?: Prisma.WorkingDaysSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the WorkingDays
     */
    omit?: Prisma.WorkingDaysOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.WorkingDaysInclude<ExtArgs> | null;
    /**
     * Filter, which WorkingDays to fetch.
     */
    where?: Prisma.WorkingDaysWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of WorkingDays to fetch.
     */
    orderBy?: Prisma.WorkingDaysOrderByWithRelationInput | Prisma.WorkingDaysOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for listing WorkingDays.
     */
    cursor?: Prisma.WorkingDaysWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `Â±n` WorkingDays from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` WorkingDays.
     */
    skip?: number;
    distinct?: Prisma.WorkingDaysScalarFieldEnum | Prisma.WorkingDaysScalarFieldEnum[];
};

/**
 * WorkingDays create
 */
export type WorkingDaysCreateArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the WorkingDays
     */
    select?: Prisma.WorkingDaysSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the WorkingDays
     */
    omit?: Prisma.WorkingDaysOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.WorkingDaysInclude<ExtArgs> | null;
    /**
     * The data needed to create a WorkingDays.
     */
    data: Prisma.XOR<Prisma.WorkingDaysCreateInput, Prisma.WorkingDaysUncheckedCreateInput>;
};

/**
 * WorkingDays createMany
 */
export type WorkingDaysCreateManyArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * The data used to create many WorkingDays.
     */
    data: Prisma.WorkingDaysCreateManyInput | Prisma.WorkingDaysCreateManyInput[];
    skipDuplicates?: boolean;
};

/**
 * WorkingDays createManyAndReturn
 */
export type WorkingDaysCreateManyAndReturnArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the WorkingDays
     */
    select?: Prisma.WorkingDaysSelectCreateManyAndReturn<ExtArgs> | null;
    /**
     * Omit specific fields from the WorkingDays
     */
    omit?: Prisma.WorkingDaysOmit<ExtArgs> | null;
    /**
     * The data used to create many WorkingDays.
     */
    data: Prisma.WorkingDaysCreateManyInput | Prisma.WorkingDaysCreateManyInput[];
    skipDuplicates?: boolean;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.WorkingDaysIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * WorkingDays update
 */
export type WorkingDaysUpdateArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the WorkingDays
     */
    select?: Prisma.WorkingDaysSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the WorkingDays
     */
    omit?: Prisma.WorkingDaysOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.WorkingDaysInclude<ExtArgs> | null;
    /**
     * The data needed to update a WorkingDays.
     */
    data: Prisma.XOR<Prisma.WorkingDaysUpdateInput, Prisma.WorkingDaysUncheckedUpdateInput>;
    /**
     * Choose, which WorkingDays to update.
     */
    where: Prisma.WorkingDaysWhereUniqueInput;
};

/**
 * WorkingDays updateMany
 */
export type WorkingDaysUpdateManyArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * The data used to update WorkingDays.
     */
    data: Prisma.XOR<Prisma.WorkingDaysUpdateManyMutationInput, Prisma.WorkingDaysUncheckedUpdateManyInput>;
    /**
     * Filter which WorkingDays to update
     */
    where?: Prisma.WorkingDaysWhereInput;
    /**
     * Limit how many WorkingDays to update.
     */
    limit?: number;
};

/**
 * WorkingDays updateManyAndReturn
 */
export type WorkingDaysUpdateManyAndReturnArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the WorkingDays
     */
    select?: Prisma.WorkingDaysSelectUpdateManyAndReturn<ExtArgs> | null;
    /**
     * Omit specific fields from the WorkingDays
     */
    omit?: Prisma.WorkingDaysOmit<ExtArgs> | null;
    /**
     * The data used to update WorkingDays.
     */
    data: Prisma.XOR<Prisma.WorkingDaysUpdateManyMutationInput, Prisma.WorkingDaysUncheckedUpdateManyInput>;
    /**
     * Filter which WorkingDays to update
     */
    where?: Prisma.WorkingDaysWhereInput;
    /**
     * Limit how many WorkingDays to update.
     */
    limit?: number;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.WorkingDaysIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * WorkingDays upsert
 */
export type WorkingDaysUpsertArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the WorkingDays
     */
    select?: Prisma.WorkingDaysSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the WorkingDays
     */
    omit?: Prisma.WorkingDaysOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.WorkingDaysInclude<ExtArgs> | null;
    /**
     * The filter to search for the WorkingDays to update in case it exists.
     */
    where: Prisma.WorkingDaysWhereUniqueInput;
    /**
     * In case the WorkingDays found by the `where` argument doesn't exist, create a new WorkingDays with this data.
     */
    create: Prisma.XOR<Prisma.WorkingDaysCreateInput, Prisma.WorkingDaysUncheckedCreateInput>;
    /**
     * In case the WorkingDays was found with the provided `where` argument, update it with this data.
     */
    update: Prisma.XOR<Prisma.WorkingDaysUpdateInput, Prisma.WorkingDaysUncheckedUpdateInput>;
};

/**
 * WorkingDays delete
 */
export type WorkingDaysDeleteArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the WorkingDays
     */
    select?: Prisma.WorkingDaysSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the WorkingDays
     */
    omit?: Prisma.WorkingDaysOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.WorkingDaysInclude<ExtArgs> | null;
    /**
     * Filter which WorkingDays to delete.
     */
    where: Prisma.WorkingDaysWhereUniqueInput;
};

/**
 * WorkingDays deleteMany
 */
export type WorkingDaysDeleteManyArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Filter which WorkingDays to delete
     */
    where?: Prisma.WorkingDaysWhereInput;
    /**
     * Limit how many WorkingDays to delete.
     */
    limit?: number;
};

/**
 * WorkingDays without action
 */
export type WorkingDaysDefaultArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the WorkingDays
     */
    select?: Prisma.WorkingDaysSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the WorkingDays
     */
    omit?: Prisma.WorkingDaysOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.WorkingDaysInclude<ExtArgs> | null;
};
