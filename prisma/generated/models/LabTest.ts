/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/**
 * This file exports the `LabTest` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from '@prisma/client/runtime/library';
import type * as $Enums from '../enums';
import type * as Prisma from '../internal/prismaNamespace';

/**
 * Model LabTest
 *
 */
export type LabTestModel = runtime.Types.Result.DefaultSelection<Prisma.$LabTestPayload>;

export type AggregateLabTest = {
    _count: LabTestCountAggregateOutputType | null;
    _avg: LabTestAvgAggregateOutputType | null;
    _sum: LabTestSumAggregateOutputType | null;
    _min: LabTestMinAggregateOutputType | null;
    _max: LabTestMaxAggregateOutputType | null;
};

export type LabTestAvgAggregateOutputType = {
    id: number | null;
    recordId: number | null;
    serviceId: number | null;
};

export type LabTestSumAggregateOutputType = {
    id: number | null;
    recordId: number | null;
    serviceId: number | null;
};

export type LabTestMinAggregateOutputType = {
    id: number | null;
    recordId: number | null;
    testDate: Date | null;
    result: string | null;
    status: string | null;
    notes: string | null;
    serviceId: number | null;
    createdAt: Date | null;
    updatedAt: Date | null;
};

export type LabTestMaxAggregateOutputType = {
    id: number | null;
    recordId: number | null;
    testDate: Date | null;
    result: string | null;
    status: string | null;
    notes: string | null;
    serviceId: number | null;
    createdAt: Date | null;
    updatedAt: Date | null;
};

export type LabTestCountAggregateOutputType = {
    id: number;
    recordId: number;
    testDate: number;
    result: number;
    status: number;
    notes: number;
    serviceId: number;
    createdAt: number;
    updatedAt: number;
    _all: number;
};

export type LabTestAvgAggregateInputType = {
    id?: true;
    recordId?: true;
    serviceId?: true;
};

export type LabTestSumAggregateInputType = {
    id?: true;
    recordId?: true;
    serviceId?: true;
};

export type LabTestMinAggregateInputType = {
    id?: true;
    recordId?: true;
    testDate?: true;
    result?: true;
    status?: true;
    notes?: true;
    serviceId?: true;
    createdAt?: true;
    updatedAt?: true;
};

export type LabTestMaxAggregateInputType = {
    id?: true;
    recordId?: true;
    testDate?: true;
    result?: true;
    status?: true;
    notes?: true;
    serviceId?: true;
    createdAt?: true;
    updatedAt?: true;
};

export type LabTestCountAggregateInputType = {
    id?: true;
    recordId?: true;
    testDate?: true;
    result?: true;
    status?: true;
    notes?: true;
    serviceId?: true;
    createdAt?: true;
    updatedAt?: true;
    _all?: true;
};

export type LabTestAggregateArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Filter which LabTest to aggregate.
     */
    where?: Prisma.LabTestWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of LabTests to fetch.
     */
    orderBy?: Prisma.LabTestOrderByWithRelationInput | Prisma.LabTestOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the start position
     */
    cursor?: Prisma.LabTestWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `Â±n` LabTests from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` LabTests.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Count returned LabTests
     **/
    _count?: true | LabTestCountAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to average
     **/
    _avg?: LabTestAvgAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to sum
     **/
    _sum?: LabTestSumAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the minimum value
     **/
    _min?: LabTestMinAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the maximum value
     **/
    _max?: LabTestMaxAggregateInputType;
};

export type GetLabTestAggregateType<T extends LabTestAggregateArgs> = {
    [P in keyof T & keyof AggregateLabTest]: P extends '_count' | 'count'
        ? T[P] extends true
            ? number
            : Prisma.GetScalarType<T[P], AggregateLabTest[P]>
        : Prisma.GetScalarType<T[P], AggregateLabTest[P]>;
};

export type LabTestGroupByArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    where?: Prisma.LabTestWhereInput;
    orderBy?: Prisma.LabTestOrderByWithAggregationInput | Prisma.LabTestOrderByWithAggregationInput[];
    by: Prisma.LabTestScalarFieldEnum[] | Prisma.LabTestScalarFieldEnum;
    having?: Prisma.LabTestScalarWhereWithAggregatesInput;
    take?: number;
    skip?: number;
    _count?: LabTestCountAggregateInputType | true;
    _avg?: LabTestAvgAggregateInputType;
    _sum?: LabTestSumAggregateInputType;
    _min?: LabTestMinAggregateInputType;
    _max?: LabTestMaxAggregateInputType;
};

export type LabTestGroupByOutputType = {
    id: number;
    recordId: number;
    testDate: Date;
    result: string;
    status: string;
    notes: string | null;
    serviceId: number | null;
    createdAt: Date;
    updatedAt: Date;
    _count: LabTestCountAggregateOutputType | null;
    _avg: LabTestAvgAggregateOutputType | null;
    _sum: LabTestSumAggregateOutputType | null;
    _min: LabTestMinAggregateOutputType | null;
    _max: LabTestMaxAggregateOutputType | null;
};

type GetLabTestGroupByPayload<T extends LabTestGroupByArgs> = Prisma.PrismaPromise<
    Array<
        Prisma.PickEnumerable<LabTestGroupByOutputType, T['by']> & {
            [P in keyof T & keyof LabTestGroupByOutputType]: P extends '_count'
                ? T[P] extends boolean
                    ? number
                    : Prisma.GetScalarType<T[P], LabTestGroupByOutputType[P]>
                : Prisma.GetScalarType<T[P], LabTestGroupByOutputType[P]>;
        }
    >
>;

export type LabTestWhereInput = {
    AND?: Prisma.LabTestWhereInput | Prisma.LabTestWhereInput[];
    OR?: Prisma.LabTestWhereInput[];
    NOT?: Prisma.LabTestWhereInput | Prisma.LabTestWhereInput[];
    id?: Prisma.IntFilter<'LabTest'> | number;
    recordId?: Prisma.IntFilter<'LabTest'> | number;
    testDate?: Prisma.DateTimeFilter<'LabTest'> | Date | string;
    result?: Prisma.StringFilter<'LabTest'> | string;
    status?: Prisma.StringFilter<'LabTest'> | string;
    notes?: Prisma.StringNullableFilter<'LabTest'> | string | null;
    serviceId?: Prisma.IntNullableFilter<'LabTest'> | number | null;
    createdAt?: Prisma.DateTimeFilter<'LabTest'> | Date | string;
    updatedAt?: Prisma.DateTimeFilter<'LabTest'> | Date | string;
    services?: Prisma.XOR<Prisma.ServicesNullableScalarRelationFilter, Prisma.ServicesWhereInput> | null;
    medicalRecord?: Prisma.XOR<Prisma.MedicalRecordsScalarRelationFilter, Prisma.MedicalRecordsWhereInput>;
};

export type LabTestOrderByWithRelationInput = {
    id?: Prisma.SortOrder;
    recordId?: Prisma.SortOrder;
    testDate?: Prisma.SortOrder;
    result?: Prisma.SortOrder;
    status?: Prisma.SortOrder;
    notes?: Prisma.SortOrderInput | Prisma.SortOrder;
    serviceId?: Prisma.SortOrderInput | Prisma.SortOrder;
    createdAt?: Prisma.SortOrder;
    updatedAt?: Prisma.SortOrder;
    services?: Prisma.ServicesOrderByWithRelationInput;
    medicalRecord?: Prisma.MedicalRecordsOrderByWithRelationInput;
};

export type LabTestWhereUniqueInput = Prisma.AtLeast<
    {
        id?: number;
        AND?: Prisma.LabTestWhereInput | Prisma.LabTestWhereInput[];
        OR?: Prisma.LabTestWhereInput[];
        NOT?: Prisma.LabTestWhereInput | Prisma.LabTestWhereInput[];
        recordId?: Prisma.IntFilter<'LabTest'> | number;
        testDate?: Prisma.DateTimeFilter<'LabTest'> | Date | string;
        result?: Prisma.StringFilter<'LabTest'> | string;
        status?: Prisma.StringFilter<'LabTest'> | string;
        notes?: Prisma.StringNullableFilter<'LabTest'> | string | null;
        serviceId?: Prisma.IntNullableFilter<'LabTest'> | number | null;
        createdAt?: Prisma.DateTimeFilter<'LabTest'> | Date | string;
        updatedAt?: Prisma.DateTimeFilter<'LabTest'> | Date | string;
        services?: Prisma.XOR<Prisma.ServicesNullableScalarRelationFilter, Prisma.ServicesWhereInput> | null;
        medicalRecord?: Prisma.XOR<Prisma.MedicalRecordsScalarRelationFilter, Prisma.MedicalRecordsWhereInput>;
    },
    'id'
>;

export type LabTestOrderByWithAggregationInput = {
    id?: Prisma.SortOrder;
    recordId?: Prisma.SortOrder;
    testDate?: Prisma.SortOrder;
    result?: Prisma.SortOrder;
    status?: Prisma.SortOrder;
    notes?: Prisma.SortOrderInput | Prisma.SortOrder;
    serviceId?: Prisma.SortOrderInput | Prisma.SortOrder;
    createdAt?: Prisma.SortOrder;
    updatedAt?: Prisma.SortOrder;
    _count?: Prisma.LabTestCountOrderByAggregateInput;
    _avg?: Prisma.LabTestAvgOrderByAggregateInput;
    _max?: Prisma.LabTestMaxOrderByAggregateInput;
    _min?: Prisma.LabTestMinOrderByAggregateInput;
    _sum?: Prisma.LabTestSumOrderByAggregateInput;
};

export type LabTestScalarWhereWithAggregatesInput = {
    AND?: Prisma.LabTestScalarWhereWithAggregatesInput | Prisma.LabTestScalarWhereWithAggregatesInput[];
    OR?: Prisma.LabTestScalarWhereWithAggregatesInput[];
    NOT?: Prisma.LabTestScalarWhereWithAggregatesInput | Prisma.LabTestScalarWhereWithAggregatesInput[];
    id?: Prisma.IntWithAggregatesFilter<'LabTest'> | number;
    recordId?: Prisma.IntWithAggregatesFilter<'LabTest'> | number;
    testDate?: Prisma.DateTimeWithAggregatesFilter<'LabTest'> | Date | string;
    result?: Prisma.StringWithAggregatesFilter<'LabTest'> | string;
    status?: Prisma.StringWithAggregatesFilter<'LabTest'> | string;
    notes?: Prisma.StringNullableWithAggregatesFilter<'LabTest'> | string | null;
    serviceId?: Prisma.IntNullableWithAggregatesFilter<'LabTest'> | number | null;
    createdAt?: Prisma.DateTimeWithAggregatesFilter<'LabTest'> | Date | string;
    updatedAt?: Prisma.DateTimeWithAggregatesFilter<'LabTest'> | Date | string;
};

export type LabTestCreateInput = {
    testDate: Date | string;
    result: string;
    status: string;
    notes?: string | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    services?: Prisma.ServicesCreateNestedOneWithoutLabtestsInput;
    medicalRecord: Prisma.MedicalRecordsCreateNestedOneWithoutLabTestInput;
};

export type LabTestUncheckedCreateInput = {
    id?: number;
    recordId: number;
    testDate: Date | string;
    result: string;
    status: string;
    notes?: string | null;
    serviceId?: number | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
};

export type LabTestUpdateInput = {
    testDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    result?: Prisma.StringFieldUpdateOperationsInput | string;
    status?: Prisma.StringFieldUpdateOperationsInput | string;
    notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    services?: Prisma.ServicesUpdateOneWithoutLabtestsNestedInput;
    medicalRecord?: Prisma.MedicalRecordsUpdateOneRequiredWithoutLabTestNestedInput;
};

export type LabTestUncheckedUpdateInput = {
    id?: Prisma.IntFieldUpdateOperationsInput | number;
    recordId?: Prisma.IntFieldUpdateOperationsInput | number;
    testDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    result?: Prisma.StringFieldUpdateOperationsInput | string;
    status?: Prisma.StringFieldUpdateOperationsInput | string;
    notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    serviceId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type LabTestCreateManyInput = {
    id?: number;
    recordId: number;
    testDate: Date | string;
    result: string;
    status: string;
    notes?: string | null;
    serviceId?: number | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
};

export type LabTestUpdateManyMutationInput = {
    testDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    result?: Prisma.StringFieldUpdateOperationsInput | string;
    status?: Prisma.StringFieldUpdateOperationsInput | string;
    notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type LabTestUncheckedUpdateManyInput = {
    id?: Prisma.IntFieldUpdateOperationsInput | number;
    recordId?: Prisma.IntFieldUpdateOperationsInput | number;
    testDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    result?: Prisma.StringFieldUpdateOperationsInput | string;
    status?: Prisma.StringFieldUpdateOperationsInput | string;
    notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    serviceId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type LabTestCountOrderByAggregateInput = {
    id?: Prisma.SortOrder;
    recordId?: Prisma.SortOrder;
    testDate?: Prisma.SortOrder;
    result?: Prisma.SortOrder;
    status?: Prisma.SortOrder;
    notes?: Prisma.SortOrder;
    serviceId?: Prisma.SortOrder;
    createdAt?: Prisma.SortOrder;
    updatedAt?: Prisma.SortOrder;
};

export type LabTestAvgOrderByAggregateInput = {
    id?: Prisma.SortOrder;
    recordId?: Prisma.SortOrder;
    serviceId?: Prisma.SortOrder;
};

export type LabTestMaxOrderByAggregateInput = {
    id?: Prisma.SortOrder;
    recordId?: Prisma.SortOrder;
    testDate?: Prisma.SortOrder;
    result?: Prisma.SortOrder;
    status?: Prisma.SortOrder;
    notes?: Prisma.SortOrder;
    serviceId?: Prisma.SortOrder;
    createdAt?: Prisma.SortOrder;
    updatedAt?: Prisma.SortOrder;
};

export type LabTestMinOrderByAggregateInput = {
    id?: Prisma.SortOrder;
    recordId?: Prisma.SortOrder;
    testDate?: Prisma.SortOrder;
    result?: Prisma.SortOrder;
    status?: Prisma.SortOrder;
    notes?: Prisma.SortOrder;
    serviceId?: Prisma.SortOrder;
    createdAt?: Prisma.SortOrder;
    updatedAt?: Prisma.SortOrder;
};

export type LabTestSumOrderByAggregateInput = {
    id?: Prisma.SortOrder;
    recordId?: Prisma.SortOrder;
    serviceId?: Prisma.SortOrder;
};

export type LabTestListRelationFilter = {
    every?: Prisma.LabTestWhereInput;
    some?: Prisma.LabTestWhereInput;
    none?: Prisma.LabTestWhereInput;
};

export type LabTestOrderByRelationAggregateInput = {
    _count?: Prisma.SortOrder;
};

export type LabTestCreateNestedManyWithoutMedicalRecordInput = {
    create?:
        | Prisma.XOR<
              Prisma.LabTestCreateWithoutMedicalRecordInput,
              Prisma.LabTestUncheckedCreateWithoutMedicalRecordInput
          >
        | Prisma.LabTestCreateWithoutMedicalRecordInput[]
        | Prisma.LabTestUncheckedCreateWithoutMedicalRecordInput[];
    connectOrCreate?:
        | Prisma.LabTestCreateOrConnectWithoutMedicalRecordInput
        | Prisma.LabTestCreateOrConnectWithoutMedicalRecordInput[];
    createMany?: Prisma.LabTestCreateManyMedicalRecordInputEnvelope;
    connect?: Prisma.LabTestWhereUniqueInput | Prisma.LabTestWhereUniqueInput[];
};

export type LabTestUncheckedCreateNestedManyWithoutMedicalRecordInput = {
    create?:
        | Prisma.XOR<
              Prisma.LabTestCreateWithoutMedicalRecordInput,
              Prisma.LabTestUncheckedCreateWithoutMedicalRecordInput
          >
        | Prisma.LabTestCreateWithoutMedicalRecordInput[]
        | Prisma.LabTestUncheckedCreateWithoutMedicalRecordInput[];
    connectOrCreate?:
        | Prisma.LabTestCreateOrConnectWithoutMedicalRecordInput
        | Prisma.LabTestCreateOrConnectWithoutMedicalRecordInput[];
    createMany?: Prisma.LabTestCreateManyMedicalRecordInputEnvelope;
    connect?: Prisma.LabTestWhereUniqueInput | Prisma.LabTestWhereUniqueInput[];
};

export type LabTestUpdateManyWithoutMedicalRecordNestedInput = {
    create?:
        | Prisma.XOR<
              Prisma.LabTestCreateWithoutMedicalRecordInput,
              Prisma.LabTestUncheckedCreateWithoutMedicalRecordInput
          >
        | Prisma.LabTestCreateWithoutMedicalRecordInput[]
        | Prisma.LabTestUncheckedCreateWithoutMedicalRecordInput[];
    connectOrCreate?:
        | Prisma.LabTestCreateOrConnectWithoutMedicalRecordInput
        | Prisma.LabTestCreateOrConnectWithoutMedicalRecordInput[];
    upsert?:
        | Prisma.LabTestUpsertWithWhereUniqueWithoutMedicalRecordInput
        | Prisma.LabTestUpsertWithWhereUniqueWithoutMedicalRecordInput[];
    createMany?: Prisma.LabTestCreateManyMedicalRecordInputEnvelope;
    set?: Prisma.LabTestWhereUniqueInput | Prisma.LabTestWhereUniqueInput[];
    disconnect?: Prisma.LabTestWhereUniqueInput | Prisma.LabTestWhereUniqueInput[];
    delete?: Prisma.LabTestWhereUniqueInput | Prisma.LabTestWhereUniqueInput[];
    connect?: Prisma.LabTestWhereUniqueInput | Prisma.LabTestWhereUniqueInput[];
    update?:
        | Prisma.LabTestUpdateWithWhereUniqueWithoutMedicalRecordInput
        | Prisma.LabTestUpdateWithWhereUniqueWithoutMedicalRecordInput[];
    updateMany?:
        | Prisma.LabTestUpdateManyWithWhereWithoutMedicalRecordInput
        | Prisma.LabTestUpdateManyWithWhereWithoutMedicalRecordInput[];
    deleteMany?: Prisma.LabTestScalarWhereInput | Prisma.LabTestScalarWhereInput[];
};

export type LabTestUncheckedUpdateManyWithoutMedicalRecordNestedInput = {
    create?:
        | Prisma.XOR<
              Prisma.LabTestCreateWithoutMedicalRecordInput,
              Prisma.LabTestUncheckedCreateWithoutMedicalRecordInput
          >
        | Prisma.LabTestCreateWithoutMedicalRecordInput[]
        | Prisma.LabTestUncheckedCreateWithoutMedicalRecordInput[];
    connectOrCreate?:
        | Prisma.LabTestCreateOrConnectWithoutMedicalRecordInput
        | Prisma.LabTestCreateOrConnectWithoutMedicalRecordInput[];
    upsert?:
        | Prisma.LabTestUpsertWithWhereUniqueWithoutMedicalRecordInput
        | Prisma.LabTestUpsertWithWhereUniqueWithoutMedicalRecordInput[];
    createMany?: Prisma.LabTestCreateManyMedicalRecordInputEnvelope;
    set?: Prisma.LabTestWhereUniqueInput | Prisma.LabTestWhereUniqueInput[];
    disconnect?: Prisma.LabTestWhereUniqueInput | Prisma.LabTestWhereUniqueInput[];
    delete?: Prisma.LabTestWhereUniqueInput | Prisma.LabTestWhereUniqueInput[];
    connect?: Prisma.LabTestWhereUniqueInput | Prisma.LabTestWhereUniqueInput[];
    update?:
        | Prisma.LabTestUpdateWithWhereUniqueWithoutMedicalRecordInput
        | Prisma.LabTestUpdateWithWhereUniqueWithoutMedicalRecordInput[];
    updateMany?:
        | Prisma.LabTestUpdateManyWithWhereWithoutMedicalRecordInput
        | Prisma.LabTestUpdateManyWithWhereWithoutMedicalRecordInput[];
    deleteMany?: Prisma.LabTestScalarWhereInput | Prisma.LabTestScalarWhereInput[];
};

export type LabTestCreateNestedManyWithoutServicesInput = {
    create?:
        | Prisma.XOR<Prisma.LabTestCreateWithoutServicesInput, Prisma.LabTestUncheckedCreateWithoutServicesInput>
        | Prisma.LabTestCreateWithoutServicesInput[]
        | Prisma.LabTestUncheckedCreateWithoutServicesInput[];
    connectOrCreate?:
        | Prisma.LabTestCreateOrConnectWithoutServicesInput
        | Prisma.LabTestCreateOrConnectWithoutServicesInput[];
    createMany?: Prisma.LabTestCreateManyServicesInputEnvelope;
    connect?: Prisma.LabTestWhereUniqueInput | Prisma.LabTestWhereUniqueInput[];
};

export type LabTestUncheckedCreateNestedManyWithoutServicesInput = {
    create?:
        | Prisma.XOR<Prisma.LabTestCreateWithoutServicesInput, Prisma.LabTestUncheckedCreateWithoutServicesInput>
        | Prisma.LabTestCreateWithoutServicesInput[]
        | Prisma.LabTestUncheckedCreateWithoutServicesInput[];
    connectOrCreate?:
        | Prisma.LabTestCreateOrConnectWithoutServicesInput
        | Prisma.LabTestCreateOrConnectWithoutServicesInput[];
    createMany?: Prisma.LabTestCreateManyServicesInputEnvelope;
    connect?: Prisma.LabTestWhereUniqueInput | Prisma.LabTestWhereUniqueInput[];
};

export type LabTestUpdateManyWithoutServicesNestedInput = {
    create?:
        | Prisma.XOR<Prisma.LabTestCreateWithoutServicesInput, Prisma.LabTestUncheckedCreateWithoutServicesInput>
        | Prisma.LabTestCreateWithoutServicesInput[]
        | Prisma.LabTestUncheckedCreateWithoutServicesInput[];
    connectOrCreate?:
        | Prisma.LabTestCreateOrConnectWithoutServicesInput
        | Prisma.LabTestCreateOrConnectWithoutServicesInput[];
    upsert?:
        | Prisma.LabTestUpsertWithWhereUniqueWithoutServicesInput
        | Prisma.LabTestUpsertWithWhereUniqueWithoutServicesInput[];
    createMany?: Prisma.LabTestCreateManyServicesInputEnvelope;
    set?: Prisma.LabTestWhereUniqueInput | Prisma.LabTestWhereUniqueInput[];
    disconnect?: Prisma.LabTestWhereUniqueInput | Prisma.LabTestWhereUniqueInput[];
    delete?: Prisma.LabTestWhereUniqueInput | Prisma.LabTestWhereUniqueInput[];
    connect?: Prisma.LabTestWhereUniqueInput | Prisma.LabTestWhereUniqueInput[];
    update?:
        | Prisma.LabTestUpdateWithWhereUniqueWithoutServicesInput
        | Prisma.LabTestUpdateWithWhereUniqueWithoutServicesInput[];
    updateMany?:
        | Prisma.LabTestUpdateManyWithWhereWithoutServicesInput
        | Prisma.LabTestUpdateManyWithWhereWithoutServicesInput[];
    deleteMany?: Prisma.LabTestScalarWhereInput | Prisma.LabTestScalarWhereInput[];
};

export type LabTestUncheckedUpdateManyWithoutServicesNestedInput = {
    create?:
        | Prisma.XOR<Prisma.LabTestCreateWithoutServicesInput, Prisma.LabTestUncheckedCreateWithoutServicesInput>
        | Prisma.LabTestCreateWithoutServicesInput[]
        | Prisma.LabTestUncheckedCreateWithoutServicesInput[];
    connectOrCreate?:
        | Prisma.LabTestCreateOrConnectWithoutServicesInput
        | Prisma.LabTestCreateOrConnectWithoutServicesInput[];
    upsert?:
        | Prisma.LabTestUpsertWithWhereUniqueWithoutServicesInput
        | Prisma.LabTestUpsertWithWhereUniqueWithoutServicesInput[];
    createMany?: Prisma.LabTestCreateManyServicesInputEnvelope;
    set?: Prisma.LabTestWhereUniqueInput | Prisma.LabTestWhereUniqueInput[];
    disconnect?: Prisma.LabTestWhereUniqueInput | Prisma.LabTestWhereUniqueInput[];
    delete?: Prisma.LabTestWhereUniqueInput | Prisma.LabTestWhereUniqueInput[];
    connect?: Prisma.LabTestWhereUniqueInput | Prisma.LabTestWhereUniqueInput[];
    update?:
        | Prisma.LabTestUpdateWithWhereUniqueWithoutServicesInput
        | Prisma.LabTestUpdateWithWhereUniqueWithoutServicesInput[];
    updateMany?:
        | Prisma.LabTestUpdateManyWithWhereWithoutServicesInput
        | Prisma.LabTestUpdateManyWithWhereWithoutServicesInput[];
    deleteMany?: Prisma.LabTestScalarWhereInput | Prisma.LabTestScalarWhereInput[];
};

export type LabTestCreateWithoutMedicalRecordInput = {
    testDate: Date | string;
    result: string;
    status: string;
    notes?: string | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    services?: Prisma.ServicesCreateNestedOneWithoutLabtestsInput;
};

export type LabTestUncheckedCreateWithoutMedicalRecordInput = {
    id?: number;
    testDate: Date | string;
    result: string;
    status: string;
    notes?: string | null;
    serviceId?: number | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
};

export type LabTestCreateOrConnectWithoutMedicalRecordInput = {
    where: Prisma.LabTestWhereUniqueInput;
    create: Prisma.XOR<
        Prisma.LabTestCreateWithoutMedicalRecordInput,
        Prisma.LabTestUncheckedCreateWithoutMedicalRecordInput
    >;
};

export type LabTestCreateManyMedicalRecordInputEnvelope = {
    data: Prisma.LabTestCreateManyMedicalRecordInput | Prisma.LabTestCreateManyMedicalRecordInput[];
    skipDuplicates?: boolean;
};

export type LabTestUpsertWithWhereUniqueWithoutMedicalRecordInput = {
    where: Prisma.LabTestWhereUniqueInput;
    update: Prisma.XOR<
        Prisma.LabTestUpdateWithoutMedicalRecordInput,
        Prisma.LabTestUncheckedUpdateWithoutMedicalRecordInput
    >;
    create: Prisma.XOR<
        Prisma.LabTestCreateWithoutMedicalRecordInput,
        Prisma.LabTestUncheckedCreateWithoutMedicalRecordInput
    >;
};

export type LabTestUpdateWithWhereUniqueWithoutMedicalRecordInput = {
    where: Prisma.LabTestWhereUniqueInput;
    data: Prisma.XOR<
        Prisma.LabTestUpdateWithoutMedicalRecordInput,
        Prisma.LabTestUncheckedUpdateWithoutMedicalRecordInput
    >;
};

export type LabTestUpdateManyWithWhereWithoutMedicalRecordInput = {
    where: Prisma.LabTestScalarWhereInput;
    data: Prisma.XOR<Prisma.LabTestUpdateManyMutationInput, Prisma.LabTestUncheckedUpdateManyWithoutMedicalRecordInput>;
};

export type LabTestScalarWhereInput = {
    AND?: Prisma.LabTestScalarWhereInput | Prisma.LabTestScalarWhereInput[];
    OR?: Prisma.LabTestScalarWhereInput[];
    NOT?: Prisma.LabTestScalarWhereInput | Prisma.LabTestScalarWhereInput[];
    id?: Prisma.IntFilter<'LabTest'> | number;
    recordId?: Prisma.IntFilter<'LabTest'> | number;
    testDate?: Prisma.DateTimeFilter<'LabTest'> | Date | string;
    result?: Prisma.StringFilter<'LabTest'> | string;
    status?: Prisma.StringFilter<'LabTest'> | string;
    notes?: Prisma.StringNullableFilter<'LabTest'> | string | null;
    serviceId?: Prisma.IntNullableFilter<'LabTest'> | number | null;
    createdAt?: Prisma.DateTimeFilter<'LabTest'> | Date | string;
    updatedAt?: Prisma.DateTimeFilter<'LabTest'> | Date | string;
};

export type LabTestCreateWithoutServicesInput = {
    testDate: Date | string;
    result: string;
    status: string;
    notes?: string | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    medicalRecord: Prisma.MedicalRecordsCreateNestedOneWithoutLabTestInput;
};

export type LabTestUncheckedCreateWithoutServicesInput = {
    id?: number;
    recordId: number;
    testDate: Date | string;
    result: string;
    status: string;
    notes?: string | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
};

export type LabTestCreateOrConnectWithoutServicesInput = {
    where: Prisma.LabTestWhereUniqueInput;
    create: Prisma.XOR<Prisma.LabTestCreateWithoutServicesInput, Prisma.LabTestUncheckedCreateWithoutServicesInput>;
};

export type LabTestCreateManyServicesInputEnvelope = {
    data: Prisma.LabTestCreateManyServicesInput | Prisma.LabTestCreateManyServicesInput[];
    skipDuplicates?: boolean;
};

export type LabTestUpsertWithWhereUniqueWithoutServicesInput = {
    where: Prisma.LabTestWhereUniqueInput;
    update: Prisma.XOR<Prisma.LabTestUpdateWithoutServicesInput, Prisma.LabTestUncheckedUpdateWithoutServicesInput>;
    create: Prisma.XOR<Prisma.LabTestCreateWithoutServicesInput, Prisma.LabTestUncheckedCreateWithoutServicesInput>;
};

export type LabTestUpdateWithWhereUniqueWithoutServicesInput = {
    where: Prisma.LabTestWhereUniqueInput;
    data: Prisma.XOR<Prisma.LabTestUpdateWithoutServicesInput, Prisma.LabTestUncheckedUpdateWithoutServicesInput>;
};

export type LabTestUpdateManyWithWhereWithoutServicesInput = {
    where: Prisma.LabTestScalarWhereInput;
    data: Prisma.XOR<Prisma.LabTestUpdateManyMutationInput, Prisma.LabTestUncheckedUpdateManyWithoutServicesInput>;
};

export type LabTestCreateManyMedicalRecordInput = {
    id?: number;
    testDate: Date | string;
    result: string;
    status: string;
    notes?: string | null;
    serviceId?: number | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
};

export type LabTestUpdateWithoutMedicalRecordInput = {
    testDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    result?: Prisma.StringFieldUpdateOperationsInput | string;
    status?: Prisma.StringFieldUpdateOperationsInput | string;
    notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    services?: Prisma.ServicesUpdateOneWithoutLabtestsNestedInput;
};

export type LabTestUncheckedUpdateWithoutMedicalRecordInput = {
    id?: Prisma.IntFieldUpdateOperationsInput | number;
    testDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    result?: Prisma.StringFieldUpdateOperationsInput | string;
    status?: Prisma.StringFieldUpdateOperationsInput | string;
    notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    serviceId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type LabTestUncheckedUpdateManyWithoutMedicalRecordInput = {
    id?: Prisma.IntFieldUpdateOperationsInput | number;
    testDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    result?: Prisma.StringFieldUpdateOperationsInput | string;
    status?: Prisma.StringFieldUpdateOperationsInput | string;
    notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    serviceId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type LabTestCreateManyServicesInput = {
    id?: number;
    recordId: number;
    testDate: Date | string;
    result: string;
    status: string;
    notes?: string | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
};

export type LabTestUpdateWithoutServicesInput = {
    testDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    result?: Prisma.StringFieldUpdateOperationsInput | string;
    status?: Prisma.StringFieldUpdateOperationsInput | string;
    notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    medicalRecord?: Prisma.MedicalRecordsUpdateOneRequiredWithoutLabTestNestedInput;
};

export type LabTestUncheckedUpdateWithoutServicesInput = {
    id?: Prisma.IntFieldUpdateOperationsInput | number;
    recordId?: Prisma.IntFieldUpdateOperationsInput | number;
    testDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    result?: Prisma.StringFieldUpdateOperationsInput | string;
    status?: Prisma.StringFieldUpdateOperationsInput | string;
    notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type LabTestUncheckedUpdateManyWithoutServicesInput = {
    id?: Prisma.IntFieldUpdateOperationsInput | number;
    recordId?: Prisma.IntFieldUpdateOperationsInput | number;
    testDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    result?: Prisma.StringFieldUpdateOperationsInput | string;
    status?: Prisma.StringFieldUpdateOperationsInput | string;
    notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type LabTestSelect<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
    {
        id?: boolean;
        recordId?: boolean;
        testDate?: boolean;
        result?: boolean;
        status?: boolean;
        notes?: boolean;
        serviceId?: boolean;
        createdAt?: boolean;
        updatedAt?: boolean;
        services?: boolean | Prisma.LabTest$servicesArgs<ExtArgs>;
        medicalRecord?: boolean | Prisma.MedicalRecordsDefaultArgs<ExtArgs>;
    },
    ExtArgs['result']['labTest']
>;

export type LabTestSelectCreateManyAndReturn<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
    {
        id?: boolean;
        recordId?: boolean;
        testDate?: boolean;
        result?: boolean;
        status?: boolean;
        notes?: boolean;
        serviceId?: boolean;
        createdAt?: boolean;
        updatedAt?: boolean;
        services?: boolean | Prisma.LabTest$servicesArgs<ExtArgs>;
        medicalRecord?: boolean | Prisma.MedicalRecordsDefaultArgs<ExtArgs>;
    },
    ExtArgs['result']['labTest']
>;

export type LabTestSelectUpdateManyAndReturn<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
    {
        id?: boolean;
        recordId?: boolean;
        testDate?: boolean;
        result?: boolean;
        status?: boolean;
        notes?: boolean;
        serviceId?: boolean;
        createdAt?: boolean;
        updatedAt?: boolean;
        services?: boolean | Prisma.LabTest$servicesArgs<ExtArgs>;
        medicalRecord?: boolean | Prisma.MedicalRecordsDefaultArgs<ExtArgs>;
    },
    ExtArgs['result']['labTest']
>;

export type LabTestSelectScalar = {
    id?: boolean;
    recordId?: boolean;
    testDate?: boolean;
    result?: boolean;
    status?: boolean;
    notes?: boolean;
    serviceId?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
};

export type LabTestOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
    runtime.Types.Extensions.GetOmit<
        'id' | 'recordId' | 'testDate' | 'result' | 'status' | 'notes' | 'serviceId' | 'createdAt' | 'updatedAt',
        ExtArgs['result']['labTest']
    >;
export type LabTestInclude<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    services?: boolean | Prisma.LabTest$servicesArgs<ExtArgs>;
    medicalRecord?: boolean | Prisma.MedicalRecordsDefaultArgs<ExtArgs>;
};
export type LabTestIncludeCreateManyAndReturn<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    services?: boolean | Prisma.LabTest$servicesArgs<ExtArgs>;
    medicalRecord?: boolean | Prisma.MedicalRecordsDefaultArgs<ExtArgs>;
};
export type LabTestIncludeUpdateManyAndReturn<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    services?: boolean | Prisma.LabTest$servicesArgs<ExtArgs>;
    medicalRecord?: boolean | Prisma.MedicalRecordsDefaultArgs<ExtArgs>;
};

export type $LabTestPayload<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    name: 'LabTest';
    objects: {
        services: Prisma.$ServicesPayload<ExtArgs> | null;
        medicalRecord: Prisma.$MedicalRecordsPayload<ExtArgs>;
    };
    scalars: runtime.Types.Extensions.GetPayloadResult<
        {
            id: number;
            recordId: number;
            testDate: Date;
            result: string;
            status: string;
            notes: string | null;
            serviceId: number | null;
            createdAt: Date;
            updatedAt: Date;
        },
        ExtArgs['result']['labTest']
    >;
    composites: {};
};

export type LabTestGetPayload<S extends boolean | null | undefined | LabTestDefaultArgs> =
    runtime.Types.Result.GetResult<Prisma.$LabTestPayload, S>;

export type LabTestCountArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = Omit<LabTestFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: LabTestCountAggregateInputType | true;
};

export interface LabTestDelegate<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
    GlobalOmitOptions = {}
> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LabTest']; meta: { name: 'LabTest' } };
    /**
     * Find zero or one LabTest that matches the filter.
     * @param {LabTestFindUniqueArgs} args - Arguments to find a LabTest
     * @example
     * // Get one LabTest
     * const labTest = await prisma.labTest.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LabTestFindUniqueArgs>(
        args: Prisma.SelectSubset<T, LabTestFindUniqueArgs<ExtArgs>>
    ): Prisma.Prisma__LabTestClient<
        runtime.Types.Result.GetResult<Prisma.$LabTestPayload<ExtArgs>, T, 'findUnique', GlobalOmitOptions> | null,
        null,
        ExtArgs,
        GlobalOmitOptions
    >;

    /**
     * Find one LabTest that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {LabTestFindUniqueOrThrowArgs} args - Arguments to find a LabTest
     * @example
     * // Get one LabTest
     * const labTest = await prisma.labTest.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LabTestFindUniqueOrThrowArgs>(
        args: Prisma.SelectSubset<T, LabTestFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma.Prisma__LabTestClient<
        runtime.Types.Result.GetResult<Prisma.$LabTestPayload<ExtArgs>, T, 'findUniqueOrThrow', GlobalOmitOptions>,
        never,
        ExtArgs,
        GlobalOmitOptions
    >;

    /**
     * Find the first LabTest that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LabTestFindFirstArgs} args - Arguments to find a LabTest
     * @example
     * // Get one LabTest
     * const labTest = await prisma.labTest.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LabTestFindFirstArgs>(
        args?: Prisma.SelectSubset<T, LabTestFindFirstArgs<ExtArgs>>
    ): Prisma.Prisma__LabTestClient<
        runtime.Types.Result.GetResult<Prisma.$LabTestPayload<ExtArgs>, T, 'findFirst', GlobalOmitOptions> | null,
        null,
        ExtArgs,
        GlobalOmitOptions
    >;

    /**
     * Find the first LabTest that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LabTestFindFirstOrThrowArgs} args - Arguments to find a LabTest
     * @example
     * // Get one LabTest
     * const labTest = await prisma.labTest.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LabTestFindFirstOrThrowArgs>(
        args?: Prisma.SelectSubset<T, LabTestFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma.Prisma__LabTestClient<
        runtime.Types.Result.GetResult<Prisma.$LabTestPayload<ExtArgs>, T, 'findFirstOrThrow', GlobalOmitOptions>,
        never,
        ExtArgs,
        GlobalOmitOptions
    >;

    /**
     * Find zero or more LabTests that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LabTestFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LabTests
     * const labTests = await prisma.labTest.findMany()
     *
     * // Get first 10 LabTests
     * const labTests = await prisma.labTest.findMany({ take: 10 })
     *
     * // Only select the `id`
     * const labTestWithIdOnly = await prisma.labTest.findMany({ select: { id: true } })
     *
     */
    findMany<T extends LabTestFindManyArgs>(
        args?: Prisma.SelectSubset<T, LabTestFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<
        runtime.Types.Result.GetResult<Prisma.$LabTestPayload<ExtArgs>, T, 'findMany', GlobalOmitOptions>
    >;

    /**
     * Create a LabTest.
     * @param {LabTestCreateArgs} args - Arguments to create a LabTest.
     * @example
     * // Create one LabTest
     * const LabTest = await prisma.labTest.create({
     *   data: {
     *     // ... data to create a LabTest
     *   }
     * })
     *
     */
    create<T extends LabTestCreateArgs>(
        args: Prisma.SelectSubset<T, LabTestCreateArgs<ExtArgs>>
    ): Prisma.Prisma__LabTestClient<
        runtime.Types.Result.GetResult<Prisma.$LabTestPayload<ExtArgs>, T, 'create', GlobalOmitOptions>,
        never,
        ExtArgs,
        GlobalOmitOptions
    >;

    /**
     * Create many LabTests.
     * @param {LabTestCreateManyArgs} args - Arguments to create many LabTests.
     * @example
     * // Create many LabTests
     * const labTest = await prisma.labTest.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     */
    createMany<T extends LabTestCreateManyArgs>(
        args?: Prisma.SelectSubset<T, LabTestCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<Prisma.BatchPayload>;

    /**
     * Create many LabTests and returns the data saved in the database.
     * @param {LabTestCreateManyAndReturnArgs} args - Arguments to create many LabTests.
     * @example
     * // Create many LabTests
     * const labTest = await prisma.labTest.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     * // Create many LabTests and only return the `id`
     * const labTestWithIdOnly = await prisma.labTest.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     *
     */
    createManyAndReturn<T extends LabTestCreateManyAndReturnArgs>(
        args?: Prisma.SelectSubset<T, LabTestCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<
        runtime.Types.Result.GetResult<Prisma.$LabTestPayload<ExtArgs>, T, 'createManyAndReturn', GlobalOmitOptions>
    >;

    /**
     * Delete a LabTest.
     * @param {LabTestDeleteArgs} args - Arguments to delete one LabTest.
     * @example
     * // Delete one LabTest
     * const LabTest = await prisma.labTest.delete({
     *   where: {
     *     // ... filter to delete one LabTest
     *   }
     * })
     *
     */
    delete<T extends LabTestDeleteArgs>(
        args: Prisma.SelectSubset<T, LabTestDeleteArgs<ExtArgs>>
    ): Prisma.Prisma__LabTestClient<
        runtime.Types.Result.GetResult<Prisma.$LabTestPayload<ExtArgs>, T, 'delete', GlobalOmitOptions>,
        never,
        ExtArgs,
        GlobalOmitOptions
    >;

    /**
     * Update one LabTest.
     * @param {LabTestUpdateArgs} args - Arguments to update one LabTest.
     * @example
     * // Update one LabTest
     * const labTest = await prisma.labTest.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     */
    update<T extends LabTestUpdateArgs>(
        args: Prisma.SelectSubset<T, LabTestUpdateArgs<ExtArgs>>
    ): Prisma.Prisma__LabTestClient<
        runtime.Types.Result.GetResult<Prisma.$LabTestPayload<ExtArgs>, T, 'update', GlobalOmitOptions>,
        never,
        ExtArgs,
        GlobalOmitOptions
    >;

    /**
     * Delete zero or more LabTests.
     * @param {LabTestDeleteManyArgs} args - Arguments to filter LabTests to delete.
     * @example
     * // Delete a few LabTests
     * const { count } = await prisma.labTest.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     *
     */
    deleteMany<T extends LabTestDeleteManyArgs>(
        args?: Prisma.SelectSubset<T, LabTestDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<Prisma.BatchPayload>;

    /**
     * Update zero or more LabTests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LabTestUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LabTests
     * const labTest = await prisma.labTest.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     */
    updateMany<T extends LabTestUpdateManyArgs>(
        args: Prisma.SelectSubset<T, LabTestUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<Prisma.BatchPayload>;

    /**
     * Update zero or more LabTests and returns the data updated in the database.
     * @param {LabTestUpdateManyAndReturnArgs} args - Arguments to update many LabTests.
     * @example
     * // Update many LabTests
     * const labTest = await prisma.labTest.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     * // Update zero or more LabTests and only return the `id`
     * const labTestWithIdOnly = await prisma.labTest.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     *
     */
    updateManyAndReturn<T extends LabTestUpdateManyAndReturnArgs>(
        args: Prisma.SelectSubset<T, LabTestUpdateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<
        runtime.Types.Result.GetResult<Prisma.$LabTestPayload<ExtArgs>, T, 'updateManyAndReturn', GlobalOmitOptions>
    >;

    /**
     * Create or update one LabTest.
     * @param {LabTestUpsertArgs} args - Arguments to update or create a LabTest.
     * @example
     * // Update or create a LabTest
     * const labTest = await prisma.labTest.upsert({
     *   create: {
     *     // ... data to create a LabTest
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LabTest we want to update
     *   }
     * })
     */
    upsert<T extends LabTestUpsertArgs>(
        args: Prisma.SelectSubset<T, LabTestUpsertArgs<ExtArgs>>
    ): Prisma.Prisma__LabTestClient<
        runtime.Types.Result.GetResult<Prisma.$LabTestPayload<ExtArgs>, T, 'upsert', GlobalOmitOptions>,
        never,
        ExtArgs,
        GlobalOmitOptions
    >;

    /**
     * Count the number of LabTests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LabTestCountArgs} args - Arguments to filter LabTests to count.
     * @example
     * // Count the number of LabTests
     * const count = await prisma.labTest.count({
     *   where: {
     *     // ... the filter for the LabTests we want to count
     *   }
     * })
     **/
    count<T extends LabTestCountArgs>(
        args?: Prisma.Subset<T, LabTestCountArgs>
    ): Prisma.PrismaPromise<
        T extends runtime.Types.Utils.Record<'select', any>
            ? T['select'] extends true
                ? number
                : Prisma.GetScalarType<T['select'], LabTestCountAggregateOutputType>
            : number
    >;

    /**
     * Allows you to perform aggregations operations on a LabTest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LabTestAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
     **/
    aggregate<T extends LabTestAggregateArgs>(
        args: Prisma.Subset<T, LabTestAggregateArgs>
    ): Prisma.PrismaPromise<GetLabTestAggregateType<T>>;

    /**
     * Group by LabTest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LabTestGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     *
     **/
    groupBy<
        T extends LabTestGroupByArgs,
        HasSelectOrTake extends Prisma.Or<
            Prisma.Extends<'skip', Prisma.Keys<T>>,
            Prisma.Extends<'take', Prisma.Keys<T>>
        >,
        OrderByArg extends Prisma.True extends HasSelectOrTake
            ? { orderBy: LabTestGroupByArgs['orderBy'] }
            : { orderBy?: LabTestGroupByArgs['orderBy'] },
        OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
        ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
        ByValid extends Prisma.Has<ByFields, OrderFields>,
        HavingFields extends Prisma.GetHavingFields<T['having']>,
        HavingValid extends Prisma.Has<ByFields, HavingFields>,
        ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
        InputErrors extends ByEmpty extends Prisma.True
            ? `Error: "by" must not be empty.`
            : HavingValid extends Prisma.False
              ? {
                    [P in HavingFields]: P extends ByFields
                        ? never
                        : P extends string
                          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                          : [Error, 'Field ', P, ` in "having" needs to be provided in "by"`];
                }[HavingFields]
              : 'take' extends Prisma.Keys<T>
                ? 'orderBy' extends Prisma.Keys<T>
                    ? ByValid extends Prisma.True
                        ? {}
                        : {
                              [P in OrderFields]: P extends ByFields
                                  ? never
                                  : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                          }[OrderFields]
                    : 'Error: If you provide "take", you also need to provide "orderBy"'
                : 'skip' extends Prisma.Keys<T>
                  ? 'orderBy' extends Prisma.Keys<T>
                      ? ByValid extends Prisma.True
                          ? {}
                          : {
                                [P in OrderFields]: P extends ByFields
                                    ? never
                                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                            }[OrderFields]
                      : 'Error: If you provide "skip", you also need to provide "orderBy"'
                  : ByValid extends Prisma.True
                    ? {}
                    : {
                          [P in OrderFields]: P extends ByFields
                              ? never
                              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                      }[OrderFields]
    >(
        args: Prisma.SubsetIntersection<T, LabTestGroupByArgs, OrderByArg> & InputErrors
    ): {} extends InputErrors ? GetLabTestGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>;
    /**
     * Fields of the LabTest model
     */
    readonly fields: LabTestFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for LabTest.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__LabTestClient<
    T,
    Null = never,
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
    GlobalOmitOptions = {}
> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    services<T extends Prisma.LabTest$servicesArgs<ExtArgs> = {}>(
        args?: Prisma.Subset<T, Prisma.LabTest$servicesArgs<ExtArgs>>
    ): Prisma.Prisma__ServicesClient<
        runtime.Types.Result.GetResult<
            Prisma.$ServicesPayload<ExtArgs>,
            T,
            'findUniqueOrThrow',
            GlobalOmitOptions
        > | null,
        null,
        ExtArgs,
        GlobalOmitOptions
    >;
    medicalRecord<T extends Prisma.MedicalRecordsDefaultArgs<ExtArgs> = {}>(
        args?: Prisma.Subset<T, Prisma.MedicalRecordsDefaultArgs<ExtArgs>>
    ): Prisma.Prisma__MedicalRecordsClient<
        | runtime.Types.Result.GetResult<
              Prisma.$MedicalRecordsPayload<ExtArgs>,
              T,
              'findUniqueOrThrow',
              GlobalOmitOptions
          >
        | Null,
        Null,
        ExtArgs,
        GlobalOmitOptions
    >;
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(
        onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null,
        onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null
    ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(
        onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null
    ): runtime.Types.Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the LabTest model
 */
export interface LabTestFieldRefs {
    readonly id: Prisma.FieldRef<'LabTest', 'Int'>;
    readonly recordId: Prisma.FieldRef<'LabTest', 'Int'>;
    readonly testDate: Prisma.FieldRef<'LabTest', 'DateTime'>;
    readonly result: Prisma.FieldRef<'LabTest', 'String'>;
    readonly status: Prisma.FieldRef<'LabTest', 'String'>;
    readonly notes: Prisma.FieldRef<'LabTest', 'String'>;
    readonly serviceId: Prisma.FieldRef<'LabTest', 'Int'>;
    readonly createdAt: Prisma.FieldRef<'LabTest', 'DateTime'>;
    readonly updatedAt: Prisma.FieldRef<'LabTest', 'DateTime'>;
}

// Custom InputTypes
/**
 * LabTest findUnique
 */
export type LabTestFindUniqueArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the LabTest
     */
    select?: Prisma.LabTestSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the LabTest
     */
    omit?: Prisma.LabTestOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.LabTestInclude<ExtArgs> | null;
    /**
     * Filter, which LabTest to fetch.
     */
    where: Prisma.LabTestWhereUniqueInput;
};

/**
 * LabTest findUniqueOrThrow
 */
export type LabTestFindUniqueOrThrowArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the LabTest
     */
    select?: Prisma.LabTestSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the LabTest
     */
    omit?: Prisma.LabTestOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.LabTestInclude<ExtArgs> | null;
    /**
     * Filter, which LabTest to fetch.
     */
    where: Prisma.LabTestWhereUniqueInput;
};

/**
 * LabTest findFirst
 */
export type LabTestFindFirstArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the LabTest
     */
    select?: Prisma.LabTestSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the LabTest
     */
    omit?: Prisma.LabTestOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.LabTestInclude<ExtArgs> | null;
    /**
     * Filter, which LabTest to fetch.
     */
    where?: Prisma.LabTestWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of LabTests to fetch.
     */
    orderBy?: Prisma.LabTestOrderByWithRelationInput | Prisma.LabTestOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for LabTests.
     */
    cursor?: Prisma.LabTestWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `Â±n` LabTests from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` LabTests.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of LabTests.
     */
    distinct?: Prisma.LabTestScalarFieldEnum | Prisma.LabTestScalarFieldEnum[];
};

/**
 * LabTest findFirstOrThrow
 */
export type LabTestFindFirstOrThrowArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the LabTest
     */
    select?: Prisma.LabTestSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the LabTest
     */
    omit?: Prisma.LabTestOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.LabTestInclude<ExtArgs> | null;
    /**
     * Filter, which LabTest to fetch.
     */
    where?: Prisma.LabTestWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of LabTests to fetch.
     */
    orderBy?: Prisma.LabTestOrderByWithRelationInput | Prisma.LabTestOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for LabTests.
     */
    cursor?: Prisma.LabTestWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `Â±n` LabTests from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` LabTests.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of LabTests.
     */
    distinct?: Prisma.LabTestScalarFieldEnum | Prisma.LabTestScalarFieldEnum[];
};

/**
 * LabTest findMany
 */
export type LabTestFindManyArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the LabTest
     */
    select?: Prisma.LabTestSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the LabTest
     */
    omit?: Prisma.LabTestOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.LabTestInclude<ExtArgs> | null;
    /**
     * Filter, which LabTests to fetch.
     */
    where?: Prisma.LabTestWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of LabTests to fetch.
     */
    orderBy?: Prisma.LabTestOrderByWithRelationInput | Prisma.LabTestOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for listing LabTests.
     */
    cursor?: Prisma.LabTestWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `Â±n` LabTests from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` LabTests.
     */
    skip?: number;
    distinct?: Prisma.LabTestScalarFieldEnum | Prisma.LabTestScalarFieldEnum[];
};

/**
 * LabTest create
 */
export type LabTestCreateArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the LabTest
     */
    select?: Prisma.LabTestSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the LabTest
     */
    omit?: Prisma.LabTestOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.LabTestInclude<ExtArgs> | null;
    /**
     * The data needed to create a LabTest.
     */
    data: Prisma.XOR<Prisma.LabTestCreateInput, Prisma.LabTestUncheckedCreateInput>;
};

/**
 * LabTest createMany
 */
export type LabTestCreateManyArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * The data used to create many LabTests.
     */
    data: Prisma.LabTestCreateManyInput | Prisma.LabTestCreateManyInput[];
    skipDuplicates?: boolean;
};

/**
 * LabTest createManyAndReturn
 */
export type LabTestCreateManyAndReturnArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the LabTest
     */
    select?: Prisma.LabTestSelectCreateManyAndReturn<ExtArgs> | null;
    /**
     * Omit specific fields from the LabTest
     */
    omit?: Prisma.LabTestOmit<ExtArgs> | null;
    /**
     * The data used to create many LabTests.
     */
    data: Prisma.LabTestCreateManyInput | Prisma.LabTestCreateManyInput[];
    skipDuplicates?: boolean;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.LabTestIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * LabTest update
 */
export type LabTestUpdateArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the LabTest
     */
    select?: Prisma.LabTestSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the LabTest
     */
    omit?: Prisma.LabTestOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.LabTestInclude<ExtArgs> | null;
    /**
     * The data needed to update a LabTest.
     */
    data: Prisma.XOR<Prisma.LabTestUpdateInput, Prisma.LabTestUncheckedUpdateInput>;
    /**
     * Choose, which LabTest to update.
     */
    where: Prisma.LabTestWhereUniqueInput;
};

/**
 * LabTest updateMany
 */
export type LabTestUpdateManyArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * The data used to update LabTests.
     */
    data: Prisma.XOR<Prisma.LabTestUpdateManyMutationInput, Prisma.LabTestUncheckedUpdateManyInput>;
    /**
     * Filter which LabTests to update
     */
    where?: Prisma.LabTestWhereInput;
    /**
     * Limit how many LabTests to update.
     */
    limit?: number;
};

/**
 * LabTest updateManyAndReturn
 */
export type LabTestUpdateManyAndReturnArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the LabTest
     */
    select?: Prisma.LabTestSelectUpdateManyAndReturn<ExtArgs> | null;
    /**
     * Omit specific fields from the LabTest
     */
    omit?: Prisma.LabTestOmit<ExtArgs> | null;
    /**
     * The data used to update LabTests.
     */
    data: Prisma.XOR<Prisma.LabTestUpdateManyMutationInput, Prisma.LabTestUncheckedUpdateManyInput>;
    /**
     * Filter which LabTests to update
     */
    where?: Prisma.LabTestWhereInput;
    /**
     * Limit how many LabTests to update.
     */
    limit?: number;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.LabTestIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * LabTest upsert
 */
export type LabTestUpsertArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the LabTest
     */
    select?: Prisma.LabTestSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the LabTest
     */
    omit?: Prisma.LabTestOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.LabTestInclude<ExtArgs> | null;
    /**
     * The filter to search for the LabTest to update in case it exists.
     */
    where: Prisma.LabTestWhereUniqueInput;
    /**
     * In case the LabTest found by the `where` argument doesn't exist, create a new LabTest with this data.
     */
    create: Prisma.XOR<Prisma.LabTestCreateInput, Prisma.LabTestUncheckedCreateInput>;
    /**
     * In case the LabTest was found with the provided `where` argument, update it with this data.
     */
    update: Prisma.XOR<Prisma.LabTestUpdateInput, Prisma.LabTestUncheckedUpdateInput>;
};

/**
 * LabTest delete
 */
export type LabTestDeleteArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the LabTest
     */
    select?: Prisma.LabTestSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the LabTest
     */
    omit?: Prisma.LabTestOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.LabTestInclude<ExtArgs> | null;
    /**
     * Filter which LabTest to delete.
     */
    where: Prisma.LabTestWhereUniqueInput;
};

/**
 * LabTest deleteMany
 */
export type LabTestDeleteManyArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Filter which LabTests to delete
     */
    where?: Prisma.LabTestWhereInput;
    /**
     * Limit how many LabTests to delete.
     */
    limit?: number;
};

/**
 * LabTest.services
 */
export type LabTest$servicesArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the Services
     */
    select?: Prisma.ServicesSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Services
     */
    omit?: Prisma.ServicesOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.ServicesInclude<ExtArgs> | null;
    where?: Prisma.ServicesWhereInput;
};

/**
 * LabTest without action
 */
export type LabTestDefaultArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the LabTest
     */
    select?: Prisma.LabTestSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the LabTest
     */
    omit?: Prisma.LabTestOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.LabTestInclude<ExtArgs> | null;
};
