/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/**
 * This file exports the `MedicalRecords` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from '@prisma/client/runtime/library';
import type * as $Enums from '../enums';
import type * as Prisma from '../internal/prismaNamespace';

/**
 * Model MedicalRecords
 *
 */
export type MedicalRecordsModel = runtime.Types.Result.DefaultSelection<Prisma.$MedicalRecordsPayload>;

export type AggregateMedicalRecords = {
    _count: MedicalRecordsCountAggregateOutputType | null;
    _avg: MedicalRecordsAvgAggregateOutputType | null;
    _sum: MedicalRecordsSumAggregateOutputType | null;
    _min: MedicalRecordsMinAggregateOutputType | null;
    _max: MedicalRecordsMaxAggregateOutputType | null;
};

export type MedicalRecordsAvgAggregateOutputType = {
    id: number | null;
    appointmentId: number | null;
};

export type MedicalRecordsSumAggregateOutputType = {
    id: number | null;
    appointmentId: number | null;
};

export type MedicalRecordsMinAggregateOutputType = {
    id: number | null;
    patientId: string | null;
    appointmentId: number | null;
    doctorId: string | null;
    treatmentPlan: string | null;
    prescriptions: string | null;
    labRequest: string | null;
    notes: string | null;
    createdAt: Date | null;
    updatedAt: Date | null;
};

export type MedicalRecordsMaxAggregateOutputType = {
    id: number | null;
    patientId: string | null;
    appointmentId: number | null;
    doctorId: string | null;
    treatmentPlan: string | null;
    prescriptions: string | null;
    labRequest: string | null;
    notes: string | null;
    createdAt: Date | null;
    updatedAt: Date | null;
};

export type MedicalRecordsCountAggregateOutputType = {
    id: number;
    patientId: number;
    appointmentId: number;
    doctorId: number;
    treatmentPlan: number;
    prescriptions: number;
    labRequest: number;
    notes: number;
    createdAt: number;
    updatedAt: number;
    _all: number;
};

export type MedicalRecordsAvgAggregateInputType = {
    id?: true;
    appointmentId?: true;
};

export type MedicalRecordsSumAggregateInputType = {
    id?: true;
    appointmentId?: true;
};

export type MedicalRecordsMinAggregateInputType = {
    id?: true;
    patientId?: true;
    appointmentId?: true;
    doctorId?: true;
    treatmentPlan?: true;
    prescriptions?: true;
    labRequest?: true;
    notes?: true;
    createdAt?: true;
    updatedAt?: true;
};

export type MedicalRecordsMaxAggregateInputType = {
    id?: true;
    patientId?: true;
    appointmentId?: true;
    doctorId?: true;
    treatmentPlan?: true;
    prescriptions?: true;
    labRequest?: true;
    notes?: true;
    createdAt?: true;
    updatedAt?: true;
};

export type MedicalRecordsCountAggregateInputType = {
    id?: true;
    patientId?: true;
    appointmentId?: true;
    doctorId?: true;
    treatmentPlan?: true;
    prescriptions?: true;
    labRequest?: true;
    notes?: true;
    createdAt?: true;
    updatedAt?: true;
    _all?: true;
};

export type MedicalRecordsAggregateArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Filter which MedicalRecords to aggregate.
     */
    where?: Prisma.MedicalRecordsWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of MedicalRecords to fetch.
     */
    orderBy?: Prisma.MedicalRecordsOrderByWithRelationInput | Prisma.MedicalRecordsOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the start position
     */
    cursor?: Prisma.MedicalRecordsWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `Â±n` MedicalRecords from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` MedicalRecords.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Count returned MedicalRecords
     **/
    _count?: true | MedicalRecordsCountAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to average
     **/
    _avg?: MedicalRecordsAvgAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to sum
     **/
    _sum?: MedicalRecordsSumAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the minimum value
     **/
    _min?: MedicalRecordsMinAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the maximum value
     **/
    _max?: MedicalRecordsMaxAggregateInputType;
};

export type GetMedicalRecordsAggregateType<T extends MedicalRecordsAggregateArgs> = {
    [P in keyof T & keyof AggregateMedicalRecords]: P extends '_count' | 'count'
        ? T[P] extends true
            ? number
            : Prisma.GetScalarType<T[P], AggregateMedicalRecords[P]>
        : Prisma.GetScalarType<T[P], AggregateMedicalRecords[P]>;
};

export type MedicalRecordsGroupByArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    where?: Prisma.MedicalRecordsWhereInput;
    orderBy?: Prisma.MedicalRecordsOrderByWithAggregationInput | Prisma.MedicalRecordsOrderByWithAggregationInput[];
    by: Prisma.MedicalRecordsScalarFieldEnum[] | Prisma.MedicalRecordsScalarFieldEnum;
    having?: Prisma.MedicalRecordsScalarWhereWithAggregatesInput;
    take?: number;
    skip?: number;
    _count?: MedicalRecordsCountAggregateInputType | true;
    _avg?: MedicalRecordsAvgAggregateInputType;
    _sum?: MedicalRecordsSumAggregateInputType;
    _min?: MedicalRecordsMinAggregateInputType;
    _max?: MedicalRecordsMaxAggregateInputType;
};

export type MedicalRecordsGroupByOutputType = {
    id: number;
    patientId: string;
    appointmentId: number;
    doctorId: string;
    treatmentPlan: string | null;
    prescriptions: string | null;
    labRequest: string | null;
    notes: string | null;
    createdAt: Date;
    updatedAt: Date;
    _count: MedicalRecordsCountAggregateOutputType | null;
    _avg: MedicalRecordsAvgAggregateOutputType | null;
    _sum: MedicalRecordsSumAggregateOutputType | null;
    _min: MedicalRecordsMinAggregateOutputType | null;
    _max: MedicalRecordsMaxAggregateOutputType | null;
};

type GetMedicalRecordsGroupByPayload<T extends MedicalRecordsGroupByArgs> = Prisma.PrismaPromise<
    Array<
        Prisma.PickEnumerable<MedicalRecordsGroupByOutputType, T['by']> & {
            [P in keyof T & keyof MedicalRecordsGroupByOutputType]: P extends '_count'
                ? T[P] extends boolean
                    ? number
                    : Prisma.GetScalarType<T[P], MedicalRecordsGroupByOutputType[P]>
                : Prisma.GetScalarType<T[P], MedicalRecordsGroupByOutputType[P]>;
        }
    >
>;

export type MedicalRecordsWhereInput = {
    AND?: Prisma.MedicalRecordsWhereInput | Prisma.MedicalRecordsWhereInput[];
    OR?: Prisma.MedicalRecordsWhereInput[];
    NOT?: Prisma.MedicalRecordsWhereInput | Prisma.MedicalRecordsWhereInput[];
    id?: Prisma.IntFilter<'MedicalRecords'> | number;
    patientId?: Prisma.StringFilter<'MedicalRecords'> | string;
    appointmentId?: Prisma.IntFilter<'MedicalRecords'> | number;
    doctorId?: Prisma.StringFilter<'MedicalRecords'> | string;
    treatmentPlan?: Prisma.StringNullableFilter<'MedicalRecords'> | string | null;
    prescriptions?: Prisma.StringNullableFilter<'MedicalRecords'> | string | null;
    labRequest?: Prisma.StringNullableFilter<'MedicalRecords'> | string | null;
    notes?: Prisma.StringNullableFilter<'MedicalRecords'> | string | null;
    createdAt?: Prisma.DateTimeFilter<'MedicalRecords'> | Date | string;
    updatedAt?: Prisma.DateTimeFilter<'MedicalRecords'> | Date | string;
    appointment?: Prisma.XOR<Prisma.AppointmentScalarRelationFilter, Prisma.AppointmentWhereInput>;
    patient?: Prisma.XOR<Prisma.PatientScalarRelationFilter, Prisma.PatientWhereInput>;
    labTest?: Prisma.LabTestListRelationFilter;
    vitalSigns?: Prisma.VitalSignsListRelationFilter;
    diagnosis?: Prisma.DiagnosisListRelationFilter;
    Prescription?: Prisma.PrescriptionListRelationFilter;
};

export type MedicalRecordsOrderByWithRelationInput = {
    id?: Prisma.SortOrder;
    patientId?: Prisma.SortOrder;
    appointmentId?: Prisma.SortOrder;
    doctorId?: Prisma.SortOrder;
    treatmentPlan?: Prisma.SortOrderInput | Prisma.SortOrder;
    prescriptions?: Prisma.SortOrderInput | Prisma.SortOrder;
    labRequest?: Prisma.SortOrderInput | Prisma.SortOrder;
    notes?: Prisma.SortOrderInput | Prisma.SortOrder;
    createdAt?: Prisma.SortOrder;
    updatedAt?: Prisma.SortOrder;
    appointment?: Prisma.AppointmentOrderByWithRelationInput;
    patient?: Prisma.PatientOrderByWithRelationInput;
    labTest?: Prisma.LabTestOrderByRelationAggregateInput;
    vitalSigns?: Prisma.VitalSignsOrderByRelationAggregateInput;
    diagnosis?: Prisma.DiagnosisOrderByRelationAggregateInput;
    Prescription?: Prisma.PrescriptionOrderByRelationAggregateInput;
};

export type MedicalRecordsWhereUniqueInput = Prisma.AtLeast<
    {
        id?: number;
        AND?: Prisma.MedicalRecordsWhereInput | Prisma.MedicalRecordsWhereInput[];
        OR?: Prisma.MedicalRecordsWhereInput[];
        NOT?: Prisma.MedicalRecordsWhereInput | Prisma.MedicalRecordsWhereInput[];
        patientId?: Prisma.StringFilter<'MedicalRecords'> | string;
        appointmentId?: Prisma.IntFilter<'MedicalRecords'> | number;
        doctorId?: Prisma.StringFilter<'MedicalRecords'> | string;
        treatmentPlan?: Prisma.StringNullableFilter<'MedicalRecords'> | string | null;
        prescriptions?: Prisma.StringNullableFilter<'MedicalRecords'> | string | null;
        labRequest?: Prisma.StringNullableFilter<'MedicalRecords'> | string | null;
        notes?: Prisma.StringNullableFilter<'MedicalRecords'> | string | null;
        createdAt?: Prisma.DateTimeFilter<'MedicalRecords'> | Date | string;
        updatedAt?: Prisma.DateTimeFilter<'MedicalRecords'> | Date | string;
        appointment?: Prisma.XOR<Prisma.AppointmentScalarRelationFilter, Prisma.AppointmentWhereInput>;
        patient?: Prisma.XOR<Prisma.PatientScalarRelationFilter, Prisma.PatientWhereInput>;
        labTest?: Prisma.LabTestListRelationFilter;
        vitalSigns?: Prisma.VitalSignsListRelationFilter;
        diagnosis?: Prisma.DiagnosisListRelationFilter;
        Prescription?: Prisma.PrescriptionListRelationFilter;
    },
    'id'
>;

export type MedicalRecordsOrderByWithAggregationInput = {
    id?: Prisma.SortOrder;
    patientId?: Prisma.SortOrder;
    appointmentId?: Prisma.SortOrder;
    doctorId?: Prisma.SortOrder;
    treatmentPlan?: Prisma.SortOrderInput | Prisma.SortOrder;
    prescriptions?: Prisma.SortOrderInput | Prisma.SortOrder;
    labRequest?: Prisma.SortOrderInput | Prisma.SortOrder;
    notes?: Prisma.SortOrderInput | Prisma.SortOrder;
    createdAt?: Prisma.SortOrder;
    updatedAt?: Prisma.SortOrder;
    _count?: Prisma.MedicalRecordsCountOrderByAggregateInput;
    _avg?: Prisma.MedicalRecordsAvgOrderByAggregateInput;
    _max?: Prisma.MedicalRecordsMaxOrderByAggregateInput;
    _min?: Prisma.MedicalRecordsMinOrderByAggregateInput;
    _sum?: Prisma.MedicalRecordsSumOrderByAggregateInput;
};

export type MedicalRecordsScalarWhereWithAggregatesInput = {
    AND?: Prisma.MedicalRecordsScalarWhereWithAggregatesInput | Prisma.MedicalRecordsScalarWhereWithAggregatesInput[];
    OR?: Prisma.MedicalRecordsScalarWhereWithAggregatesInput[];
    NOT?: Prisma.MedicalRecordsScalarWhereWithAggregatesInput | Prisma.MedicalRecordsScalarWhereWithAggregatesInput[];
    id?: Prisma.IntWithAggregatesFilter<'MedicalRecords'> | number;
    patientId?: Prisma.StringWithAggregatesFilter<'MedicalRecords'> | string;
    appointmentId?: Prisma.IntWithAggregatesFilter<'MedicalRecords'> | number;
    doctorId?: Prisma.StringWithAggregatesFilter<'MedicalRecords'> | string;
    treatmentPlan?: Prisma.StringNullableWithAggregatesFilter<'MedicalRecords'> | string | null;
    prescriptions?: Prisma.StringNullableWithAggregatesFilter<'MedicalRecords'> | string | null;
    labRequest?: Prisma.StringNullableWithAggregatesFilter<'MedicalRecords'> | string | null;
    notes?: Prisma.StringNullableWithAggregatesFilter<'MedicalRecords'> | string | null;
    createdAt?: Prisma.DateTimeWithAggregatesFilter<'MedicalRecords'> | Date | string;
    updatedAt?: Prisma.DateTimeWithAggregatesFilter<'MedicalRecords'> | Date | string;
};

export type MedicalRecordsCreateInput = {
    doctorId: string;
    treatmentPlan?: string | null;
    prescriptions?: string | null;
    labRequest?: string | null;
    notes?: string | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    appointment: Prisma.AppointmentCreateNestedOneWithoutMedicalInput;
    patient: Prisma.PatientCreateNestedOneWithoutMedicalInput;
    labTest?: Prisma.LabTestCreateNestedManyWithoutMedicalRecordInput;
    vitalSigns?: Prisma.VitalSignsCreateNestedManyWithoutMedicalInput;
    diagnosis?: Prisma.DiagnosisCreateNestedManyWithoutMedicalInput;
    Prescription?: Prisma.PrescriptionCreateNestedManyWithoutMedicalRecordInput;
};

export type MedicalRecordsUncheckedCreateInput = {
    id?: number;
    patientId: string;
    appointmentId: number;
    doctorId: string;
    treatmentPlan?: string | null;
    prescriptions?: string | null;
    labRequest?: string | null;
    notes?: string | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    labTest?: Prisma.LabTestUncheckedCreateNestedManyWithoutMedicalRecordInput;
    vitalSigns?: Prisma.VitalSignsUncheckedCreateNestedManyWithoutMedicalInput;
    diagnosis?: Prisma.DiagnosisUncheckedCreateNestedManyWithoutMedicalInput;
    Prescription?: Prisma.PrescriptionUncheckedCreateNestedManyWithoutMedicalRecordInput;
};

export type MedicalRecordsUpdateInput = {
    doctorId?: Prisma.StringFieldUpdateOperationsInput | string;
    treatmentPlan?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    prescriptions?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    labRequest?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    appointment?: Prisma.AppointmentUpdateOneRequiredWithoutMedicalNestedInput;
    patient?: Prisma.PatientUpdateOneRequiredWithoutMedicalNestedInput;
    labTest?: Prisma.LabTestUpdateManyWithoutMedicalRecordNestedInput;
    vitalSigns?: Prisma.VitalSignsUpdateManyWithoutMedicalNestedInput;
    diagnosis?: Prisma.DiagnosisUpdateManyWithoutMedicalNestedInput;
    Prescription?: Prisma.PrescriptionUpdateManyWithoutMedicalRecordNestedInput;
};

export type MedicalRecordsUncheckedUpdateInput = {
    id?: Prisma.IntFieldUpdateOperationsInput | number;
    patientId?: Prisma.StringFieldUpdateOperationsInput | string;
    appointmentId?: Prisma.IntFieldUpdateOperationsInput | number;
    doctorId?: Prisma.StringFieldUpdateOperationsInput | string;
    treatmentPlan?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    prescriptions?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    labRequest?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    labTest?: Prisma.LabTestUncheckedUpdateManyWithoutMedicalRecordNestedInput;
    vitalSigns?: Prisma.VitalSignsUncheckedUpdateManyWithoutMedicalNestedInput;
    diagnosis?: Prisma.DiagnosisUncheckedUpdateManyWithoutMedicalNestedInput;
    Prescription?: Prisma.PrescriptionUncheckedUpdateManyWithoutMedicalRecordNestedInput;
};

export type MedicalRecordsCreateManyInput = {
    id?: number;
    patientId: string;
    appointmentId: number;
    doctorId: string;
    treatmentPlan?: string | null;
    prescriptions?: string | null;
    labRequest?: string | null;
    notes?: string | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
};

export type MedicalRecordsUpdateManyMutationInput = {
    doctorId?: Prisma.StringFieldUpdateOperationsInput | string;
    treatmentPlan?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    prescriptions?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    labRequest?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type MedicalRecordsUncheckedUpdateManyInput = {
    id?: Prisma.IntFieldUpdateOperationsInput | number;
    patientId?: Prisma.StringFieldUpdateOperationsInput | string;
    appointmentId?: Prisma.IntFieldUpdateOperationsInput | number;
    doctorId?: Prisma.StringFieldUpdateOperationsInput | string;
    treatmentPlan?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    prescriptions?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    labRequest?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type MedicalRecordsListRelationFilter = {
    every?: Prisma.MedicalRecordsWhereInput;
    some?: Prisma.MedicalRecordsWhereInput;
    none?: Prisma.MedicalRecordsWhereInput;
};

export type MedicalRecordsOrderByRelationAggregateInput = {
    _count?: Prisma.SortOrder;
};

export type MedicalRecordsScalarRelationFilter = {
    is?: Prisma.MedicalRecordsWhereInput;
    isNot?: Prisma.MedicalRecordsWhereInput;
};

export type MedicalRecordsCountOrderByAggregateInput = {
    id?: Prisma.SortOrder;
    patientId?: Prisma.SortOrder;
    appointmentId?: Prisma.SortOrder;
    doctorId?: Prisma.SortOrder;
    treatmentPlan?: Prisma.SortOrder;
    prescriptions?: Prisma.SortOrder;
    labRequest?: Prisma.SortOrder;
    notes?: Prisma.SortOrder;
    createdAt?: Prisma.SortOrder;
    updatedAt?: Prisma.SortOrder;
};

export type MedicalRecordsAvgOrderByAggregateInput = {
    id?: Prisma.SortOrder;
    appointmentId?: Prisma.SortOrder;
};

export type MedicalRecordsMaxOrderByAggregateInput = {
    id?: Prisma.SortOrder;
    patientId?: Prisma.SortOrder;
    appointmentId?: Prisma.SortOrder;
    doctorId?: Prisma.SortOrder;
    treatmentPlan?: Prisma.SortOrder;
    prescriptions?: Prisma.SortOrder;
    labRequest?: Prisma.SortOrder;
    notes?: Prisma.SortOrder;
    createdAt?: Prisma.SortOrder;
    updatedAt?: Prisma.SortOrder;
};

export type MedicalRecordsMinOrderByAggregateInput = {
    id?: Prisma.SortOrder;
    patientId?: Prisma.SortOrder;
    appointmentId?: Prisma.SortOrder;
    doctorId?: Prisma.SortOrder;
    treatmentPlan?: Prisma.SortOrder;
    prescriptions?: Prisma.SortOrder;
    labRequest?: Prisma.SortOrder;
    notes?: Prisma.SortOrder;
    createdAt?: Prisma.SortOrder;
    updatedAt?: Prisma.SortOrder;
};

export type MedicalRecordsSumOrderByAggregateInput = {
    id?: Prisma.SortOrder;
    appointmentId?: Prisma.SortOrder;
};

export type MedicalRecordsCreateNestedManyWithoutPatientInput = {
    create?:
        | Prisma.XOR<
              Prisma.MedicalRecordsCreateWithoutPatientInput,
              Prisma.MedicalRecordsUncheckedCreateWithoutPatientInput
          >
        | Prisma.MedicalRecordsCreateWithoutPatientInput[]
        | Prisma.MedicalRecordsUncheckedCreateWithoutPatientInput[];
    connectOrCreate?:
        | Prisma.MedicalRecordsCreateOrConnectWithoutPatientInput
        | Prisma.MedicalRecordsCreateOrConnectWithoutPatientInput[];
    createMany?: Prisma.MedicalRecordsCreateManyPatientInputEnvelope;
    connect?: Prisma.MedicalRecordsWhereUniqueInput | Prisma.MedicalRecordsWhereUniqueInput[];
};

export type MedicalRecordsUncheckedCreateNestedManyWithoutPatientInput = {
    create?:
        | Prisma.XOR<
              Prisma.MedicalRecordsCreateWithoutPatientInput,
              Prisma.MedicalRecordsUncheckedCreateWithoutPatientInput
          >
        | Prisma.MedicalRecordsCreateWithoutPatientInput[]
        | Prisma.MedicalRecordsUncheckedCreateWithoutPatientInput[];
    connectOrCreate?:
        | Prisma.MedicalRecordsCreateOrConnectWithoutPatientInput
        | Prisma.MedicalRecordsCreateOrConnectWithoutPatientInput[];
    createMany?: Prisma.MedicalRecordsCreateManyPatientInputEnvelope;
    connect?: Prisma.MedicalRecordsWhereUniqueInput | Prisma.MedicalRecordsWhereUniqueInput[];
};

export type MedicalRecordsUpdateManyWithoutPatientNestedInput = {
    create?:
        | Prisma.XOR<
              Prisma.MedicalRecordsCreateWithoutPatientInput,
              Prisma.MedicalRecordsUncheckedCreateWithoutPatientInput
          >
        | Prisma.MedicalRecordsCreateWithoutPatientInput[]
        | Prisma.MedicalRecordsUncheckedCreateWithoutPatientInput[];
    connectOrCreate?:
        | Prisma.MedicalRecordsCreateOrConnectWithoutPatientInput
        | Prisma.MedicalRecordsCreateOrConnectWithoutPatientInput[];
    upsert?:
        | Prisma.MedicalRecordsUpsertWithWhereUniqueWithoutPatientInput
        | Prisma.MedicalRecordsUpsertWithWhereUniqueWithoutPatientInput[];
    createMany?: Prisma.MedicalRecordsCreateManyPatientInputEnvelope;
    set?: Prisma.MedicalRecordsWhereUniqueInput | Prisma.MedicalRecordsWhereUniqueInput[];
    disconnect?: Prisma.MedicalRecordsWhereUniqueInput | Prisma.MedicalRecordsWhereUniqueInput[];
    delete?: Prisma.MedicalRecordsWhereUniqueInput | Prisma.MedicalRecordsWhereUniqueInput[];
    connect?: Prisma.MedicalRecordsWhereUniqueInput | Prisma.MedicalRecordsWhereUniqueInput[];
    update?:
        | Prisma.MedicalRecordsUpdateWithWhereUniqueWithoutPatientInput
        | Prisma.MedicalRecordsUpdateWithWhereUniqueWithoutPatientInput[];
    updateMany?:
        | Prisma.MedicalRecordsUpdateManyWithWhereWithoutPatientInput
        | Prisma.MedicalRecordsUpdateManyWithWhereWithoutPatientInput[];
    deleteMany?: Prisma.MedicalRecordsScalarWhereInput | Prisma.MedicalRecordsScalarWhereInput[];
};

export type MedicalRecordsUncheckedUpdateManyWithoutPatientNestedInput = {
    create?:
        | Prisma.XOR<
              Prisma.MedicalRecordsCreateWithoutPatientInput,
              Prisma.MedicalRecordsUncheckedCreateWithoutPatientInput
          >
        | Prisma.MedicalRecordsCreateWithoutPatientInput[]
        | Prisma.MedicalRecordsUncheckedCreateWithoutPatientInput[];
    connectOrCreate?:
        | Prisma.MedicalRecordsCreateOrConnectWithoutPatientInput
        | Prisma.MedicalRecordsCreateOrConnectWithoutPatientInput[];
    upsert?:
        | Prisma.MedicalRecordsUpsertWithWhereUniqueWithoutPatientInput
        | Prisma.MedicalRecordsUpsertWithWhereUniqueWithoutPatientInput[];
    createMany?: Prisma.MedicalRecordsCreateManyPatientInputEnvelope;
    set?: Prisma.MedicalRecordsWhereUniqueInput | Prisma.MedicalRecordsWhereUniqueInput[];
    disconnect?: Prisma.MedicalRecordsWhereUniqueInput | Prisma.MedicalRecordsWhereUniqueInput[];
    delete?: Prisma.MedicalRecordsWhereUniqueInput | Prisma.MedicalRecordsWhereUniqueInput[];
    connect?: Prisma.MedicalRecordsWhereUniqueInput | Prisma.MedicalRecordsWhereUniqueInput[];
    update?:
        | Prisma.MedicalRecordsUpdateWithWhereUniqueWithoutPatientInput
        | Prisma.MedicalRecordsUpdateWithWhereUniqueWithoutPatientInput[];
    updateMany?:
        | Prisma.MedicalRecordsUpdateManyWithWhereWithoutPatientInput
        | Prisma.MedicalRecordsUpdateManyWithWhereWithoutPatientInput[];
    deleteMany?: Prisma.MedicalRecordsScalarWhereInput | Prisma.MedicalRecordsScalarWhereInput[];
};

export type MedicalRecordsCreateNestedManyWithoutAppointmentInput = {
    create?:
        | Prisma.XOR<
              Prisma.MedicalRecordsCreateWithoutAppointmentInput,
              Prisma.MedicalRecordsUncheckedCreateWithoutAppointmentInput
          >
        | Prisma.MedicalRecordsCreateWithoutAppointmentInput[]
        | Prisma.MedicalRecordsUncheckedCreateWithoutAppointmentInput[];
    connectOrCreate?:
        | Prisma.MedicalRecordsCreateOrConnectWithoutAppointmentInput
        | Prisma.MedicalRecordsCreateOrConnectWithoutAppointmentInput[];
    createMany?: Prisma.MedicalRecordsCreateManyAppointmentInputEnvelope;
    connect?: Prisma.MedicalRecordsWhereUniqueInput | Prisma.MedicalRecordsWhereUniqueInput[];
};

export type MedicalRecordsUncheckedCreateNestedManyWithoutAppointmentInput = {
    create?:
        | Prisma.XOR<
              Prisma.MedicalRecordsCreateWithoutAppointmentInput,
              Prisma.MedicalRecordsUncheckedCreateWithoutAppointmentInput
          >
        | Prisma.MedicalRecordsCreateWithoutAppointmentInput[]
        | Prisma.MedicalRecordsUncheckedCreateWithoutAppointmentInput[];
    connectOrCreate?:
        | Prisma.MedicalRecordsCreateOrConnectWithoutAppointmentInput
        | Prisma.MedicalRecordsCreateOrConnectWithoutAppointmentInput[];
    createMany?: Prisma.MedicalRecordsCreateManyAppointmentInputEnvelope;
    connect?: Prisma.MedicalRecordsWhereUniqueInput | Prisma.MedicalRecordsWhereUniqueInput[];
};

export type MedicalRecordsUpdateManyWithoutAppointmentNestedInput = {
    create?:
        | Prisma.XOR<
              Prisma.MedicalRecordsCreateWithoutAppointmentInput,
              Prisma.MedicalRecordsUncheckedCreateWithoutAppointmentInput
          >
        | Prisma.MedicalRecordsCreateWithoutAppointmentInput[]
        | Prisma.MedicalRecordsUncheckedCreateWithoutAppointmentInput[];
    connectOrCreate?:
        | Prisma.MedicalRecordsCreateOrConnectWithoutAppointmentInput
        | Prisma.MedicalRecordsCreateOrConnectWithoutAppointmentInput[];
    upsert?:
        | Prisma.MedicalRecordsUpsertWithWhereUniqueWithoutAppointmentInput
        | Prisma.MedicalRecordsUpsertWithWhereUniqueWithoutAppointmentInput[];
    createMany?: Prisma.MedicalRecordsCreateManyAppointmentInputEnvelope;
    set?: Prisma.MedicalRecordsWhereUniqueInput | Prisma.MedicalRecordsWhereUniqueInput[];
    disconnect?: Prisma.MedicalRecordsWhereUniqueInput | Prisma.MedicalRecordsWhereUniqueInput[];
    delete?: Prisma.MedicalRecordsWhereUniqueInput | Prisma.MedicalRecordsWhereUniqueInput[];
    connect?: Prisma.MedicalRecordsWhereUniqueInput | Prisma.MedicalRecordsWhereUniqueInput[];
    update?:
        | Prisma.MedicalRecordsUpdateWithWhereUniqueWithoutAppointmentInput
        | Prisma.MedicalRecordsUpdateWithWhereUniqueWithoutAppointmentInput[];
    updateMany?:
        | Prisma.MedicalRecordsUpdateManyWithWhereWithoutAppointmentInput
        | Prisma.MedicalRecordsUpdateManyWithWhereWithoutAppointmentInput[];
    deleteMany?: Prisma.MedicalRecordsScalarWhereInput | Prisma.MedicalRecordsScalarWhereInput[];
};

export type MedicalRecordsUncheckedUpdateManyWithoutAppointmentNestedInput = {
    create?:
        | Prisma.XOR<
              Prisma.MedicalRecordsCreateWithoutAppointmentInput,
              Prisma.MedicalRecordsUncheckedCreateWithoutAppointmentInput
          >
        | Prisma.MedicalRecordsCreateWithoutAppointmentInput[]
        | Prisma.MedicalRecordsUncheckedCreateWithoutAppointmentInput[];
    connectOrCreate?:
        | Prisma.MedicalRecordsCreateOrConnectWithoutAppointmentInput
        | Prisma.MedicalRecordsCreateOrConnectWithoutAppointmentInput[];
    upsert?:
        | Prisma.MedicalRecordsUpsertWithWhereUniqueWithoutAppointmentInput
        | Prisma.MedicalRecordsUpsertWithWhereUniqueWithoutAppointmentInput[];
    createMany?: Prisma.MedicalRecordsCreateManyAppointmentInputEnvelope;
    set?: Prisma.MedicalRecordsWhereUniqueInput | Prisma.MedicalRecordsWhereUniqueInput[];
    disconnect?: Prisma.MedicalRecordsWhereUniqueInput | Prisma.MedicalRecordsWhereUniqueInput[];
    delete?: Prisma.MedicalRecordsWhereUniqueInput | Prisma.MedicalRecordsWhereUniqueInput[];
    connect?: Prisma.MedicalRecordsWhereUniqueInput | Prisma.MedicalRecordsWhereUniqueInput[];
    update?:
        | Prisma.MedicalRecordsUpdateWithWhereUniqueWithoutAppointmentInput
        | Prisma.MedicalRecordsUpdateWithWhereUniqueWithoutAppointmentInput[];
    updateMany?:
        | Prisma.MedicalRecordsUpdateManyWithWhereWithoutAppointmentInput
        | Prisma.MedicalRecordsUpdateManyWithWhereWithoutAppointmentInput[];
    deleteMany?: Prisma.MedicalRecordsScalarWhereInput | Prisma.MedicalRecordsScalarWhereInput[];
};

export type MedicalRecordsCreateNestedOneWithoutLabTestInput = {
    create?: Prisma.XOR<
        Prisma.MedicalRecordsCreateWithoutLabTestInput,
        Prisma.MedicalRecordsUncheckedCreateWithoutLabTestInput
    >;
    connectOrCreate?: Prisma.MedicalRecordsCreateOrConnectWithoutLabTestInput;
    connect?: Prisma.MedicalRecordsWhereUniqueInput;
};

export type MedicalRecordsUpdateOneRequiredWithoutLabTestNestedInput = {
    create?: Prisma.XOR<
        Prisma.MedicalRecordsCreateWithoutLabTestInput,
        Prisma.MedicalRecordsUncheckedCreateWithoutLabTestInput
    >;
    connectOrCreate?: Prisma.MedicalRecordsCreateOrConnectWithoutLabTestInput;
    upsert?: Prisma.MedicalRecordsUpsertWithoutLabTestInput;
    connect?: Prisma.MedicalRecordsWhereUniqueInput;
    update?: Prisma.XOR<
        Prisma.XOR<
            Prisma.MedicalRecordsUpdateToOneWithWhereWithoutLabTestInput,
            Prisma.MedicalRecordsUpdateWithoutLabTestInput
        >,
        Prisma.MedicalRecordsUncheckedUpdateWithoutLabTestInput
    >;
};

export type MedicalRecordsCreateNestedOneWithoutVitalSignsInput = {
    create?: Prisma.XOR<
        Prisma.MedicalRecordsCreateWithoutVitalSignsInput,
        Prisma.MedicalRecordsUncheckedCreateWithoutVitalSignsInput
    >;
    connectOrCreate?: Prisma.MedicalRecordsCreateOrConnectWithoutVitalSignsInput;
    connect?: Prisma.MedicalRecordsWhereUniqueInput;
};

export type MedicalRecordsUpdateOneRequiredWithoutVitalSignsNestedInput = {
    create?: Prisma.XOR<
        Prisma.MedicalRecordsCreateWithoutVitalSignsInput,
        Prisma.MedicalRecordsUncheckedCreateWithoutVitalSignsInput
    >;
    connectOrCreate?: Prisma.MedicalRecordsCreateOrConnectWithoutVitalSignsInput;
    upsert?: Prisma.MedicalRecordsUpsertWithoutVitalSignsInput;
    connect?: Prisma.MedicalRecordsWhereUniqueInput;
    update?: Prisma.XOR<
        Prisma.XOR<
            Prisma.MedicalRecordsUpdateToOneWithWhereWithoutVitalSignsInput,
            Prisma.MedicalRecordsUpdateWithoutVitalSignsInput
        >,
        Prisma.MedicalRecordsUncheckedUpdateWithoutVitalSignsInput
    >;
};

export type MedicalRecordsCreateNestedOneWithoutDiagnosisInput = {
    create?: Prisma.XOR<
        Prisma.MedicalRecordsCreateWithoutDiagnosisInput,
        Prisma.MedicalRecordsUncheckedCreateWithoutDiagnosisInput
    >;
    connectOrCreate?: Prisma.MedicalRecordsCreateOrConnectWithoutDiagnosisInput;
    connect?: Prisma.MedicalRecordsWhereUniqueInput;
};

export type MedicalRecordsUpdateOneRequiredWithoutDiagnosisNestedInput = {
    create?: Prisma.XOR<
        Prisma.MedicalRecordsCreateWithoutDiagnosisInput,
        Prisma.MedicalRecordsUncheckedCreateWithoutDiagnosisInput
    >;
    connectOrCreate?: Prisma.MedicalRecordsCreateOrConnectWithoutDiagnosisInput;
    upsert?: Prisma.MedicalRecordsUpsertWithoutDiagnosisInput;
    connect?: Prisma.MedicalRecordsWhereUniqueInput;
    update?: Prisma.XOR<
        Prisma.XOR<
            Prisma.MedicalRecordsUpdateToOneWithWhereWithoutDiagnosisInput,
            Prisma.MedicalRecordsUpdateWithoutDiagnosisInput
        >,
        Prisma.MedicalRecordsUncheckedUpdateWithoutDiagnosisInput
    >;
};

export type MedicalRecordsCreateNestedOneWithoutPrescriptionInput = {
    create?: Prisma.XOR<
        Prisma.MedicalRecordsCreateWithoutPrescriptionInput,
        Prisma.MedicalRecordsUncheckedCreateWithoutPrescriptionInput
    >;
    connectOrCreate?: Prisma.MedicalRecordsCreateOrConnectWithoutPrescriptionInput;
    connect?: Prisma.MedicalRecordsWhereUniqueInput;
};

export type MedicalRecordsUpdateOneRequiredWithoutPrescriptionNestedInput = {
    create?: Prisma.XOR<
        Prisma.MedicalRecordsCreateWithoutPrescriptionInput,
        Prisma.MedicalRecordsUncheckedCreateWithoutPrescriptionInput
    >;
    connectOrCreate?: Prisma.MedicalRecordsCreateOrConnectWithoutPrescriptionInput;
    upsert?: Prisma.MedicalRecordsUpsertWithoutPrescriptionInput;
    connect?: Prisma.MedicalRecordsWhereUniqueInput;
    update?: Prisma.XOR<
        Prisma.XOR<
            Prisma.MedicalRecordsUpdateToOneWithWhereWithoutPrescriptionInput,
            Prisma.MedicalRecordsUpdateWithoutPrescriptionInput
        >,
        Prisma.MedicalRecordsUncheckedUpdateWithoutPrescriptionInput
    >;
};

export type MedicalRecordsCreateWithoutPatientInput = {
    doctorId: string;
    treatmentPlan?: string | null;
    prescriptions?: string | null;
    labRequest?: string | null;
    notes?: string | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    appointment: Prisma.AppointmentCreateNestedOneWithoutMedicalInput;
    labTest?: Prisma.LabTestCreateNestedManyWithoutMedicalRecordInput;
    vitalSigns?: Prisma.VitalSignsCreateNestedManyWithoutMedicalInput;
    diagnosis?: Prisma.DiagnosisCreateNestedManyWithoutMedicalInput;
    Prescription?: Prisma.PrescriptionCreateNestedManyWithoutMedicalRecordInput;
};

export type MedicalRecordsUncheckedCreateWithoutPatientInput = {
    id?: number;
    appointmentId: number;
    doctorId: string;
    treatmentPlan?: string | null;
    prescriptions?: string | null;
    labRequest?: string | null;
    notes?: string | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    labTest?: Prisma.LabTestUncheckedCreateNestedManyWithoutMedicalRecordInput;
    vitalSigns?: Prisma.VitalSignsUncheckedCreateNestedManyWithoutMedicalInput;
    diagnosis?: Prisma.DiagnosisUncheckedCreateNestedManyWithoutMedicalInput;
    Prescription?: Prisma.PrescriptionUncheckedCreateNestedManyWithoutMedicalRecordInput;
};

export type MedicalRecordsCreateOrConnectWithoutPatientInput = {
    where: Prisma.MedicalRecordsWhereUniqueInput;
    create: Prisma.XOR<
        Prisma.MedicalRecordsCreateWithoutPatientInput,
        Prisma.MedicalRecordsUncheckedCreateWithoutPatientInput
    >;
};

export type MedicalRecordsCreateManyPatientInputEnvelope = {
    data: Prisma.MedicalRecordsCreateManyPatientInput | Prisma.MedicalRecordsCreateManyPatientInput[];
    skipDuplicates?: boolean;
};

export type MedicalRecordsUpsertWithWhereUniqueWithoutPatientInput = {
    where: Prisma.MedicalRecordsWhereUniqueInput;
    update: Prisma.XOR<
        Prisma.MedicalRecordsUpdateWithoutPatientInput,
        Prisma.MedicalRecordsUncheckedUpdateWithoutPatientInput
    >;
    create: Prisma.XOR<
        Prisma.MedicalRecordsCreateWithoutPatientInput,
        Prisma.MedicalRecordsUncheckedCreateWithoutPatientInput
    >;
};

export type MedicalRecordsUpdateWithWhereUniqueWithoutPatientInput = {
    where: Prisma.MedicalRecordsWhereUniqueInput;
    data: Prisma.XOR<
        Prisma.MedicalRecordsUpdateWithoutPatientInput,
        Prisma.MedicalRecordsUncheckedUpdateWithoutPatientInput
    >;
};

export type MedicalRecordsUpdateManyWithWhereWithoutPatientInput = {
    where: Prisma.MedicalRecordsScalarWhereInput;
    data: Prisma.XOR<
        Prisma.MedicalRecordsUpdateManyMutationInput,
        Prisma.MedicalRecordsUncheckedUpdateManyWithoutPatientInput
    >;
};

export type MedicalRecordsScalarWhereInput = {
    AND?: Prisma.MedicalRecordsScalarWhereInput | Prisma.MedicalRecordsScalarWhereInput[];
    OR?: Prisma.MedicalRecordsScalarWhereInput[];
    NOT?: Prisma.MedicalRecordsScalarWhereInput | Prisma.MedicalRecordsScalarWhereInput[];
    id?: Prisma.IntFilter<'MedicalRecords'> | number;
    patientId?: Prisma.StringFilter<'MedicalRecords'> | string;
    appointmentId?: Prisma.IntFilter<'MedicalRecords'> | number;
    doctorId?: Prisma.StringFilter<'MedicalRecords'> | string;
    treatmentPlan?: Prisma.StringNullableFilter<'MedicalRecords'> | string | null;
    prescriptions?: Prisma.StringNullableFilter<'MedicalRecords'> | string | null;
    labRequest?: Prisma.StringNullableFilter<'MedicalRecords'> | string | null;
    notes?: Prisma.StringNullableFilter<'MedicalRecords'> | string | null;
    createdAt?: Prisma.DateTimeFilter<'MedicalRecords'> | Date | string;
    updatedAt?: Prisma.DateTimeFilter<'MedicalRecords'> | Date | string;
};

export type MedicalRecordsCreateWithoutAppointmentInput = {
    doctorId: string;
    treatmentPlan?: string | null;
    prescriptions?: string | null;
    labRequest?: string | null;
    notes?: string | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    patient: Prisma.PatientCreateNestedOneWithoutMedicalInput;
    labTest?: Prisma.LabTestCreateNestedManyWithoutMedicalRecordInput;
    vitalSigns?: Prisma.VitalSignsCreateNestedManyWithoutMedicalInput;
    diagnosis?: Prisma.DiagnosisCreateNestedManyWithoutMedicalInput;
    Prescription?: Prisma.PrescriptionCreateNestedManyWithoutMedicalRecordInput;
};

export type MedicalRecordsUncheckedCreateWithoutAppointmentInput = {
    id?: number;
    patientId: string;
    doctorId: string;
    treatmentPlan?: string | null;
    prescriptions?: string | null;
    labRequest?: string | null;
    notes?: string | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    labTest?: Prisma.LabTestUncheckedCreateNestedManyWithoutMedicalRecordInput;
    vitalSigns?: Prisma.VitalSignsUncheckedCreateNestedManyWithoutMedicalInput;
    diagnosis?: Prisma.DiagnosisUncheckedCreateNestedManyWithoutMedicalInput;
    Prescription?: Prisma.PrescriptionUncheckedCreateNestedManyWithoutMedicalRecordInput;
};

export type MedicalRecordsCreateOrConnectWithoutAppointmentInput = {
    where: Prisma.MedicalRecordsWhereUniqueInput;
    create: Prisma.XOR<
        Prisma.MedicalRecordsCreateWithoutAppointmentInput,
        Prisma.MedicalRecordsUncheckedCreateWithoutAppointmentInput
    >;
};

export type MedicalRecordsCreateManyAppointmentInputEnvelope = {
    data: Prisma.MedicalRecordsCreateManyAppointmentInput | Prisma.MedicalRecordsCreateManyAppointmentInput[];
    skipDuplicates?: boolean;
};

export type MedicalRecordsUpsertWithWhereUniqueWithoutAppointmentInput = {
    where: Prisma.MedicalRecordsWhereUniqueInput;
    update: Prisma.XOR<
        Prisma.MedicalRecordsUpdateWithoutAppointmentInput,
        Prisma.MedicalRecordsUncheckedUpdateWithoutAppointmentInput
    >;
    create: Prisma.XOR<
        Prisma.MedicalRecordsCreateWithoutAppointmentInput,
        Prisma.MedicalRecordsUncheckedCreateWithoutAppointmentInput
    >;
};

export type MedicalRecordsUpdateWithWhereUniqueWithoutAppointmentInput = {
    where: Prisma.MedicalRecordsWhereUniqueInput;
    data: Prisma.XOR<
        Prisma.MedicalRecordsUpdateWithoutAppointmentInput,
        Prisma.MedicalRecordsUncheckedUpdateWithoutAppointmentInput
    >;
};

export type MedicalRecordsUpdateManyWithWhereWithoutAppointmentInput = {
    where: Prisma.MedicalRecordsScalarWhereInput;
    data: Prisma.XOR<
        Prisma.MedicalRecordsUpdateManyMutationInput,
        Prisma.MedicalRecordsUncheckedUpdateManyWithoutAppointmentInput
    >;
};

export type MedicalRecordsCreateWithoutLabTestInput = {
    doctorId: string;
    treatmentPlan?: string | null;
    prescriptions?: string | null;
    labRequest?: string | null;
    notes?: string | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    appointment: Prisma.AppointmentCreateNestedOneWithoutMedicalInput;
    patient: Prisma.PatientCreateNestedOneWithoutMedicalInput;
    vitalSigns?: Prisma.VitalSignsCreateNestedManyWithoutMedicalInput;
    diagnosis?: Prisma.DiagnosisCreateNestedManyWithoutMedicalInput;
    Prescription?: Prisma.PrescriptionCreateNestedManyWithoutMedicalRecordInput;
};

export type MedicalRecordsUncheckedCreateWithoutLabTestInput = {
    id?: number;
    patientId: string;
    appointmentId: number;
    doctorId: string;
    treatmentPlan?: string | null;
    prescriptions?: string | null;
    labRequest?: string | null;
    notes?: string | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    vitalSigns?: Prisma.VitalSignsUncheckedCreateNestedManyWithoutMedicalInput;
    diagnosis?: Prisma.DiagnosisUncheckedCreateNestedManyWithoutMedicalInput;
    Prescription?: Prisma.PrescriptionUncheckedCreateNestedManyWithoutMedicalRecordInput;
};

export type MedicalRecordsCreateOrConnectWithoutLabTestInput = {
    where: Prisma.MedicalRecordsWhereUniqueInput;
    create: Prisma.XOR<
        Prisma.MedicalRecordsCreateWithoutLabTestInput,
        Prisma.MedicalRecordsUncheckedCreateWithoutLabTestInput
    >;
};

export type MedicalRecordsUpsertWithoutLabTestInput = {
    update: Prisma.XOR<
        Prisma.MedicalRecordsUpdateWithoutLabTestInput,
        Prisma.MedicalRecordsUncheckedUpdateWithoutLabTestInput
    >;
    create: Prisma.XOR<
        Prisma.MedicalRecordsCreateWithoutLabTestInput,
        Prisma.MedicalRecordsUncheckedCreateWithoutLabTestInput
    >;
    where?: Prisma.MedicalRecordsWhereInput;
};

export type MedicalRecordsUpdateToOneWithWhereWithoutLabTestInput = {
    where?: Prisma.MedicalRecordsWhereInput;
    data: Prisma.XOR<
        Prisma.MedicalRecordsUpdateWithoutLabTestInput,
        Prisma.MedicalRecordsUncheckedUpdateWithoutLabTestInput
    >;
};

export type MedicalRecordsUpdateWithoutLabTestInput = {
    doctorId?: Prisma.StringFieldUpdateOperationsInput | string;
    treatmentPlan?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    prescriptions?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    labRequest?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    appointment?: Prisma.AppointmentUpdateOneRequiredWithoutMedicalNestedInput;
    patient?: Prisma.PatientUpdateOneRequiredWithoutMedicalNestedInput;
    vitalSigns?: Prisma.VitalSignsUpdateManyWithoutMedicalNestedInput;
    diagnosis?: Prisma.DiagnosisUpdateManyWithoutMedicalNestedInput;
    Prescription?: Prisma.PrescriptionUpdateManyWithoutMedicalRecordNestedInput;
};

export type MedicalRecordsUncheckedUpdateWithoutLabTestInput = {
    id?: Prisma.IntFieldUpdateOperationsInput | number;
    patientId?: Prisma.StringFieldUpdateOperationsInput | string;
    appointmentId?: Prisma.IntFieldUpdateOperationsInput | number;
    doctorId?: Prisma.StringFieldUpdateOperationsInput | string;
    treatmentPlan?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    prescriptions?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    labRequest?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    vitalSigns?: Prisma.VitalSignsUncheckedUpdateManyWithoutMedicalNestedInput;
    diagnosis?: Prisma.DiagnosisUncheckedUpdateManyWithoutMedicalNestedInput;
    Prescription?: Prisma.PrescriptionUncheckedUpdateManyWithoutMedicalRecordNestedInput;
};

export type MedicalRecordsCreateWithoutVitalSignsInput = {
    doctorId: string;
    treatmentPlan?: string | null;
    prescriptions?: string | null;
    labRequest?: string | null;
    notes?: string | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    appointment: Prisma.AppointmentCreateNestedOneWithoutMedicalInput;
    patient: Prisma.PatientCreateNestedOneWithoutMedicalInput;
    labTest?: Prisma.LabTestCreateNestedManyWithoutMedicalRecordInput;
    diagnosis?: Prisma.DiagnosisCreateNestedManyWithoutMedicalInput;
    Prescription?: Prisma.PrescriptionCreateNestedManyWithoutMedicalRecordInput;
};

export type MedicalRecordsUncheckedCreateWithoutVitalSignsInput = {
    id?: number;
    patientId: string;
    appointmentId: number;
    doctorId: string;
    treatmentPlan?: string | null;
    prescriptions?: string | null;
    labRequest?: string | null;
    notes?: string | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    labTest?: Prisma.LabTestUncheckedCreateNestedManyWithoutMedicalRecordInput;
    diagnosis?: Prisma.DiagnosisUncheckedCreateNestedManyWithoutMedicalInput;
    Prescription?: Prisma.PrescriptionUncheckedCreateNestedManyWithoutMedicalRecordInput;
};

export type MedicalRecordsCreateOrConnectWithoutVitalSignsInput = {
    where: Prisma.MedicalRecordsWhereUniqueInput;
    create: Prisma.XOR<
        Prisma.MedicalRecordsCreateWithoutVitalSignsInput,
        Prisma.MedicalRecordsUncheckedCreateWithoutVitalSignsInput
    >;
};

export type MedicalRecordsUpsertWithoutVitalSignsInput = {
    update: Prisma.XOR<
        Prisma.MedicalRecordsUpdateWithoutVitalSignsInput,
        Prisma.MedicalRecordsUncheckedUpdateWithoutVitalSignsInput
    >;
    create: Prisma.XOR<
        Prisma.MedicalRecordsCreateWithoutVitalSignsInput,
        Prisma.MedicalRecordsUncheckedCreateWithoutVitalSignsInput
    >;
    where?: Prisma.MedicalRecordsWhereInput;
};

export type MedicalRecordsUpdateToOneWithWhereWithoutVitalSignsInput = {
    where?: Prisma.MedicalRecordsWhereInput;
    data: Prisma.XOR<
        Prisma.MedicalRecordsUpdateWithoutVitalSignsInput,
        Prisma.MedicalRecordsUncheckedUpdateWithoutVitalSignsInput
    >;
};

export type MedicalRecordsUpdateWithoutVitalSignsInput = {
    doctorId?: Prisma.StringFieldUpdateOperationsInput | string;
    treatmentPlan?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    prescriptions?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    labRequest?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    appointment?: Prisma.AppointmentUpdateOneRequiredWithoutMedicalNestedInput;
    patient?: Prisma.PatientUpdateOneRequiredWithoutMedicalNestedInput;
    labTest?: Prisma.LabTestUpdateManyWithoutMedicalRecordNestedInput;
    diagnosis?: Prisma.DiagnosisUpdateManyWithoutMedicalNestedInput;
    Prescription?: Prisma.PrescriptionUpdateManyWithoutMedicalRecordNestedInput;
};

export type MedicalRecordsUncheckedUpdateWithoutVitalSignsInput = {
    id?: Prisma.IntFieldUpdateOperationsInput | number;
    patientId?: Prisma.StringFieldUpdateOperationsInput | string;
    appointmentId?: Prisma.IntFieldUpdateOperationsInput | number;
    doctorId?: Prisma.StringFieldUpdateOperationsInput | string;
    treatmentPlan?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    prescriptions?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    labRequest?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    labTest?: Prisma.LabTestUncheckedUpdateManyWithoutMedicalRecordNestedInput;
    diagnosis?: Prisma.DiagnosisUncheckedUpdateManyWithoutMedicalNestedInput;
    Prescription?: Prisma.PrescriptionUncheckedUpdateManyWithoutMedicalRecordNestedInput;
};

export type MedicalRecordsCreateWithoutDiagnosisInput = {
    doctorId: string;
    treatmentPlan?: string | null;
    prescriptions?: string | null;
    labRequest?: string | null;
    notes?: string | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    appointment: Prisma.AppointmentCreateNestedOneWithoutMedicalInput;
    patient: Prisma.PatientCreateNestedOneWithoutMedicalInput;
    labTest?: Prisma.LabTestCreateNestedManyWithoutMedicalRecordInput;
    vitalSigns?: Prisma.VitalSignsCreateNestedManyWithoutMedicalInput;
    Prescription?: Prisma.PrescriptionCreateNestedManyWithoutMedicalRecordInput;
};

export type MedicalRecordsUncheckedCreateWithoutDiagnosisInput = {
    id?: number;
    patientId: string;
    appointmentId: number;
    doctorId: string;
    treatmentPlan?: string | null;
    prescriptions?: string | null;
    labRequest?: string | null;
    notes?: string | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    labTest?: Prisma.LabTestUncheckedCreateNestedManyWithoutMedicalRecordInput;
    vitalSigns?: Prisma.VitalSignsUncheckedCreateNestedManyWithoutMedicalInput;
    Prescription?: Prisma.PrescriptionUncheckedCreateNestedManyWithoutMedicalRecordInput;
};

export type MedicalRecordsCreateOrConnectWithoutDiagnosisInput = {
    where: Prisma.MedicalRecordsWhereUniqueInput;
    create: Prisma.XOR<
        Prisma.MedicalRecordsCreateWithoutDiagnosisInput,
        Prisma.MedicalRecordsUncheckedCreateWithoutDiagnosisInput
    >;
};

export type MedicalRecordsUpsertWithoutDiagnosisInput = {
    update: Prisma.XOR<
        Prisma.MedicalRecordsUpdateWithoutDiagnosisInput,
        Prisma.MedicalRecordsUncheckedUpdateWithoutDiagnosisInput
    >;
    create: Prisma.XOR<
        Prisma.MedicalRecordsCreateWithoutDiagnosisInput,
        Prisma.MedicalRecordsUncheckedCreateWithoutDiagnosisInput
    >;
    where?: Prisma.MedicalRecordsWhereInput;
};

export type MedicalRecordsUpdateToOneWithWhereWithoutDiagnosisInput = {
    where?: Prisma.MedicalRecordsWhereInput;
    data: Prisma.XOR<
        Prisma.MedicalRecordsUpdateWithoutDiagnosisInput,
        Prisma.MedicalRecordsUncheckedUpdateWithoutDiagnosisInput
    >;
};

export type MedicalRecordsUpdateWithoutDiagnosisInput = {
    doctorId?: Prisma.StringFieldUpdateOperationsInput | string;
    treatmentPlan?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    prescriptions?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    labRequest?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    appointment?: Prisma.AppointmentUpdateOneRequiredWithoutMedicalNestedInput;
    patient?: Prisma.PatientUpdateOneRequiredWithoutMedicalNestedInput;
    labTest?: Prisma.LabTestUpdateManyWithoutMedicalRecordNestedInput;
    vitalSigns?: Prisma.VitalSignsUpdateManyWithoutMedicalNestedInput;
    Prescription?: Prisma.PrescriptionUpdateManyWithoutMedicalRecordNestedInput;
};

export type MedicalRecordsUncheckedUpdateWithoutDiagnosisInput = {
    id?: Prisma.IntFieldUpdateOperationsInput | number;
    patientId?: Prisma.StringFieldUpdateOperationsInput | string;
    appointmentId?: Prisma.IntFieldUpdateOperationsInput | number;
    doctorId?: Prisma.StringFieldUpdateOperationsInput | string;
    treatmentPlan?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    prescriptions?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    labRequest?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    labTest?: Prisma.LabTestUncheckedUpdateManyWithoutMedicalRecordNestedInput;
    vitalSigns?: Prisma.VitalSignsUncheckedUpdateManyWithoutMedicalNestedInput;
    Prescription?: Prisma.PrescriptionUncheckedUpdateManyWithoutMedicalRecordNestedInput;
};

export type MedicalRecordsCreateWithoutPrescriptionInput = {
    doctorId: string;
    treatmentPlan?: string | null;
    prescriptions?: string | null;
    labRequest?: string | null;
    notes?: string | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    appointment: Prisma.AppointmentCreateNestedOneWithoutMedicalInput;
    patient: Prisma.PatientCreateNestedOneWithoutMedicalInput;
    labTest?: Prisma.LabTestCreateNestedManyWithoutMedicalRecordInput;
    vitalSigns?: Prisma.VitalSignsCreateNestedManyWithoutMedicalInput;
    diagnosis?: Prisma.DiagnosisCreateNestedManyWithoutMedicalInput;
};

export type MedicalRecordsUncheckedCreateWithoutPrescriptionInput = {
    id?: number;
    patientId: string;
    appointmentId: number;
    doctorId: string;
    treatmentPlan?: string | null;
    prescriptions?: string | null;
    labRequest?: string | null;
    notes?: string | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    labTest?: Prisma.LabTestUncheckedCreateNestedManyWithoutMedicalRecordInput;
    vitalSigns?: Prisma.VitalSignsUncheckedCreateNestedManyWithoutMedicalInput;
    diagnosis?: Prisma.DiagnosisUncheckedCreateNestedManyWithoutMedicalInput;
};

export type MedicalRecordsCreateOrConnectWithoutPrescriptionInput = {
    where: Prisma.MedicalRecordsWhereUniqueInput;
    create: Prisma.XOR<
        Prisma.MedicalRecordsCreateWithoutPrescriptionInput,
        Prisma.MedicalRecordsUncheckedCreateWithoutPrescriptionInput
    >;
};

export type MedicalRecordsUpsertWithoutPrescriptionInput = {
    update: Prisma.XOR<
        Prisma.MedicalRecordsUpdateWithoutPrescriptionInput,
        Prisma.MedicalRecordsUncheckedUpdateWithoutPrescriptionInput
    >;
    create: Prisma.XOR<
        Prisma.MedicalRecordsCreateWithoutPrescriptionInput,
        Prisma.MedicalRecordsUncheckedCreateWithoutPrescriptionInput
    >;
    where?: Prisma.MedicalRecordsWhereInput;
};

export type MedicalRecordsUpdateToOneWithWhereWithoutPrescriptionInput = {
    where?: Prisma.MedicalRecordsWhereInput;
    data: Prisma.XOR<
        Prisma.MedicalRecordsUpdateWithoutPrescriptionInput,
        Prisma.MedicalRecordsUncheckedUpdateWithoutPrescriptionInput
    >;
};

export type MedicalRecordsUpdateWithoutPrescriptionInput = {
    doctorId?: Prisma.StringFieldUpdateOperationsInput | string;
    treatmentPlan?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    prescriptions?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    labRequest?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    appointment?: Prisma.AppointmentUpdateOneRequiredWithoutMedicalNestedInput;
    patient?: Prisma.PatientUpdateOneRequiredWithoutMedicalNestedInput;
    labTest?: Prisma.LabTestUpdateManyWithoutMedicalRecordNestedInput;
    vitalSigns?: Prisma.VitalSignsUpdateManyWithoutMedicalNestedInput;
    diagnosis?: Prisma.DiagnosisUpdateManyWithoutMedicalNestedInput;
};

export type MedicalRecordsUncheckedUpdateWithoutPrescriptionInput = {
    id?: Prisma.IntFieldUpdateOperationsInput | number;
    patientId?: Prisma.StringFieldUpdateOperationsInput | string;
    appointmentId?: Prisma.IntFieldUpdateOperationsInput | number;
    doctorId?: Prisma.StringFieldUpdateOperationsInput | string;
    treatmentPlan?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    prescriptions?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    labRequest?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    labTest?: Prisma.LabTestUncheckedUpdateManyWithoutMedicalRecordNestedInput;
    vitalSigns?: Prisma.VitalSignsUncheckedUpdateManyWithoutMedicalNestedInput;
    diagnosis?: Prisma.DiagnosisUncheckedUpdateManyWithoutMedicalNestedInput;
};

export type MedicalRecordsCreateManyPatientInput = {
    id?: number;
    appointmentId: number;
    doctorId: string;
    treatmentPlan?: string | null;
    prescriptions?: string | null;
    labRequest?: string | null;
    notes?: string | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
};

export type MedicalRecordsUpdateWithoutPatientInput = {
    doctorId?: Prisma.StringFieldUpdateOperationsInput | string;
    treatmentPlan?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    prescriptions?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    labRequest?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    appointment?: Prisma.AppointmentUpdateOneRequiredWithoutMedicalNestedInput;
    labTest?: Prisma.LabTestUpdateManyWithoutMedicalRecordNestedInput;
    vitalSigns?: Prisma.VitalSignsUpdateManyWithoutMedicalNestedInput;
    diagnosis?: Prisma.DiagnosisUpdateManyWithoutMedicalNestedInput;
    Prescription?: Prisma.PrescriptionUpdateManyWithoutMedicalRecordNestedInput;
};

export type MedicalRecordsUncheckedUpdateWithoutPatientInput = {
    id?: Prisma.IntFieldUpdateOperationsInput | number;
    appointmentId?: Prisma.IntFieldUpdateOperationsInput | number;
    doctorId?: Prisma.StringFieldUpdateOperationsInput | string;
    treatmentPlan?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    prescriptions?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    labRequest?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    labTest?: Prisma.LabTestUncheckedUpdateManyWithoutMedicalRecordNestedInput;
    vitalSigns?: Prisma.VitalSignsUncheckedUpdateManyWithoutMedicalNestedInput;
    diagnosis?: Prisma.DiagnosisUncheckedUpdateManyWithoutMedicalNestedInput;
    Prescription?: Prisma.PrescriptionUncheckedUpdateManyWithoutMedicalRecordNestedInput;
};

export type MedicalRecordsUncheckedUpdateManyWithoutPatientInput = {
    id?: Prisma.IntFieldUpdateOperationsInput | number;
    appointmentId?: Prisma.IntFieldUpdateOperationsInput | number;
    doctorId?: Prisma.StringFieldUpdateOperationsInput | string;
    treatmentPlan?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    prescriptions?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    labRequest?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type MedicalRecordsCreateManyAppointmentInput = {
    id?: number;
    patientId: string;
    doctorId: string;
    treatmentPlan?: string | null;
    prescriptions?: string | null;
    labRequest?: string | null;
    notes?: string | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
};

export type MedicalRecordsUpdateWithoutAppointmentInput = {
    doctorId?: Prisma.StringFieldUpdateOperationsInput | string;
    treatmentPlan?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    prescriptions?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    labRequest?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    patient?: Prisma.PatientUpdateOneRequiredWithoutMedicalNestedInput;
    labTest?: Prisma.LabTestUpdateManyWithoutMedicalRecordNestedInput;
    vitalSigns?: Prisma.VitalSignsUpdateManyWithoutMedicalNestedInput;
    diagnosis?: Prisma.DiagnosisUpdateManyWithoutMedicalNestedInput;
    Prescription?: Prisma.PrescriptionUpdateManyWithoutMedicalRecordNestedInput;
};

export type MedicalRecordsUncheckedUpdateWithoutAppointmentInput = {
    id?: Prisma.IntFieldUpdateOperationsInput | number;
    patientId?: Prisma.StringFieldUpdateOperationsInput | string;
    doctorId?: Prisma.StringFieldUpdateOperationsInput | string;
    treatmentPlan?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    prescriptions?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    labRequest?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    labTest?: Prisma.LabTestUncheckedUpdateManyWithoutMedicalRecordNestedInput;
    vitalSigns?: Prisma.VitalSignsUncheckedUpdateManyWithoutMedicalNestedInput;
    diagnosis?: Prisma.DiagnosisUncheckedUpdateManyWithoutMedicalNestedInput;
    Prescription?: Prisma.PrescriptionUncheckedUpdateManyWithoutMedicalRecordNestedInput;
};

export type MedicalRecordsUncheckedUpdateManyWithoutAppointmentInput = {
    id?: Prisma.IntFieldUpdateOperationsInput | number;
    patientId?: Prisma.StringFieldUpdateOperationsInput | string;
    doctorId?: Prisma.StringFieldUpdateOperationsInput | string;
    treatmentPlan?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    prescriptions?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    labRequest?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

/**
 * Count Type MedicalRecordsCountOutputType
 */

export type MedicalRecordsCountOutputType = {
    labTest: number;
    vitalSigns: number;
    diagnosis: number;
    Prescription: number;
};

export type MedicalRecordsCountOutputTypeSelect<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    labTest?: boolean | MedicalRecordsCountOutputTypeCountLabTestArgs;
    vitalSigns?: boolean | MedicalRecordsCountOutputTypeCountVitalSignsArgs;
    diagnosis?: boolean | MedicalRecordsCountOutputTypeCountDiagnosisArgs;
    Prescription?: boolean | MedicalRecordsCountOutputTypeCountPrescriptionArgs;
};

/**
 * MedicalRecordsCountOutputType without action
 */
export type MedicalRecordsCountOutputTypeDefaultArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the MedicalRecordsCountOutputType
     */
    select?: Prisma.MedicalRecordsCountOutputTypeSelect<ExtArgs> | null;
};

/**
 * MedicalRecordsCountOutputType without action
 */
export type MedicalRecordsCountOutputTypeCountLabTestArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    where?: Prisma.LabTestWhereInput;
};

/**
 * MedicalRecordsCountOutputType without action
 */
export type MedicalRecordsCountOutputTypeCountVitalSignsArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    where?: Prisma.VitalSignsWhereInput;
};

/**
 * MedicalRecordsCountOutputType without action
 */
export type MedicalRecordsCountOutputTypeCountDiagnosisArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    where?: Prisma.DiagnosisWhereInput;
};

/**
 * MedicalRecordsCountOutputType without action
 */
export type MedicalRecordsCountOutputTypeCountPrescriptionArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    where?: Prisma.PrescriptionWhereInput;
};

export type MedicalRecordsSelect<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
    {
        id?: boolean;
        patientId?: boolean;
        appointmentId?: boolean;
        doctorId?: boolean;
        treatmentPlan?: boolean;
        prescriptions?: boolean;
        labRequest?: boolean;
        notes?: boolean;
        createdAt?: boolean;
        updatedAt?: boolean;
        appointment?: boolean | Prisma.AppointmentDefaultArgs<ExtArgs>;
        patient?: boolean | Prisma.PatientDefaultArgs<ExtArgs>;
        labTest?: boolean | Prisma.MedicalRecords$labTestArgs<ExtArgs>;
        vitalSigns?: boolean | Prisma.MedicalRecords$vitalSignsArgs<ExtArgs>;
        diagnosis?: boolean | Prisma.MedicalRecords$diagnosisArgs<ExtArgs>;
        Prescription?: boolean | Prisma.MedicalRecords$PrescriptionArgs<ExtArgs>;
        _count?: boolean | Prisma.MedicalRecordsCountOutputTypeDefaultArgs<ExtArgs>;
    },
    ExtArgs['result']['medicalRecords']
>;

export type MedicalRecordsSelectCreateManyAndReturn<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
    {
        id?: boolean;
        patientId?: boolean;
        appointmentId?: boolean;
        doctorId?: boolean;
        treatmentPlan?: boolean;
        prescriptions?: boolean;
        labRequest?: boolean;
        notes?: boolean;
        createdAt?: boolean;
        updatedAt?: boolean;
        appointment?: boolean | Prisma.AppointmentDefaultArgs<ExtArgs>;
        patient?: boolean | Prisma.PatientDefaultArgs<ExtArgs>;
    },
    ExtArgs['result']['medicalRecords']
>;

export type MedicalRecordsSelectUpdateManyAndReturn<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
    {
        id?: boolean;
        patientId?: boolean;
        appointmentId?: boolean;
        doctorId?: boolean;
        treatmentPlan?: boolean;
        prescriptions?: boolean;
        labRequest?: boolean;
        notes?: boolean;
        createdAt?: boolean;
        updatedAt?: boolean;
        appointment?: boolean | Prisma.AppointmentDefaultArgs<ExtArgs>;
        patient?: boolean | Prisma.PatientDefaultArgs<ExtArgs>;
    },
    ExtArgs['result']['medicalRecords']
>;

export type MedicalRecordsSelectScalar = {
    id?: boolean;
    patientId?: boolean;
    appointmentId?: boolean;
    doctorId?: boolean;
    treatmentPlan?: boolean;
    prescriptions?: boolean;
    labRequest?: boolean;
    notes?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
};

export type MedicalRecordsOmit<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetOmit<
    | 'id'
    | 'patientId'
    | 'appointmentId'
    | 'doctorId'
    | 'treatmentPlan'
    | 'prescriptions'
    | 'labRequest'
    | 'notes'
    | 'createdAt'
    | 'updatedAt',
    ExtArgs['result']['medicalRecords']
>;
export type MedicalRecordsInclude<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    appointment?: boolean | Prisma.AppointmentDefaultArgs<ExtArgs>;
    patient?: boolean | Prisma.PatientDefaultArgs<ExtArgs>;
    labTest?: boolean | Prisma.MedicalRecords$labTestArgs<ExtArgs>;
    vitalSigns?: boolean | Prisma.MedicalRecords$vitalSignsArgs<ExtArgs>;
    diagnosis?: boolean | Prisma.MedicalRecords$diagnosisArgs<ExtArgs>;
    Prescription?: boolean | Prisma.MedicalRecords$PrescriptionArgs<ExtArgs>;
    _count?: boolean | Prisma.MedicalRecordsCountOutputTypeDefaultArgs<ExtArgs>;
};
export type MedicalRecordsIncludeCreateManyAndReturn<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    appointment?: boolean | Prisma.AppointmentDefaultArgs<ExtArgs>;
    patient?: boolean | Prisma.PatientDefaultArgs<ExtArgs>;
};
export type MedicalRecordsIncludeUpdateManyAndReturn<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    appointment?: boolean | Prisma.AppointmentDefaultArgs<ExtArgs>;
    patient?: boolean | Prisma.PatientDefaultArgs<ExtArgs>;
};

export type $MedicalRecordsPayload<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    name: 'MedicalRecords';
    objects: {
        appointment: Prisma.$AppointmentPayload<ExtArgs>;
        patient: Prisma.$PatientPayload<ExtArgs>;
        labTest: Prisma.$LabTestPayload<ExtArgs>[];
        vitalSigns: Prisma.$VitalSignsPayload<ExtArgs>[];
        diagnosis: Prisma.$DiagnosisPayload<ExtArgs>[];
        Prescription: Prisma.$PrescriptionPayload<ExtArgs>[];
    };
    scalars: runtime.Types.Extensions.GetPayloadResult<
        {
            id: number;
            patientId: string;
            appointmentId: number;
            doctorId: string;
            treatmentPlan: string | null;
            prescriptions: string | null;
            labRequest: string | null;
            notes: string | null;
            createdAt: Date;
            updatedAt: Date;
        },
        ExtArgs['result']['medicalRecords']
    >;
    composites: {};
};

export type MedicalRecordsGetPayload<S extends boolean | null | undefined | MedicalRecordsDefaultArgs> =
    runtime.Types.Result.GetResult<Prisma.$MedicalRecordsPayload, S>;

export type MedicalRecordsCountArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = Omit<MedicalRecordsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: MedicalRecordsCountAggregateInputType | true;
};

export interface MedicalRecordsDelegate<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
    GlobalOmitOptions = {}
> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MedicalRecords']; meta: { name: 'MedicalRecords' } };
    /**
     * Find zero or one MedicalRecords that matches the filter.
     * @param {MedicalRecordsFindUniqueArgs} args - Arguments to find a MedicalRecords
     * @example
     * // Get one MedicalRecords
     * const medicalRecords = await prisma.medicalRecords.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MedicalRecordsFindUniqueArgs>(
        args: Prisma.SelectSubset<T, MedicalRecordsFindUniqueArgs<ExtArgs>>
    ): Prisma.Prisma__MedicalRecordsClient<
        runtime.Types.Result.GetResult<
            Prisma.$MedicalRecordsPayload<ExtArgs>,
            T,
            'findUnique',
            GlobalOmitOptions
        > | null,
        null,
        ExtArgs,
        GlobalOmitOptions
    >;

    /**
     * Find one MedicalRecords that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MedicalRecordsFindUniqueOrThrowArgs} args - Arguments to find a MedicalRecords
     * @example
     * // Get one MedicalRecords
     * const medicalRecords = await prisma.medicalRecords.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MedicalRecordsFindUniqueOrThrowArgs>(
        args: Prisma.SelectSubset<T, MedicalRecordsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma.Prisma__MedicalRecordsClient<
        runtime.Types.Result.GetResult<
            Prisma.$MedicalRecordsPayload<ExtArgs>,
            T,
            'findUniqueOrThrow',
            GlobalOmitOptions
        >,
        never,
        ExtArgs,
        GlobalOmitOptions
    >;

    /**
     * Find the first MedicalRecords that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicalRecordsFindFirstArgs} args - Arguments to find a MedicalRecords
     * @example
     * // Get one MedicalRecords
     * const medicalRecords = await prisma.medicalRecords.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MedicalRecordsFindFirstArgs>(
        args?: Prisma.SelectSubset<T, MedicalRecordsFindFirstArgs<ExtArgs>>
    ): Prisma.Prisma__MedicalRecordsClient<
        runtime.Types.Result.GetResult<
            Prisma.$MedicalRecordsPayload<ExtArgs>,
            T,
            'findFirst',
            GlobalOmitOptions
        > | null,
        null,
        ExtArgs,
        GlobalOmitOptions
    >;

    /**
     * Find the first MedicalRecords that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicalRecordsFindFirstOrThrowArgs} args - Arguments to find a MedicalRecords
     * @example
     * // Get one MedicalRecords
     * const medicalRecords = await prisma.medicalRecords.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MedicalRecordsFindFirstOrThrowArgs>(
        args?: Prisma.SelectSubset<T, MedicalRecordsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma.Prisma__MedicalRecordsClient<
        runtime.Types.Result.GetResult<
            Prisma.$MedicalRecordsPayload<ExtArgs>,
            T,
            'findFirstOrThrow',
            GlobalOmitOptions
        >,
        never,
        ExtArgs,
        GlobalOmitOptions
    >;

    /**
     * Find zero or more MedicalRecords that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicalRecordsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MedicalRecords
     * const medicalRecords = await prisma.medicalRecords.findMany()
     *
     * // Get first 10 MedicalRecords
     * const medicalRecords = await prisma.medicalRecords.findMany({ take: 10 })
     *
     * // Only select the `id`
     * const medicalRecordsWithIdOnly = await prisma.medicalRecords.findMany({ select: { id: true } })
     *
     */
    findMany<T extends MedicalRecordsFindManyArgs>(
        args?: Prisma.SelectSubset<T, MedicalRecordsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<
        runtime.Types.Result.GetResult<Prisma.$MedicalRecordsPayload<ExtArgs>, T, 'findMany', GlobalOmitOptions>
    >;

    /**
     * Create a MedicalRecords.
     * @param {MedicalRecordsCreateArgs} args - Arguments to create a MedicalRecords.
     * @example
     * // Create one MedicalRecords
     * const MedicalRecords = await prisma.medicalRecords.create({
     *   data: {
     *     // ... data to create a MedicalRecords
     *   }
     * })
     *
     */
    create<T extends MedicalRecordsCreateArgs>(
        args: Prisma.SelectSubset<T, MedicalRecordsCreateArgs<ExtArgs>>
    ): Prisma.Prisma__MedicalRecordsClient<
        runtime.Types.Result.GetResult<Prisma.$MedicalRecordsPayload<ExtArgs>, T, 'create', GlobalOmitOptions>,
        never,
        ExtArgs,
        GlobalOmitOptions
    >;

    /**
     * Create many MedicalRecords.
     * @param {MedicalRecordsCreateManyArgs} args - Arguments to create many MedicalRecords.
     * @example
     * // Create many MedicalRecords
     * const medicalRecords = await prisma.medicalRecords.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     */
    createMany<T extends MedicalRecordsCreateManyArgs>(
        args?: Prisma.SelectSubset<T, MedicalRecordsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<Prisma.BatchPayload>;

    /**
     * Create many MedicalRecords and returns the data saved in the database.
     * @param {MedicalRecordsCreateManyAndReturnArgs} args - Arguments to create many MedicalRecords.
     * @example
     * // Create many MedicalRecords
     * const medicalRecords = await prisma.medicalRecords.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     * // Create many MedicalRecords and only return the `id`
     * const medicalRecordsWithIdOnly = await prisma.medicalRecords.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     *
     */
    createManyAndReturn<T extends MedicalRecordsCreateManyAndReturnArgs>(
        args?: Prisma.SelectSubset<T, MedicalRecordsCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<
        runtime.Types.Result.GetResult<
            Prisma.$MedicalRecordsPayload<ExtArgs>,
            T,
            'createManyAndReturn',
            GlobalOmitOptions
        >
    >;

    /**
     * Delete a MedicalRecords.
     * @param {MedicalRecordsDeleteArgs} args - Arguments to delete one MedicalRecords.
     * @example
     * // Delete one MedicalRecords
     * const MedicalRecords = await prisma.medicalRecords.delete({
     *   where: {
     *     // ... filter to delete one MedicalRecords
     *   }
     * })
     *
     */
    delete<T extends MedicalRecordsDeleteArgs>(
        args: Prisma.SelectSubset<T, MedicalRecordsDeleteArgs<ExtArgs>>
    ): Prisma.Prisma__MedicalRecordsClient<
        runtime.Types.Result.GetResult<Prisma.$MedicalRecordsPayload<ExtArgs>, T, 'delete', GlobalOmitOptions>,
        never,
        ExtArgs,
        GlobalOmitOptions
    >;

    /**
     * Update one MedicalRecords.
     * @param {MedicalRecordsUpdateArgs} args - Arguments to update one MedicalRecords.
     * @example
     * // Update one MedicalRecords
     * const medicalRecords = await prisma.medicalRecords.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     */
    update<T extends MedicalRecordsUpdateArgs>(
        args: Prisma.SelectSubset<T, MedicalRecordsUpdateArgs<ExtArgs>>
    ): Prisma.Prisma__MedicalRecordsClient<
        runtime.Types.Result.GetResult<Prisma.$MedicalRecordsPayload<ExtArgs>, T, 'update', GlobalOmitOptions>,
        never,
        ExtArgs,
        GlobalOmitOptions
    >;

    /**
     * Delete zero or more MedicalRecords.
     * @param {MedicalRecordsDeleteManyArgs} args - Arguments to filter MedicalRecords to delete.
     * @example
     * // Delete a few MedicalRecords
     * const { count } = await prisma.medicalRecords.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     *
     */
    deleteMany<T extends MedicalRecordsDeleteManyArgs>(
        args?: Prisma.SelectSubset<T, MedicalRecordsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<Prisma.BatchPayload>;

    /**
     * Update zero or more MedicalRecords.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicalRecordsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MedicalRecords
     * const medicalRecords = await prisma.medicalRecords.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     */
    updateMany<T extends MedicalRecordsUpdateManyArgs>(
        args: Prisma.SelectSubset<T, MedicalRecordsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<Prisma.BatchPayload>;

    /**
     * Update zero or more MedicalRecords and returns the data updated in the database.
     * @param {MedicalRecordsUpdateManyAndReturnArgs} args - Arguments to update many MedicalRecords.
     * @example
     * // Update many MedicalRecords
     * const medicalRecords = await prisma.medicalRecords.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     * // Update zero or more MedicalRecords and only return the `id`
     * const medicalRecordsWithIdOnly = await prisma.medicalRecords.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     *
     */
    updateManyAndReturn<T extends MedicalRecordsUpdateManyAndReturnArgs>(
        args: Prisma.SelectSubset<T, MedicalRecordsUpdateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<
        runtime.Types.Result.GetResult<
            Prisma.$MedicalRecordsPayload<ExtArgs>,
            T,
            'updateManyAndReturn',
            GlobalOmitOptions
        >
    >;

    /**
     * Create or update one MedicalRecords.
     * @param {MedicalRecordsUpsertArgs} args - Arguments to update or create a MedicalRecords.
     * @example
     * // Update or create a MedicalRecords
     * const medicalRecords = await prisma.medicalRecords.upsert({
     *   create: {
     *     // ... data to create a MedicalRecords
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MedicalRecords we want to update
     *   }
     * })
     */
    upsert<T extends MedicalRecordsUpsertArgs>(
        args: Prisma.SelectSubset<T, MedicalRecordsUpsertArgs<ExtArgs>>
    ): Prisma.Prisma__MedicalRecordsClient<
        runtime.Types.Result.GetResult<Prisma.$MedicalRecordsPayload<ExtArgs>, T, 'upsert', GlobalOmitOptions>,
        never,
        ExtArgs,
        GlobalOmitOptions
    >;

    /**
     * Count the number of MedicalRecords.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicalRecordsCountArgs} args - Arguments to filter MedicalRecords to count.
     * @example
     * // Count the number of MedicalRecords
     * const count = await prisma.medicalRecords.count({
     *   where: {
     *     // ... the filter for the MedicalRecords we want to count
     *   }
     * })
     **/
    count<T extends MedicalRecordsCountArgs>(
        args?: Prisma.Subset<T, MedicalRecordsCountArgs>
    ): Prisma.PrismaPromise<
        T extends runtime.Types.Utils.Record<'select', any>
            ? T['select'] extends true
                ? number
                : Prisma.GetScalarType<T['select'], MedicalRecordsCountAggregateOutputType>
            : number
    >;

    /**
     * Allows you to perform aggregations operations on a MedicalRecords.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicalRecordsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
     **/
    aggregate<T extends MedicalRecordsAggregateArgs>(
        args: Prisma.Subset<T, MedicalRecordsAggregateArgs>
    ): Prisma.PrismaPromise<GetMedicalRecordsAggregateType<T>>;

    /**
     * Group by MedicalRecords.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicalRecordsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     *
     **/
    groupBy<
        T extends MedicalRecordsGroupByArgs,
        HasSelectOrTake extends Prisma.Or<
            Prisma.Extends<'skip', Prisma.Keys<T>>,
            Prisma.Extends<'take', Prisma.Keys<T>>
        >,
        OrderByArg extends Prisma.True extends HasSelectOrTake
            ? { orderBy: MedicalRecordsGroupByArgs['orderBy'] }
            : { orderBy?: MedicalRecordsGroupByArgs['orderBy'] },
        OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
        ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
        ByValid extends Prisma.Has<ByFields, OrderFields>,
        HavingFields extends Prisma.GetHavingFields<T['having']>,
        HavingValid extends Prisma.Has<ByFields, HavingFields>,
        ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
        InputErrors extends ByEmpty extends Prisma.True
            ? `Error: "by" must not be empty.`
            : HavingValid extends Prisma.False
              ? {
                    [P in HavingFields]: P extends ByFields
                        ? never
                        : P extends string
                          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                          : [Error, 'Field ', P, ` in "having" needs to be provided in "by"`];
                }[HavingFields]
              : 'take' extends Prisma.Keys<T>
                ? 'orderBy' extends Prisma.Keys<T>
                    ? ByValid extends Prisma.True
                        ? {}
                        : {
                              [P in OrderFields]: P extends ByFields
                                  ? never
                                  : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                          }[OrderFields]
                    : 'Error: If you provide "take", you also need to provide "orderBy"'
                : 'skip' extends Prisma.Keys<T>
                  ? 'orderBy' extends Prisma.Keys<T>
                      ? ByValid extends Prisma.True
                          ? {}
                          : {
                                [P in OrderFields]: P extends ByFields
                                    ? never
                                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                            }[OrderFields]
                      : 'Error: If you provide "skip", you also need to provide "orderBy"'
                  : ByValid extends Prisma.True
                    ? {}
                    : {
                          [P in OrderFields]: P extends ByFields
                              ? never
                              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                      }[OrderFields]
    >(
        args: Prisma.SubsetIntersection<T, MedicalRecordsGroupByArgs, OrderByArg> & InputErrors
    ): {} extends InputErrors ? GetMedicalRecordsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>;
    /**
     * Fields of the MedicalRecords model
     */
    readonly fields: MedicalRecordsFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for MedicalRecords.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__MedicalRecordsClient<
    T,
    Null = never,
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
    GlobalOmitOptions = {}
> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    appointment<T extends Prisma.AppointmentDefaultArgs<ExtArgs> = {}>(
        args?: Prisma.Subset<T, Prisma.AppointmentDefaultArgs<ExtArgs>>
    ): Prisma.Prisma__AppointmentClient<
        | runtime.Types.Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, 'findUniqueOrThrow', GlobalOmitOptions>
        | Null,
        Null,
        ExtArgs,
        GlobalOmitOptions
    >;
    patient<T extends Prisma.PatientDefaultArgs<ExtArgs> = {}>(
        args?: Prisma.Subset<T, Prisma.PatientDefaultArgs<ExtArgs>>
    ): Prisma.Prisma__PatientClient<
        | runtime.Types.Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, 'findUniqueOrThrow', GlobalOmitOptions>
        | Null,
        Null,
        ExtArgs,
        GlobalOmitOptions
    >;
    labTest<T extends Prisma.MedicalRecords$labTestArgs<ExtArgs> = {}>(
        args?: Prisma.Subset<T, Prisma.MedicalRecords$labTestArgs<ExtArgs>>
    ): Prisma.PrismaPromise<
        runtime.Types.Result.GetResult<Prisma.$LabTestPayload<ExtArgs>, T, 'findMany', GlobalOmitOptions> | Null
    >;
    vitalSigns<T extends Prisma.MedicalRecords$vitalSignsArgs<ExtArgs> = {}>(
        args?: Prisma.Subset<T, Prisma.MedicalRecords$vitalSignsArgs<ExtArgs>>
    ): Prisma.PrismaPromise<
        runtime.Types.Result.GetResult<Prisma.$VitalSignsPayload<ExtArgs>, T, 'findMany', GlobalOmitOptions> | Null
    >;
    diagnosis<T extends Prisma.MedicalRecords$diagnosisArgs<ExtArgs> = {}>(
        args?: Prisma.Subset<T, Prisma.MedicalRecords$diagnosisArgs<ExtArgs>>
    ): Prisma.PrismaPromise<
        runtime.Types.Result.GetResult<Prisma.$DiagnosisPayload<ExtArgs>, T, 'findMany', GlobalOmitOptions> | Null
    >;
    Prescription<T extends Prisma.MedicalRecords$PrescriptionArgs<ExtArgs> = {}>(
        args?: Prisma.Subset<T, Prisma.MedicalRecords$PrescriptionArgs<ExtArgs>>
    ): Prisma.PrismaPromise<
        runtime.Types.Result.GetResult<Prisma.$PrescriptionPayload<ExtArgs>, T, 'findMany', GlobalOmitOptions> | Null
    >;
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(
        onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null,
        onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null
    ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(
        onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null
    ): runtime.Types.Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the MedicalRecords model
 */
export interface MedicalRecordsFieldRefs {
    readonly id: Prisma.FieldRef<'MedicalRecords', 'Int'>;
    readonly patientId: Prisma.FieldRef<'MedicalRecords', 'String'>;
    readonly appointmentId: Prisma.FieldRef<'MedicalRecords', 'Int'>;
    readonly doctorId: Prisma.FieldRef<'MedicalRecords', 'String'>;
    readonly treatmentPlan: Prisma.FieldRef<'MedicalRecords', 'String'>;
    readonly prescriptions: Prisma.FieldRef<'MedicalRecords', 'String'>;
    readonly labRequest: Prisma.FieldRef<'MedicalRecords', 'String'>;
    readonly notes: Prisma.FieldRef<'MedicalRecords', 'String'>;
    readonly createdAt: Prisma.FieldRef<'MedicalRecords', 'DateTime'>;
    readonly updatedAt: Prisma.FieldRef<'MedicalRecords', 'DateTime'>;
}

// Custom InputTypes
/**
 * MedicalRecords findUnique
 */
export type MedicalRecordsFindUniqueArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the MedicalRecords
     */
    select?: Prisma.MedicalRecordsSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the MedicalRecords
     */
    omit?: Prisma.MedicalRecordsOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.MedicalRecordsInclude<ExtArgs> | null;
    /**
     * Filter, which MedicalRecords to fetch.
     */
    where: Prisma.MedicalRecordsWhereUniqueInput;
};

/**
 * MedicalRecords findUniqueOrThrow
 */
export type MedicalRecordsFindUniqueOrThrowArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the MedicalRecords
     */
    select?: Prisma.MedicalRecordsSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the MedicalRecords
     */
    omit?: Prisma.MedicalRecordsOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.MedicalRecordsInclude<ExtArgs> | null;
    /**
     * Filter, which MedicalRecords to fetch.
     */
    where: Prisma.MedicalRecordsWhereUniqueInput;
};

/**
 * MedicalRecords findFirst
 */
export type MedicalRecordsFindFirstArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the MedicalRecords
     */
    select?: Prisma.MedicalRecordsSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the MedicalRecords
     */
    omit?: Prisma.MedicalRecordsOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.MedicalRecordsInclude<ExtArgs> | null;
    /**
     * Filter, which MedicalRecords to fetch.
     */
    where?: Prisma.MedicalRecordsWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of MedicalRecords to fetch.
     */
    orderBy?: Prisma.MedicalRecordsOrderByWithRelationInput | Prisma.MedicalRecordsOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for MedicalRecords.
     */
    cursor?: Prisma.MedicalRecordsWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `Â±n` MedicalRecords from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` MedicalRecords.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of MedicalRecords.
     */
    distinct?: Prisma.MedicalRecordsScalarFieldEnum | Prisma.MedicalRecordsScalarFieldEnum[];
};

/**
 * MedicalRecords findFirstOrThrow
 */
export type MedicalRecordsFindFirstOrThrowArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the MedicalRecords
     */
    select?: Prisma.MedicalRecordsSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the MedicalRecords
     */
    omit?: Prisma.MedicalRecordsOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.MedicalRecordsInclude<ExtArgs> | null;
    /**
     * Filter, which MedicalRecords to fetch.
     */
    where?: Prisma.MedicalRecordsWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of MedicalRecords to fetch.
     */
    orderBy?: Prisma.MedicalRecordsOrderByWithRelationInput | Prisma.MedicalRecordsOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for MedicalRecords.
     */
    cursor?: Prisma.MedicalRecordsWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `Â±n` MedicalRecords from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` MedicalRecords.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of MedicalRecords.
     */
    distinct?: Prisma.MedicalRecordsScalarFieldEnum | Prisma.MedicalRecordsScalarFieldEnum[];
};

/**
 * MedicalRecords findMany
 */
export type MedicalRecordsFindManyArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the MedicalRecords
     */
    select?: Prisma.MedicalRecordsSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the MedicalRecords
     */
    omit?: Prisma.MedicalRecordsOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.MedicalRecordsInclude<ExtArgs> | null;
    /**
     * Filter, which MedicalRecords to fetch.
     */
    where?: Prisma.MedicalRecordsWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of MedicalRecords to fetch.
     */
    orderBy?: Prisma.MedicalRecordsOrderByWithRelationInput | Prisma.MedicalRecordsOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for listing MedicalRecords.
     */
    cursor?: Prisma.MedicalRecordsWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `Â±n` MedicalRecords from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` MedicalRecords.
     */
    skip?: number;
    distinct?: Prisma.MedicalRecordsScalarFieldEnum | Prisma.MedicalRecordsScalarFieldEnum[];
};

/**
 * MedicalRecords create
 */
export type MedicalRecordsCreateArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the MedicalRecords
     */
    select?: Prisma.MedicalRecordsSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the MedicalRecords
     */
    omit?: Prisma.MedicalRecordsOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.MedicalRecordsInclude<ExtArgs> | null;
    /**
     * The data needed to create a MedicalRecords.
     */
    data: Prisma.XOR<Prisma.MedicalRecordsCreateInput, Prisma.MedicalRecordsUncheckedCreateInput>;
};

/**
 * MedicalRecords createMany
 */
export type MedicalRecordsCreateManyArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * The data used to create many MedicalRecords.
     */
    data: Prisma.MedicalRecordsCreateManyInput | Prisma.MedicalRecordsCreateManyInput[];
    skipDuplicates?: boolean;
};

/**
 * MedicalRecords createManyAndReturn
 */
export type MedicalRecordsCreateManyAndReturnArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the MedicalRecords
     */
    select?: Prisma.MedicalRecordsSelectCreateManyAndReturn<ExtArgs> | null;
    /**
     * Omit specific fields from the MedicalRecords
     */
    omit?: Prisma.MedicalRecordsOmit<ExtArgs> | null;
    /**
     * The data used to create many MedicalRecords.
     */
    data: Prisma.MedicalRecordsCreateManyInput | Prisma.MedicalRecordsCreateManyInput[];
    skipDuplicates?: boolean;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.MedicalRecordsIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * MedicalRecords update
 */
export type MedicalRecordsUpdateArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the MedicalRecords
     */
    select?: Prisma.MedicalRecordsSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the MedicalRecords
     */
    omit?: Prisma.MedicalRecordsOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.MedicalRecordsInclude<ExtArgs> | null;
    /**
     * The data needed to update a MedicalRecords.
     */
    data: Prisma.XOR<Prisma.MedicalRecordsUpdateInput, Prisma.MedicalRecordsUncheckedUpdateInput>;
    /**
     * Choose, which MedicalRecords to update.
     */
    where: Prisma.MedicalRecordsWhereUniqueInput;
};

/**
 * MedicalRecords updateMany
 */
export type MedicalRecordsUpdateManyArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * The data used to update MedicalRecords.
     */
    data: Prisma.XOR<Prisma.MedicalRecordsUpdateManyMutationInput, Prisma.MedicalRecordsUncheckedUpdateManyInput>;
    /**
     * Filter which MedicalRecords to update
     */
    where?: Prisma.MedicalRecordsWhereInput;
    /**
     * Limit how many MedicalRecords to update.
     */
    limit?: number;
};

/**
 * MedicalRecords updateManyAndReturn
 */
export type MedicalRecordsUpdateManyAndReturnArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the MedicalRecords
     */
    select?: Prisma.MedicalRecordsSelectUpdateManyAndReturn<ExtArgs> | null;
    /**
     * Omit specific fields from the MedicalRecords
     */
    omit?: Prisma.MedicalRecordsOmit<ExtArgs> | null;
    /**
     * The data used to update MedicalRecords.
     */
    data: Prisma.XOR<Prisma.MedicalRecordsUpdateManyMutationInput, Prisma.MedicalRecordsUncheckedUpdateManyInput>;
    /**
     * Filter which MedicalRecords to update
     */
    where?: Prisma.MedicalRecordsWhereInput;
    /**
     * Limit how many MedicalRecords to update.
     */
    limit?: number;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.MedicalRecordsIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * MedicalRecords upsert
 */
export type MedicalRecordsUpsertArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the MedicalRecords
     */
    select?: Prisma.MedicalRecordsSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the MedicalRecords
     */
    omit?: Prisma.MedicalRecordsOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.MedicalRecordsInclude<ExtArgs> | null;
    /**
     * The filter to search for the MedicalRecords to update in case it exists.
     */
    where: Prisma.MedicalRecordsWhereUniqueInput;
    /**
     * In case the MedicalRecords found by the `where` argument doesn't exist, create a new MedicalRecords with this data.
     */
    create: Prisma.XOR<Prisma.MedicalRecordsCreateInput, Prisma.MedicalRecordsUncheckedCreateInput>;
    /**
     * In case the MedicalRecords was found with the provided `where` argument, update it with this data.
     */
    update: Prisma.XOR<Prisma.MedicalRecordsUpdateInput, Prisma.MedicalRecordsUncheckedUpdateInput>;
};

/**
 * MedicalRecords delete
 */
export type MedicalRecordsDeleteArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the MedicalRecords
     */
    select?: Prisma.MedicalRecordsSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the MedicalRecords
     */
    omit?: Prisma.MedicalRecordsOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.MedicalRecordsInclude<ExtArgs> | null;
    /**
     * Filter which MedicalRecords to delete.
     */
    where: Prisma.MedicalRecordsWhereUniqueInput;
};

/**
 * MedicalRecords deleteMany
 */
export type MedicalRecordsDeleteManyArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Filter which MedicalRecords to delete
     */
    where?: Prisma.MedicalRecordsWhereInput;
    /**
     * Limit how many MedicalRecords to delete.
     */
    limit?: number;
};

/**
 * MedicalRecords.labTest
 */
export type MedicalRecords$labTestArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the LabTest
     */
    select?: Prisma.LabTestSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the LabTest
     */
    omit?: Prisma.LabTestOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.LabTestInclude<ExtArgs> | null;
    where?: Prisma.LabTestWhereInput;
    orderBy?: Prisma.LabTestOrderByWithRelationInput | Prisma.LabTestOrderByWithRelationInput[];
    cursor?: Prisma.LabTestWhereUniqueInput;
    take?: number;
    skip?: number;
    distinct?: Prisma.LabTestScalarFieldEnum | Prisma.LabTestScalarFieldEnum[];
};

/**
 * MedicalRecords.vitalSigns
 */
export type MedicalRecords$vitalSignsArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the VitalSigns
     */
    select?: Prisma.VitalSignsSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the VitalSigns
     */
    omit?: Prisma.VitalSignsOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.VitalSignsInclude<ExtArgs> | null;
    where?: Prisma.VitalSignsWhereInput;
    orderBy?: Prisma.VitalSignsOrderByWithRelationInput | Prisma.VitalSignsOrderByWithRelationInput[];
    cursor?: Prisma.VitalSignsWhereUniqueInput;
    take?: number;
    skip?: number;
    distinct?: Prisma.VitalSignsScalarFieldEnum | Prisma.VitalSignsScalarFieldEnum[];
};

/**
 * MedicalRecords.diagnosis
 */
export type MedicalRecords$diagnosisArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the Diagnosis
     */
    select?: Prisma.DiagnosisSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Diagnosis
     */
    omit?: Prisma.DiagnosisOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.DiagnosisInclude<ExtArgs> | null;
    where?: Prisma.DiagnosisWhereInput;
    orderBy?: Prisma.DiagnosisOrderByWithRelationInput | Prisma.DiagnosisOrderByWithRelationInput[];
    cursor?: Prisma.DiagnosisWhereUniqueInput;
    take?: number;
    skip?: number;
    distinct?: Prisma.DiagnosisScalarFieldEnum | Prisma.DiagnosisScalarFieldEnum[];
};

/**
 * MedicalRecords.Prescription
 */
export type MedicalRecords$PrescriptionArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the Prescription
     */
    select?: Prisma.PrescriptionSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Prescription
     */
    omit?: Prisma.PrescriptionOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.PrescriptionInclude<ExtArgs> | null;
    where?: Prisma.PrescriptionWhereInput;
    orderBy?: Prisma.PrescriptionOrderByWithRelationInput | Prisma.PrescriptionOrderByWithRelationInput[];
    cursor?: Prisma.PrescriptionWhereUniqueInput;
    take?: number;
    skip?: number;
    distinct?: Prisma.PrescriptionScalarFieldEnum | Prisma.PrescriptionScalarFieldEnum[];
};

/**
 * MedicalRecords without action
 */
export type MedicalRecordsDefaultArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the MedicalRecords
     */
    select?: Prisma.MedicalRecordsSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the MedicalRecords
     */
    omit?: Prisma.MedicalRecordsOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.MedicalRecordsInclude<ExtArgs> | null;
};
