/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/**
 * This file exports the `Rating` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from '@prisma/client/runtime/library';
import type * as $Enums from '../enums';
import type * as Prisma from '../internal/prismaNamespace';

/**
 * Model Rating
 *
 */
export type RatingModel = runtime.Types.Result.DefaultSelection<Prisma.$RatingPayload>;

export type AggregateRating = {
    _count: RatingCountAggregateOutputType | null;
    _avg: RatingAvgAggregateOutputType | null;
    _sum: RatingSumAggregateOutputType | null;
    _min: RatingMinAggregateOutputType | null;
    _max: RatingMaxAggregateOutputType | null;
};

export type RatingAvgAggregateOutputType = {
    id: number | null;
    rating: number | null;
};

export type RatingSumAggregateOutputType = {
    id: number | null;
    rating: number | null;
};

export type RatingMinAggregateOutputType = {
    id: number | null;
    staffId: string | null;
    patientId: string | null;
    rating: number | null;
    comment: string | null;
    createdAt: Date | null;
    updatedAt: Date | null;
};

export type RatingMaxAggregateOutputType = {
    id: number | null;
    staffId: string | null;
    patientId: string | null;
    rating: number | null;
    comment: string | null;
    createdAt: Date | null;
    updatedAt: Date | null;
};

export type RatingCountAggregateOutputType = {
    id: number;
    staffId: number;
    patientId: number;
    rating: number;
    comment: number;
    createdAt: number;
    updatedAt: number;
    _all: number;
};

export type RatingAvgAggregateInputType = {
    id?: true;
    rating?: true;
};

export type RatingSumAggregateInputType = {
    id?: true;
    rating?: true;
};

export type RatingMinAggregateInputType = {
    id?: true;
    staffId?: true;
    patientId?: true;
    rating?: true;
    comment?: true;
    createdAt?: true;
    updatedAt?: true;
};

export type RatingMaxAggregateInputType = {
    id?: true;
    staffId?: true;
    patientId?: true;
    rating?: true;
    comment?: true;
    createdAt?: true;
    updatedAt?: true;
};

export type RatingCountAggregateInputType = {
    id?: true;
    staffId?: true;
    patientId?: true;
    rating?: true;
    comment?: true;
    createdAt?: true;
    updatedAt?: true;
    _all?: true;
};

export type RatingAggregateArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Filter which Rating to aggregate.
     */
    where?: Prisma.RatingWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Ratings to fetch.
     */
    orderBy?: Prisma.RatingOrderByWithRelationInput | Prisma.RatingOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the start position
     */
    cursor?: Prisma.RatingWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `Â±n` Ratings from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Ratings.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Count returned Ratings
     **/
    _count?: true | RatingCountAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to average
     **/
    _avg?: RatingAvgAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to sum
     **/
    _sum?: RatingSumAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the minimum value
     **/
    _min?: RatingMinAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the maximum value
     **/
    _max?: RatingMaxAggregateInputType;
};

export type GetRatingAggregateType<T extends RatingAggregateArgs> = {
    [P in keyof T & keyof AggregateRating]: P extends '_count' | 'count'
        ? T[P] extends true
            ? number
            : Prisma.GetScalarType<T[P], AggregateRating[P]>
        : Prisma.GetScalarType<T[P], AggregateRating[P]>;
};

export type RatingGroupByArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    where?: Prisma.RatingWhereInput;
    orderBy?: Prisma.RatingOrderByWithAggregationInput | Prisma.RatingOrderByWithAggregationInput[];
    by: Prisma.RatingScalarFieldEnum[] | Prisma.RatingScalarFieldEnum;
    having?: Prisma.RatingScalarWhereWithAggregatesInput;
    take?: number;
    skip?: number;
    _count?: RatingCountAggregateInputType | true;
    _avg?: RatingAvgAggregateInputType;
    _sum?: RatingSumAggregateInputType;
    _min?: RatingMinAggregateInputType;
    _max?: RatingMaxAggregateInputType;
};

export type RatingGroupByOutputType = {
    id: number;
    staffId: string;
    patientId: string;
    rating: number;
    comment: string | null;
    createdAt: Date;
    updatedAt: Date;
    _count: RatingCountAggregateOutputType | null;
    _avg: RatingAvgAggregateOutputType | null;
    _sum: RatingSumAggregateOutputType | null;
    _min: RatingMinAggregateOutputType | null;
    _max: RatingMaxAggregateOutputType | null;
};

type GetRatingGroupByPayload<T extends RatingGroupByArgs> = Prisma.PrismaPromise<
    Array<
        Prisma.PickEnumerable<RatingGroupByOutputType, T['by']> & {
            [P in keyof T & keyof RatingGroupByOutputType]: P extends '_count'
                ? T[P] extends boolean
                    ? number
                    : Prisma.GetScalarType<T[P], RatingGroupByOutputType[P]>
                : Prisma.GetScalarType<T[P], RatingGroupByOutputType[P]>;
        }
    >
>;

export type RatingWhereInput = {
    AND?: Prisma.RatingWhereInput | Prisma.RatingWhereInput[];
    OR?: Prisma.RatingWhereInput[];
    NOT?: Prisma.RatingWhereInput | Prisma.RatingWhereInput[];
    id?: Prisma.IntFilter<'Rating'> | number;
    staffId?: Prisma.StringFilter<'Rating'> | string;
    patientId?: Prisma.StringFilter<'Rating'> | string;
    rating?: Prisma.IntFilter<'Rating'> | number;
    comment?: Prisma.StringNullableFilter<'Rating'> | string | null;
    createdAt?: Prisma.DateTimeFilter<'Rating'> | Date | string;
    updatedAt?: Prisma.DateTimeFilter<'Rating'> | Date | string;
    doctor?: Prisma.XOR<Prisma.DoctorScalarRelationFilter, Prisma.DoctorWhereInput>;
    patient?: Prisma.XOR<Prisma.PatientScalarRelationFilter, Prisma.PatientWhereInput>;
};

export type RatingOrderByWithRelationInput = {
    id?: Prisma.SortOrder;
    staffId?: Prisma.SortOrder;
    patientId?: Prisma.SortOrder;
    rating?: Prisma.SortOrder;
    comment?: Prisma.SortOrderInput | Prisma.SortOrder;
    createdAt?: Prisma.SortOrder;
    updatedAt?: Prisma.SortOrder;
    doctor?: Prisma.DoctorOrderByWithRelationInput;
    patient?: Prisma.PatientOrderByWithRelationInput;
};

export type RatingWhereUniqueInput = Prisma.AtLeast<
    {
        id?: number;
        AND?: Prisma.RatingWhereInput | Prisma.RatingWhereInput[];
        OR?: Prisma.RatingWhereInput[];
        NOT?: Prisma.RatingWhereInput | Prisma.RatingWhereInput[];
        staffId?: Prisma.StringFilter<'Rating'> | string;
        patientId?: Prisma.StringFilter<'Rating'> | string;
        rating?: Prisma.IntFilter<'Rating'> | number;
        comment?: Prisma.StringNullableFilter<'Rating'> | string | null;
        createdAt?: Prisma.DateTimeFilter<'Rating'> | Date | string;
        updatedAt?: Prisma.DateTimeFilter<'Rating'> | Date | string;
        doctor?: Prisma.XOR<Prisma.DoctorScalarRelationFilter, Prisma.DoctorWhereInput>;
        patient?: Prisma.XOR<Prisma.PatientScalarRelationFilter, Prisma.PatientWhereInput>;
    },
    'id'
>;

export type RatingOrderByWithAggregationInput = {
    id?: Prisma.SortOrder;
    staffId?: Prisma.SortOrder;
    patientId?: Prisma.SortOrder;
    rating?: Prisma.SortOrder;
    comment?: Prisma.SortOrderInput | Prisma.SortOrder;
    createdAt?: Prisma.SortOrder;
    updatedAt?: Prisma.SortOrder;
    _count?: Prisma.RatingCountOrderByAggregateInput;
    _avg?: Prisma.RatingAvgOrderByAggregateInput;
    _max?: Prisma.RatingMaxOrderByAggregateInput;
    _min?: Prisma.RatingMinOrderByAggregateInput;
    _sum?: Prisma.RatingSumOrderByAggregateInput;
};

export type RatingScalarWhereWithAggregatesInput = {
    AND?: Prisma.RatingScalarWhereWithAggregatesInput | Prisma.RatingScalarWhereWithAggregatesInput[];
    OR?: Prisma.RatingScalarWhereWithAggregatesInput[];
    NOT?: Prisma.RatingScalarWhereWithAggregatesInput | Prisma.RatingScalarWhereWithAggregatesInput[];
    id?: Prisma.IntWithAggregatesFilter<'Rating'> | number;
    staffId?: Prisma.StringWithAggregatesFilter<'Rating'> | string;
    patientId?: Prisma.StringWithAggregatesFilter<'Rating'> | string;
    rating?: Prisma.IntWithAggregatesFilter<'Rating'> | number;
    comment?: Prisma.StringNullableWithAggregatesFilter<'Rating'> | string | null;
    createdAt?: Prisma.DateTimeWithAggregatesFilter<'Rating'> | Date | string;
    updatedAt?: Prisma.DateTimeWithAggregatesFilter<'Rating'> | Date | string;
};

export type RatingCreateInput = {
    rating: number;
    comment?: string | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    doctor: Prisma.DoctorCreateNestedOneWithoutRatingsInput;
    patient: Prisma.PatientCreateNestedOneWithoutRatingsInput;
};

export type RatingUncheckedCreateInput = {
    id?: number;
    staffId: string;
    patientId: string;
    rating: number;
    comment?: string | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
};

export type RatingUpdateInput = {
    rating?: Prisma.IntFieldUpdateOperationsInput | number;
    comment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    doctor?: Prisma.DoctorUpdateOneRequiredWithoutRatingsNestedInput;
    patient?: Prisma.PatientUpdateOneRequiredWithoutRatingsNestedInput;
};

export type RatingUncheckedUpdateInput = {
    id?: Prisma.IntFieldUpdateOperationsInput | number;
    staffId?: Prisma.StringFieldUpdateOperationsInput | string;
    patientId?: Prisma.StringFieldUpdateOperationsInput | string;
    rating?: Prisma.IntFieldUpdateOperationsInput | number;
    comment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type RatingCreateManyInput = {
    id?: number;
    staffId: string;
    patientId: string;
    rating: number;
    comment?: string | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
};

export type RatingUpdateManyMutationInput = {
    rating?: Prisma.IntFieldUpdateOperationsInput | number;
    comment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type RatingUncheckedUpdateManyInput = {
    id?: Prisma.IntFieldUpdateOperationsInput | number;
    staffId?: Prisma.StringFieldUpdateOperationsInput | string;
    patientId?: Prisma.StringFieldUpdateOperationsInput | string;
    rating?: Prisma.IntFieldUpdateOperationsInput | number;
    comment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type RatingListRelationFilter = {
    every?: Prisma.RatingWhereInput;
    some?: Prisma.RatingWhereInput;
    none?: Prisma.RatingWhereInput;
};

export type RatingOrderByRelationAggregateInput = {
    _count?: Prisma.SortOrder;
};

export type RatingCountOrderByAggregateInput = {
    id?: Prisma.SortOrder;
    staffId?: Prisma.SortOrder;
    patientId?: Prisma.SortOrder;
    rating?: Prisma.SortOrder;
    comment?: Prisma.SortOrder;
    createdAt?: Prisma.SortOrder;
    updatedAt?: Prisma.SortOrder;
};

export type RatingAvgOrderByAggregateInput = {
    id?: Prisma.SortOrder;
    rating?: Prisma.SortOrder;
};

export type RatingMaxOrderByAggregateInput = {
    id?: Prisma.SortOrder;
    staffId?: Prisma.SortOrder;
    patientId?: Prisma.SortOrder;
    rating?: Prisma.SortOrder;
    comment?: Prisma.SortOrder;
    createdAt?: Prisma.SortOrder;
    updatedAt?: Prisma.SortOrder;
};

export type RatingMinOrderByAggregateInput = {
    id?: Prisma.SortOrder;
    staffId?: Prisma.SortOrder;
    patientId?: Prisma.SortOrder;
    rating?: Prisma.SortOrder;
    comment?: Prisma.SortOrder;
    createdAt?: Prisma.SortOrder;
    updatedAt?: Prisma.SortOrder;
};

export type RatingSumOrderByAggregateInput = {
    id?: Prisma.SortOrder;
    rating?: Prisma.SortOrder;
};

export type RatingCreateNestedManyWithoutPatientInput = {
    create?:
        | Prisma.XOR<Prisma.RatingCreateWithoutPatientInput, Prisma.RatingUncheckedCreateWithoutPatientInput>
        | Prisma.RatingCreateWithoutPatientInput[]
        | Prisma.RatingUncheckedCreateWithoutPatientInput[];
    connectOrCreate?:
        | Prisma.RatingCreateOrConnectWithoutPatientInput
        | Prisma.RatingCreateOrConnectWithoutPatientInput[];
    createMany?: Prisma.RatingCreateManyPatientInputEnvelope;
    connect?: Prisma.RatingWhereUniqueInput | Prisma.RatingWhereUniqueInput[];
};

export type RatingUncheckedCreateNestedManyWithoutPatientInput = {
    create?:
        | Prisma.XOR<Prisma.RatingCreateWithoutPatientInput, Prisma.RatingUncheckedCreateWithoutPatientInput>
        | Prisma.RatingCreateWithoutPatientInput[]
        | Prisma.RatingUncheckedCreateWithoutPatientInput[];
    connectOrCreate?:
        | Prisma.RatingCreateOrConnectWithoutPatientInput
        | Prisma.RatingCreateOrConnectWithoutPatientInput[];
    createMany?: Prisma.RatingCreateManyPatientInputEnvelope;
    connect?: Prisma.RatingWhereUniqueInput | Prisma.RatingWhereUniqueInput[];
};

export type RatingUpdateManyWithoutPatientNestedInput = {
    create?:
        | Prisma.XOR<Prisma.RatingCreateWithoutPatientInput, Prisma.RatingUncheckedCreateWithoutPatientInput>
        | Prisma.RatingCreateWithoutPatientInput[]
        | Prisma.RatingUncheckedCreateWithoutPatientInput[];
    connectOrCreate?:
        | Prisma.RatingCreateOrConnectWithoutPatientInput
        | Prisma.RatingCreateOrConnectWithoutPatientInput[];
    upsert?:
        | Prisma.RatingUpsertWithWhereUniqueWithoutPatientInput
        | Prisma.RatingUpsertWithWhereUniqueWithoutPatientInput[];
    createMany?: Prisma.RatingCreateManyPatientInputEnvelope;
    set?: Prisma.RatingWhereUniqueInput | Prisma.RatingWhereUniqueInput[];
    disconnect?: Prisma.RatingWhereUniqueInput | Prisma.RatingWhereUniqueInput[];
    delete?: Prisma.RatingWhereUniqueInput | Prisma.RatingWhereUniqueInput[];
    connect?: Prisma.RatingWhereUniqueInput | Prisma.RatingWhereUniqueInput[];
    update?:
        | Prisma.RatingUpdateWithWhereUniqueWithoutPatientInput
        | Prisma.RatingUpdateWithWhereUniqueWithoutPatientInput[];
    updateMany?:
        | Prisma.RatingUpdateManyWithWhereWithoutPatientInput
        | Prisma.RatingUpdateManyWithWhereWithoutPatientInput[];
    deleteMany?: Prisma.RatingScalarWhereInput | Prisma.RatingScalarWhereInput[];
};

export type RatingUncheckedUpdateManyWithoutPatientNestedInput = {
    create?:
        | Prisma.XOR<Prisma.RatingCreateWithoutPatientInput, Prisma.RatingUncheckedCreateWithoutPatientInput>
        | Prisma.RatingCreateWithoutPatientInput[]
        | Prisma.RatingUncheckedCreateWithoutPatientInput[];
    connectOrCreate?:
        | Prisma.RatingCreateOrConnectWithoutPatientInput
        | Prisma.RatingCreateOrConnectWithoutPatientInput[];
    upsert?:
        | Prisma.RatingUpsertWithWhereUniqueWithoutPatientInput
        | Prisma.RatingUpsertWithWhereUniqueWithoutPatientInput[];
    createMany?: Prisma.RatingCreateManyPatientInputEnvelope;
    set?: Prisma.RatingWhereUniqueInput | Prisma.RatingWhereUniqueInput[];
    disconnect?: Prisma.RatingWhereUniqueInput | Prisma.RatingWhereUniqueInput[];
    delete?: Prisma.RatingWhereUniqueInput | Prisma.RatingWhereUniqueInput[];
    connect?: Prisma.RatingWhereUniqueInput | Prisma.RatingWhereUniqueInput[];
    update?:
        | Prisma.RatingUpdateWithWhereUniqueWithoutPatientInput
        | Prisma.RatingUpdateWithWhereUniqueWithoutPatientInput[];
    updateMany?:
        | Prisma.RatingUpdateManyWithWhereWithoutPatientInput
        | Prisma.RatingUpdateManyWithWhereWithoutPatientInput[];
    deleteMany?: Prisma.RatingScalarWhereInput | Prisma.RatingScalarWhereInput[];
};

export type RatingCreateNestedManyWithoutDoctorInput = {
    create?:
        | Prisma.XOR<Prisma.RatingCreateWithoutDoctorInput, Prisma.RatingUncheckedCreateWithoutDoctorInput>
        | Prisma.RatingCreateWithoutDoctorInput[]
        | Prisma.RatingUncheckedCreateWithoutDoctorInput[];
    connectOrCreate?: Prisma.RatingCreateOrConnectWithoutDoctorInput | Prisma.RatingCreateOrConnectWithoutDoctorInput[];
    createMany?: Prisma.RatingCreateManyDoctorInputEnvelope;
    connect?: Prisma.RatingWhereUniqueInput | Prisma.RatingWhereUniqueInput[];
};

export type RatingUncheckedCreateNestedManyWithoutDoctorInput = {
    create?:
        | Prisma.XOR<Prisma.RatingCreateWithoutDoctorInput, Prisma.RatingUncheckedCreateWithoutDoctorInput>
        | Prisma.RatingCreateWithoutDoctorInput[]
        | Prisma.RatingUncheckedCreateWithoutDoctorInput[];
    connectOrCreate?: Prisma.RatingCreateOrConnectWithoutDoctorInput | Prisma.RatingCreateOrConnectWithoutDoctorInput[];
    createMany?: Prisma.RatingCreateManyDoctorInputEnvelope;
    connect?: Prisma.RatingWhereUniqueInput | Prisma.RatingWhereUniqueInput[];
};

export type RatingUpdateManyWithoutDoctorNestedInput = {
    create?:
        | Prisma.XOR<Prisma.RatingCreateWithoutDoctorInput, Prisma.RatingUncheckedCreateWithoutDoctorInput>
        | Prisma.RatingCreateWithoutDoctorInput[]
        | Prisma.RatingUncheckedCreateWithoutDoctorInput[];
    connectOrCreate?: Prisma.RatingCreateOrConnectWithoutDoctorInput | Prisma.RatingCreateOrConnectWithoutDoctorInput[];
    upsert?:
        | Prisma.RatingUpsertWithWhereUniqueWithoutDoctorInput
        | Prisma.RatingUpsertWithWhereUniqueWithoutDoctorInput[];
    createMany?: Prisma.RatingCreateManyDoctorInputEnvelope;
    set?: Prisma.RatingWhereUniqueInput | Prisma.RatingWhereUniqueInput[];
    disconnect?: Prisma.RatingWhereUniqueInput | Prisma.RatingWhereUniqueInput[];
    delete?: Prisma.RatingWhereUniqueInput | Prisma.RatingWhereUniqueInput[];
    connect?: Prisma.RatingWhereUniqueInput | Prisma.RatingWhereUniqueInput[];
    update?:
        | Prisma.RatingUpdateWithWhereUniqueWithoutDoctorInput
        | Prisma.RatingUpdateWithWhereUniqueWithoutDoctorInput[];
    updateMany?:
        | Prisma.RatingUpdateManyWithWhereWithoutDoctorInput
        | Prisma.RatingUpdateManyWithWhereWithoutDoctorInput[];
    deleteMany?: Prisma.RatingScalarWhereInput | Prisma.RatingScalarWhereInput[];
};

export type RatingUncheckedUpdateManyWithoutDoctorNestedInput = {
    create?:
        | Prisma.XOR<Prisma.RatingCreateWithoutDoctorInput, Prisma.RatingUncheckedCreateWithoutDoctorInput>
        | Prisma.RatingCreateWithoutDoctorInput[]
        | Prisma.RatingUncheckedCreateWithoutDoctorInput[];
    connectOrCreate?: Prisma.RatingCreateOrConnectWithoutDoctorInput | Prisma.RatingCreateOrConnectWithoutDoctorInput[];
    upsert?:
        | Prisma.RatingUpsertWithWhereUniqueWithoutDoctorInput
        | Prisma.RatingUpsertWithWhereUniqueWithoutDoctorInput[];
    createMany?: Prisma.RatingCreateManyDoctorInputEnvelope;
    set?: Prisma.RatingWhereUniqueInput | Prisma.RatingWhereUniqueInput[];
    disconnect?: Prisma.RatingWhereUniqueInput | Prisma.RatingWhereUniqueInput[];
    delete?: Prisma.RatingWhereUniqueInput | Prisma.RatingWhereUniqueInput[];
    connect?: Prisma.RatingWhereUniqueInput | Prisma.RatingWhereUniqueInput[];
    update?:
        | Prisma.RatingUpdateWithWhereUniqueWithoutDoctorInput
        | Prisma.RatingUpdateWithWhereUniqueWithoutDoctorInput[];
    updateMany?:
        | Prisma.RatingUpdateManyWithWhereWithoutDoctorInput
        | Prisma.RatingUpdateManyWithWhereWithoutDoctorInput[];
    deleteMany?: Prisma.RatingScalarWhereInput | Prisma.RatingScalarWhereInput[];
};

export type RatingCreateWithoutPatientInput = {
    rating: number;
    comment?: string | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    doctor: Prisma.DoctorCreateNestedOneWithoutRatingsInput;
};

export type RatingUncheckedCreateWithoutPatientInput = {
    id?: number;
    staffId: string;
    rating: number;
    comment?: string | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
};

export type RatingCreateOrConnectWithoutPatientInput = {
    where: Prisma.RatingWhereUniqueInput;
    create: Prisma.XOR<Prisma.RatingCreateWithoutPatientInput, Prisma.RatingUncheckedCreateWithoutPatientInput>;
};

export type RatingCreateManyPatientInputEnvelope = {
    data: Prisma.RatingCreateManyPatientInput | Prisma.RatingCreateManyPatientInput[];
    skipDuplicates?: boolean;
};

export type RatingUpsertWithWhereUniqueWithoutPatientInput = {
    where: Prisma.RatingWhereUniqueInput;
    update: Prisma.XOR<Prisma.RatingUpdateWithoutPatientInput, Prisma.RatingUncheckedUpdateWithoutPatientInput>;
    create: Prisma.XOR<Prisma.RatingCreateWithoutPatientInput, Prisma.RatingUncheckedCreateWithoutPatientInput>;
};

export type RatingUpdateWithWhereUniqueWithoutPatientInput = {
    where: Prisma.RatingWhereUniqueInput;
    data: Prisma.XOR<Prisma.RatingUpdateWithoutPatientInput, Prisma.RatingUncheckedUpdateWithoutPatientInput>;
};

export type RatingUpdateManyWithWhereWithoutPatientInput = {
    where: Prisma.RatingScalarWhereInput;
    data: Prisma.XOR<Prisma.RatingUpdateManyMutationInput, Prisma.RatingUncheckedUpdateManyWithoutPatientInput>;
};

export type RatingScalarWhereInput = {
    AND?: Prisma.RatingScalarWhereInput | Prisma.RatingScalarWhereInput[];
    OR?: Prisma.RatingScalarWhereInput[];
    NOT?: Prisma.RatingScalarWhereInput | Prisma.RatingScalarWhereInput[];
    id?: Prisma.IntFilter<'Rating'> | number;
    staffId?: Prisma.StringFilter<'Rating'> | string;
    patientId?: Prisma.StringFilter<'Rating'> | string;
    rating?: Prisma.IntFilter<'Rating'> | number;
    comment?: Prisma.StringNullableFilter<'Rating'> | string | null;
    createdAt?: Prisma.DateTimeFilter<'Rating'> | Date | string;
    updatedAt?: Prisma.DateTimeFilter<'Rating'> | Date | string;
};

export type RatingCreateWithoutDoctorInput = {
    rating: number;
    comment?: string | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    patient: Prisma.PatientCreateNestedOneWithoutRatingsInput;
};

export type RatingUncheckedCreateWithoutDoctorInput = {
    id?: number;
    patientId: string;
    rating: number;
    comment?: string | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
};

export type RatingCreateOrConnectWithoutDoctorInput = {
    where: Prisma.RatingWhereUniqueInput;
    create: Prisma.XOR<Prisma.RatingCreateWithoutDoctorInput, Prisma.RatingUncheckedCreateWithoutDoctorInput>;
};

export type RatingCreateManyDoctorInputEnvelope = {
    data: Prisma.RatingCreateManyDoctorInput | Prisma.RatingCreateManyDoctorInput[];
    skipDuplicates?: boolean;
};

export type RatingUpsertWithWhereUniqueWithoutDoctorInput = {
    where: Prisma.RatingWhereUniqueInput;
    update: Prisma.XOR<Prisma.RatingUpdateWithoutDoctorInput, Prisma.RatingUncheckedUpdateWithoutDoctorInput>;
    create: Prisma.XOR<Prisma.RatingCreateWithoutDoctorInput, Prisma.RatingUncheckedCreateWithoutDoctorInput>;
};

export type RatingUpdateWithWhereUniqueWithoutDoctorInput = {
    where: Prisma.RatingWhereUniqueInput;
    data: Prisma.XOR<Prisma.RatingUpdateWithoutDoctorInput, Prisma.RatingUncheckedUpdateWithoutDoctorInput>;
};

export type RatingUpdateManyWithWhereWithoutDoctorInput = {
    where: Prisma.RatingScalarWhereInput;
    data: Prisma.XOR<Prisma.RatingUpdateManyMutationInput, Prisma.RatingUncheckedUpdateManyWithoutDoctorInput>;
};

export type RatingCreateManyPatientInput = {
    id?: number;
    staffId: string;
    rating: number;
    comment?: string | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
};

export type RatingUpdateWithoutPatientInput = {
    rating?: Prisma.IntFieldUpdateOperationsInput | number;
    comment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    doctor?: Prisma.DoctorUpdateOneRequiredWithoutRatingsNestedInput;
};

export type RatingUncheckedUpdateWithoutPatientInput = {
    id?: Prisma.IntFieldUpdateOperationsInput | number;
    staffId?: Prisma.StringFieldUpdateOperationsInput | string;
    rating?: Prisma.IntFieldUpdateOperationsInput | number;
    comment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type RatingUncheckedUpdateManyWithoutPatientInput = {
    id?: Prisma.IntFieldUpdateOperationsInput | number;
    staffId?: Prisma.StringFieldUpdateOperationsInput | string;
    rating?: Prisma.IntFieldUpdateOperationsInput | number;
    comment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type RatingCreateManyDoctorInput = {
    id?: number;
    patientId: string;
    rating: number;
    comment?: string | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
};

export type RatingUpdateWithoutDoctorInput = {
    rating?: Prisma.IntFieldUpdateOperationsInput | number;
    comment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    patient?: Prisma.PatientUpdateOneRequiredWithoutRatingsNestedInput;
};

export type RatingUncheckedUpdateWithoutDoctorInput = {
    id?: Prisma.IntFieldUpdateOperationsInput | number;
    patientId?: Prisma.StringFieldUpdateOperationsInput | string;
    rating?: Prisma.IntFieldUpdateOperationsInput | number;
    comment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type RatingUncheckedUpdateManyWithoutDoctorInput = {
    id?: Prisma.IntFieldUpdateOperationsInput | number;
    patientId?: Prisma.StringFieldUpdateOperationsInput | string;
    rating?: Prisma.IntFieldUpdateOperationsInput | number;
    comment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type RatingSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
    runtime.Types.Extensions.GetSelect<
        {
            id?: boolean;
            staffId?: boolean;
            patientId?: boolean;
            rating?: boolean;
            comment?: boolean;
            createdAt?: boolean;
            updatedAt?: boolean;
            doctor?: boolean | Prisma.DoctorDefaultArgs<ExtArgs>;
            patient?: boolean | Prisma.PatientDefaultArgs<ExtArgs>;
        },
        ExtArgs['result']['rating']
    >;

export type RatingSelectCreateManyAndReturn<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
    {
        id?: boolean;
        staffId?: boolean;
        patientId?: boolean;
        rating?: boolean;
        comment?: boolean;
        createdAt?: boolean;
        updatedAt?: boolean;
        doctor?: boolean | Prisma.DoctorDefaultArgs<ExtArgs>;
        patient?: boolean | Prisma.PatientDefaultArgs<ExtArgs>;
    },
    ExtArgs['result']['rating']
>;

export type RatingSelectUpdateManyAndReturn<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
    {
        id?: boolean;
        staffId?: boolean;
        patientId?: boolean;
        rating?: boolean;
        comment?: boolean;
        createdAt?: boolean;
        updatedAt?: boolean;
        doctor?: boolean | Prisma.DoctorDefaultArgs<ExtArgs>;
        patient?: boolean | Prisma.PatientDefaultArgs<ExtArgs>;
    },
    ExtArgs['result']['rating']
>;

export type RatingSelectScalar = {
    id?: boolean;
    staffId?: boolean;
    patientId?: boolean;
    rating?: boolean;
    comment?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
};

export type RatingOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
    runtime.Types.Extensions.GetOmit<
        'id' | 'staffId' | 'patientId' | 'rating' | 'comment' | 'createdAt' | 'updatedAt',
        ExtArgs['result']['rating']
    >;
export type RatingInclude<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    doctor?: boolean | Prisma.DoctorDefaultArgs<ExtArgs>;
    patient?: boolean | Prisma.PatientDefaultArgs<ExtArgs>;
};
export type RatingIncludeCreateManyAndReturn<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    doctor?: boolean | Prisma.DoctorDefaultArgs<ExtArgs>;
    patient?: boolean | Prisma.PatientDefaultArgs<ExtArgs>;
};
export type RatingIncludeUpdateManyAndReturn<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    doctor?: boolean | Prisma.DoctorDefaultArgs<ExtArgs>;
    patient?: boolean | Prisma.PatientDefaultArgs<ExtArgs>;
};

export type $RatingPayload<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    name: 'Rating';
    objects: {
        doctor: Prisma.$DoctorPayload<ExtArgs>;
        patient: Prisma.$PatientPayload<ExtArgs>;
    };
    scalars: runtime.Types.Extensions.GetPayloadResult<
        {
            id: number;
            staffId: string;
            patientId: string;
            rating: number;
            comment: string | null;
            createdAt: Date;
            updatedAt: Date;
        },
        ExtArgs['result']['rating']
    >;
    composites: {};
};

export type RatingGetPayload<S extends boolean | null | undefined | RatingDefaultArgs> = runtime.Types.Result.GetResult<
    Prisma.$RatingPayload,
    S
>;

export type RatingCountArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = Omit<RatingFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: RatingCountAggregateInputType | true;
};

export interface RatingDelegate<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
    GlobalOmitOptions = {}
> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Rating']; meta: { name: 'Rating' } };
    /**
     * Find zero or one Rating that matches the filter.
     * @param {RatingFindUniqueArgs} args - Arguments to find a Rating
     * @example
     * // Get one Rating
     * const rating = await prisma.rating.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RatingFindUniqueArgs>(
        args: Prisma.SelectSubset<T, RatingFindUniqueArgs<ExtArgs>>
    ): Prisma.Prisma__RatingClient<
        runtime.Types.Result.GetResult<Prisma.$RatingPayload<ExtArgs>, T, 'findUnique', GlobalOmitOptions> | null,
        null,
        ExtArgs,
        GlobalOmitOptions
    >;

    /**
     * Find one Rating that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RatingFindUniqueOrThrowArgs} args - Arguments to find a Rating
     * @example
     * // Get one Rating
     * const rating = await prisma.rating.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RatingFindUniqueOrThrowArgs>(
        args: Prisma.SelectSubset<T, RatingFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma.Prisma__RatingClient<
        runtime.Types.Result.GetResult<Prisma.$RatingPayload<ExtArgs>, T, 'findUniqueOrThrow', GlobalOmitOptions>,
        never,
        ExtArgs,
        GlobalOmitOptions
    >;

    /**
     * Find the first Rating that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RatingFindFirstArgs} args - Arguments to find a Rating
     * @example
     * // Get one Rating
     * const rating = await prisma.rating.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RatingFindFirstArgs>(
        args?: Prisma.SelectSubset<T, RatingFindFirstArgs<ExtArgs>>
    ): Prisma.Prisma__RatingClient<
        runtime.Types.Result.GetResult<Prisma.$RatingPayload<ExtArgs>, T, 'findFirst', GlobalOmitOptions> | null,
        null,
        ExtArgs,
        GlobalOmitOptions
    >;

    /**
     * Find the first Rating that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RatingFindFirstOrThrowArgs} args - Arguments to find a Rating
     * @example
     * // Get one Rating
     * const rating = await prisma.rating.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RatingFindFirstOrThrowArgs>(
        args?: Prisma.SelectSubset<T, RatingFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma.Prisma__RatingClient<
        runtime.Types.Result.GetResult<Prisma.$RatingPayload<ExtArgs>, T, 'findFirstOrThrow', GlobalOmitOptions>,
        never,
        ExtArgs,
        GlobalOmitOptions
    >;

    /**
     * Find zero or more Ratings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RatingFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Ratings
     * const ratings = await prisma.rating.findMany()
     *
     * // Get first 10 Ratings
     * const ratings = await prisma.rating.findMany({ take: 10 })
     *
     * // Only select the `id`
     * const ratingWithIdOnly = await prisma.rating.findMany({ select: { id: true } })
     *
     */
    findMany<T extends RatingFindManyArgs>(
        args?: Prisma.SelectSubset<T, RatingFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<
        runtime.Types.Result.GetResult<Prisma.$RatingPayload<ExtArgs>, T, 'findMany', GlobalOmitOptions>
    >;

    /**
     * Create a Rating.
     * @param {RatingCreateArgs} args - Arguments to create a Rating.
     * @example
     * // Create one Rating
     * const Rating = await prisma.rating.create({
     *   data: {
     *     // ... data to create a Rating
     *   }
     * })
     *
     */
    create<T extends RatingCreateArgs>(
        args: Prisma.SelectSubset<T, RatingCreateArgs<ExtArgs>>
    ): Prisma.Prisma__RatingClient<
        runtime.Types.Result.GetResult<Prisma.$RatingPayload<ExtArgs>, T, 'create', GlobalOmitOptions>,
        never,
        ExtArgs,
        GlobalOmitOptions
    >;

    /**
     * Create many Ratings.
     * @param {RatingCreateManyArgs} args - Arguments to create many Ratings.
     * @example
     * // Create many Ratings
     * const rating = await prisma.rating.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     */
    createMany<T extends RatingCreateManyArgs>(
        args?: Prisma.SelectSubset<T, RatingCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<Prisma.BatchPayload>;

    /**
     * Create many Ratings and returns the data saved in the database.
     * @param {RatingCreateManyAndReturnArgs} args - Arguments to create many Ratings.
     * @example
     * // Create many Ratings
     * const rating = await prisma.rating.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     * // Create many Ratings and only return the `id`
     * const ratingWithIdOnly = await prisma.rating.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     *
     */
    createManyAndReturn<T extends RatingCreateManyAndReturnArgs>(
        args?: Prisma.SelectSubset<T, RatingCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<
        runtime.Types.Result.GetResult<Prisma.$RatingPayload<ExtArgs>, T, 'createManyAndReturn', GlobalOmitOptions>
    >;

    /**
     * Delete a Rating.
     * @param {RatingDeleteArgs} args - Arguments to delete one Rating.
     * @example
     * // Delete one Rating
     * const Rating = await prisma.rating.delete({
     *   where: {
     *     // ... filter to delete one Rating
     *   }
     * })
     *
     */
    delete<T extends RatingDeleteArgs>(
        args: Prisma.SelectSubset<T, RatingDeleteArgs<ExtArgs>>
    ): Prisma.Prisma__RatingClient<
        runtime.Types.Result.GetResult<Prisma.$RatingPayload<ExtArgs>, T, 'delete', GlobalOmitOptions>,
        never,
        ExtArgs,
        GlobalOmitOptions
    >;

    /**
     * Update one Rating.
     * @param {RatingUpdateArgs} args - Arguments to update one Rating.
     * @example
     * // Update one Rating
     * const rating = await prisma.rating.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     */
    update<T extends RatingUpdateArgs>(
        args: Prisma.SelectSubset<T, RatingUpdateArgs<ExtArgs>>
    ): Prisma.Prisma__RatingClient<
        runtime.Types.Result.GetResult<Prisma.$RatingPayload<ExtArgs>, T, 'update', GlobalOmitOptions>,
        never,
        ExtArgs,
        GlobalOmitOptions
    >;

    /**
     * Delete zero or more Ratings.
     * @param {RatingDeleteManyArgs} args - Arguments to filter Ratings to delete.
     * @example
     * // Delete a few Ratings
     * const { count } = await prisma.rating.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     *
     */
    deleteMany<T extends RatingDeleteManyArgs>(
        args?: Prisma.SelectSubset<T, RatingDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<Prisma.BatchPayload>;

    /**
     * Update zero or more Ratings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RatingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Ratings
     * const rating = await prisma.rating.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     */
    updateMany<T extends RatingUpdateManyArgs>(
        args: Prisma.SelectSubset<T, RatingUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<Prisma.BatchPayload>;

    /**
     * Update zero or more Ratings and returns the data updated in the database.
     * @param {RatingUpdateManyAndReturnArgs} args - Arguments to update many Ratings.
     * @example
     * // Update many Ratings
     * const rating = await prisma.rating.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     * // Update zero or more Ratings and only return the `id`
     * const ratingWithIdOnly = await prisma.rating.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     *
     */
    updateManyAndReturn<T extends RatingUpdateManyAndReturnArgs>(
        args: Prisma.SelectSubset<T, RatingUpdateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<
        runtime.Types.Result.GetResult<Prisma.$RatingPayload<ExtArgs>, T, 'updateManyAndReturn', GlobalOmitOptions>
    >;

    /**
     * Create or update one Rating.
     * @param {RatingUpsertArgs} args - Arguments to update or create a Rating.
     * @example
     * // Update or create a Rating
     * const rating = await prisma.rating.upsert({
     *   create: {
     *     // ... data to create a Rating
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Rating we want to update
     *   }
     * })
     */
    upsert<T extends RatingUpsertArgs>(
        args: Prisma.SelectSubset<T, RatingUpsertArgs<ExtArgs>>
    ): Prisma.Prisma__RatingClient<
        runtime.Types.Result.GetResult<Prisma.$RatingPayload<ExtArgs>, T, 'upsert', GlobalOmitOptions>,
        never,
        ExtArgs,
        GlobalOmitOptions
    >;

    /**
     * Count the number of Ratings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RatingCountArgs} args - Arguments to filter Ratings to count.
     * @example
     * // Count the number of Ratings
     * const count = await prisma.rating.count({
     *   where: {
     *     // ... the filter for the Ratings we want to count
     *   }
     * })
     **/
    count<T extends RatingCountArgs>(
        args?: Prisma.Subset<T, RatingCountArgs>
    ): Prisma.PrismaPromise<
        T extends runtime.Types.Utils.Record<'select', any>
            ? T['select'] extends true
                ? number
                : Prisma.GetScalarType<T['select'], RatingCountAggregateOutputType>
            : number
    >;

    /**
     * Allows you to perform aggregations operations on a Rating.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RatingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
     **/
    aggregate<T extends RatingAggregateArgs>(
        args: Prisma.Subset<T, RatingAggregateArgs>
    ): Prisma.PrismaPromise<GetRatingAggregateType<T>>;

    /**
     * Group by Rating.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RatingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     *
     **/
    groupBy<
        T extends RatingGroupByArgs,
        HasSelectOrTake extends Prisma.Or<
            Prisma.Extends<'skip', Prisma.Keys<T>>,
            Prisma.Extends<'take', Prisma.Keys<T>>
        >,
        OrderByArg extends Prisma.True extends HasSelectOrTake
            ? { orderBy: RatingGroupByArgs['orderBy'] }
            : { orderBy?: RatingGroupByArgs['orderBy'] },
        OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
        ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
        ByValid extends Prisma.Has<ByFields, OrderFields>,
        HavingFields extends Prisma.GetHavingFields<T['having']>,
        HavingValid extends Prisma.Has<ByFields, HavingFields>,
        ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
        InputErrors extends ByEmpty extends Prisma.True
            ? `Error: "by" must not be empty.`
            : HavingValid extends Prisma.False
              ? {
                    [P in HavingFields]: P extends ByFields
                        ? never
                        : P extends string
                          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                          : [Error, 'Field ', P, ` in "having" needs to be provided in "by"`];
                }[HavingFields]
              : 'take' extends Prisma.Keys<T>
                ? 'orderBy' extends Prisma.Keys<T>
                    ? ByValid extends Prisma.True
                        ? {}
                        : {
                              [P in OrderFields]: P extends ByFields
                                  ? never
                                  : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                          }[OrderFields]
                    : 'Error: If you provide "take", you also need to provide "orderBy"'
                : 'skip' extends Prisma.Keys<T>
                  ? 'orderBy' extends Prisma.Keys<T>
                      ? ByValid extends Prisma.True
                          ? {}
                          : {
                                [P in OrderFields]: P extends ByFields
                                    ? never
                                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                            }[OrderFields]
                      : 'Error: If you provide "skip", you also need to provide "orderBy"'
                  : ByValid extends Prisma.True
                    ? {}
                    : {
                          [P in OrderFields]: P extends ByFields
                              ? never
                              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                      }[OrderFields]
    >(
        args: Prisma.SubsetIntersection<T, RatingGroupByArgs, OrderByArg> & InputErrors
    ): {} extends InputErrors ? GetRatingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>;
    /**
     * Fields of the Rating model
     */
    readonly fields: RatingFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Rating.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__RatingClient<
    T,
    Null = never,
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
    GlobalOmitOptions = {}
> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    doctor<T extends Prisma.DoctorDefaultArgs<ExtArgs> = {}>(
        args?: Prisma.Subset<T, Prisma.DoctorDefaultArgs<ExtArgs>>
    ): Prisma.Prisma__DoctorClient<
        | runtime.Types.Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, 'findUniqueOrThrow', GlobalOmitOptions>
        | Null,
        Null,
        ExtArgs,
        GlobalOmitOptions
    >;
    patient<T extends Prisma.PatientDefaultArgs<ExtArgs> = {}>(
        args?: Prisma.Subset<T, Prisma.PatientDefaultArgs<ExtArgs>>
    ): Prisma.Prisma__PatientClient<
        | runtime.Types.Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, 'findUniqueOrThrow', GlobalOmitOptions>
        | Null,
        Null,
        ExtArgs,
        GlobalOmitOptions
    >;
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(
        onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null,
        onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null
    ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(
        onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null
    ): runtime.Types.Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the Rating model
 */
export interface RatingFieldRefs {
    readonly id: Prisma.FieldRef<'Rating', 'Int'>;
    readonly staffId: Prisma.FieldRef<'Rating', 'String'>;
    readonly patientId: Prisma.FieldRef<'Rating', 'String'>;
    readonly rating: Prisma.FieldRef<'Rating', 'Int'>;
    readonly comment: Prisma.FieldRef<'Rating', 'String'>;
    readonly createdAt: Prisma.FieldRef<'Rating', 'DateTime'>;
    readonly updatedAt: Prisma.FieldRef<'Rating', 'DateTime'>;
}

// Custom InputTypes
/**
 * Rating findUnique
 */
export type RatingFindUniqueArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: Prisma.RatingSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Rating
     */
    omit?: Prisma.RatingOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.RatingInclude<ExtArgs> | null;
    /**
     * Filter, which Rating to fetch.
     */
    where: Prisma.RatingWhereUniqueInput;
};

/**
 * Rating findUniqueOrThrow
 */
export type RatingFindUniqueOrThrowArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: Prisma.RatingSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Rating
     */
    omit?: Prisma.RatingOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.RatingInclude<ExtArgs> | null;
    /**
     * Filter, which Rating to fetch.
     */
    where: Prisma.RatingWhereUniqueInput;
};

/**
 * Rating findFirst
 */
export type RatingFindFirstArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: Prisma.RatingSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Rating
     */
    omit?: Prisma.RatingOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.RatingInclude<ExtArgs> | null;
    /**
     * Filter, which Rating to fetch.
     */
    where?: Prisma.RatingWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Ratings to fetch.
     */
    orderBy?: Prisma.RatingOrderByWithRelationInput | Prisma.RatingOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for Ratings.
     */
    cursor?: Prisma.RatingWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `Â±n` Ratings from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Ratings.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of Ratings.
     */
    distinct?: Prisma.RatingScalarFieldEnum | Prisma.RatingScalarFieldEnum[];
};

/**
 * Rating findFirstOrThrow
 */
export type RatingFindFirstOrThrowArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: Prisma.RatingSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Rating
     */
    omit?: Prisma.RatingOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.RatingInclude<ExtArgs> | null;
    /**
     * Filter, which Rating to fetch.
     */
    where?: Prisma.RatingWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Ratings to fetch.
     */
    orderBy?: Prisma.RatingOrderByWithRelationInput | Prisma.RatingOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for Ratings.
     */
    cursor?: Prisma.RatingWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `Â±n` Ratings from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Ratings.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of Ratings.
     */
    distinct?: Prisma.RatingScalarFieldEnum | Prisma.RatingScalarFieldEnum[];
};

/**
 * Rating findMany
 */
export type RatingFindManyArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: Prisma.RatingSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Rating
     */
    omit?: Prisma.RatingOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.RatingInclude<ExtArgs> | null;
    /**
     * Filter, which Ratings to fetch.
     */
    where?: Prisma.RatingWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Ratings to fetch.
     */
    orderBy?: Prisma.RatingOrderByWithRelationInput | Prisma.RatingOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for listing Ratings.
     */
    cursor?: Prisma.RatingWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `Â±n` Ratings from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Ratings.
     */
    skip?: number;
    distinct?: Prisma.RatingScalarFieldEnum | Prisma.RatingScalarFieldEnum[];
};

/**
 * Rating create
 */
export type RatingCreateArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: Prisma.RatingSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Rating
     */
    omit?: Prisma.RatingOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.RatingInclude<ExtArgs> | null;
    /**
     * The data needed to create a Rating.
     */
    data: Prisma.XOR<Prisma.RatingCreateInput, Prisma.RatingUncheckedCreateInput>;
};

/**
 * Rating createMany
 */
export type RatingCreateManyArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * The data used to create many Ratings.
     */
    data: Prisma.RatingCreateManyInput | Prisma.RatingCreateManyInput[];
    skipDuplicates?: boolean;
};

/**
 * Rating createManyAndReturn
 */
export type RatingCreateManyAndReturnArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: Prisma.RatingSelectCreateManyAndReturn<ExtArgs> | null;
    /**
     * Omit specific fields from the Rating
     */
    omit?: Prisma.RatingOmit<ExtArgs> | null;
    /**
     * The data used to create many Ratings.
     */
    data: Prisma.RatingCreateManyInput | Prisma.RatingCreateManyInput[];
    skipDuplicates?: boolean;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.RatingIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * Rating update
 */
export type RatingUpdateArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: Prisma.RatingSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Rating
     */
    omit?: Prisma.RatingOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.RatingInclude<ExtArgs> | null;
    /**
     * The data needed to update a Rating.
     */
    data: Prisma.XOR<Prisma.RatingUpdateInput, Prisma.RatingUncheckedUpdateInput>;
    /**
     * Choose, which Rating to update.
     */
    where: Prisma.RatingWhereUniqueInput;
};

/**
 * Rating updateMany
 */
export type RatingUpdateManyArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * The data used to update Ratings.
     */
    data: Prisma.XOR<Prisma.RatingUpdateManyMutationInput, Prisma.RatingUncheckedUpdateManyInput>;
    /**
     * Filter which Ratings to update
     */
    where?: Prisma.RatingWhereInput;
    /**
     * Limit how many Ratings to update.
     */
    limit?: number;
};

/**
 * Rating updateManyAndReturn
 */
export type RatingUpdateManyAndReturnArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: Prisma.RatingSelectUpdateManyAndReturn<ExtArgs> | null;
    /**
     * Omit specific fields from the Rating
     */
    omit?: Prisma.RatingOmit<ExtArgs> | null;
    /**
     * The data used to update Ratings.
     */
    data: Prisma.XOR<Prisma.RatingUpdateManyMutationInput, Prisma.RatingUncheckedUpdateManyInput>;
    /**
     * Filter which Ratings to update
     */
    where?: Prisma.RatingWhereInput;
    /**
     * Limit how many Ratings to update.
     */
    limit?: number;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.RatingIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * Rating upsert
 */
export type RatingUpsertArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: Prisma.RatingSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Rating
     */
    omit?: Prisma.RatingOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.RatingInclude<ExtArgs> | null;
    /**
     * The filter to search for the Rating to update in case it exists.
     */
    where: Prisma.RatingWhereUniqueInput;
    /**
     * In case the Rating found by the `where` argument doesn't exist, create a new Rating with this data.
     */
    create: Prisma.XOR<Prisma.RatingCreateInput, Prisma.RatingUncheckedCreateInput>;
    /**
     * In case the Rating was found with the provided `where` argument, update it with this data.
     */
    update: Prisma.XOR<Prisma.RatingUpdateInput, Prisma.RatingUncheckedUpdateInput>;
};

/**
 * Rating delete
 */
export type RatingDeleteArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: Prisma.RatingSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Rating
     */
    omit?: Prisma.RatingOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.RatingInclude<ExtArgs> | null;
    /**
     * Filter which Rating to delete.
     */
    where: Prisma.RatingWhereUniqueInput;
};

/**
 * Rating deleteMany
 */
export type RatingDeleteManyArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Filter which Ratings to delete
     */
    where?: Prisma.RatingWhereInput;
    /**
     * Limit how many Ratings to delete.
     */
    limit?: number;
};

/**
 * Rating without action
 */
export type RatingDefaultArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: Prisma.RatingSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Rating
     */
    omit?: Prisma.RatingOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.RatingInclude<ExtArgs> | null;
};
