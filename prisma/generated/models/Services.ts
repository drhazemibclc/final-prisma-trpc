/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/**
 * This file exports the `Services` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from '@prisma/client/runtime/library';
import type * as $Enums from '../enums';
import type * as Prisma from '../internal/prismaNamespace';

/**
 * Model Services
 *
 */
export type ServicesModel = runtime.Types.Result.DefaultSelection<Prisma.$ServicesPayload>;

export type AggregateServices = {
    _count: ServicesCountAggregateOutputType | null;
    _avg: ServicesAvgAggregateOutputType | null;
    _sum: ServicesSumAggregateOutputType | null;
    _min: ServicesMinAggregateOutputType | null;
    _max: ServicesMaxAggregateOutputType | null;
};

export type ServicesAvgAggregateOutputType = {
    id: number | null;
    price: number | null;
    duration: number | null;
};

export type ServicesSumAggregateOutputType = {
    id: number | null;
    price: number | null;
    duration: number | null;
};

export type ServicesMinAggregateOutputType = {
    id: number | null;
    serviceName: string | null;
    description: string | null;
    price: number | null;
    category: $Enums.ServiceCategory | null;
    duration: number | null;
    isAvailable: boolean | null;
    createdAt: Date | null;
    updatedAt: Date | null;
};

export type ServicesMaxAggregateOutputType = {
    id: number | null;
    serviceName: string | null;
    description: string | null;
    price: number | null;
    category: $Enums.ServiceCategory | null;
    duration: number | null;
    isAvailable: boolean | null;
    createdAt: Date | null;
    updatedAt: Date | null;
};

export type ServicesCountAggregateOutputType = {
    id: number;
    serviceName: number;
    description: number;
    price: number;
    category: number;
    duration: number;
    isAvailable: number;
    createdAt: number;
    updatedAt: number;
    _all: number;
};

export type ServicesAvgAggregateInputType = {
    id?: true;
    price?: true;
    duration?: true;
};

export type ServicesSumAggregateInputType = {
    id?: true;
    price?: true;
    duration?: true;
};

export type ServicesMinAggregateInputType = {
    id?: true;
    serviceName?: true;
    description?: true;
    price?: true;
    category?: true;
    duration?: true;
    isAvailable?: true;
    createdAt?: true;
    updatedAt?: true;
};

export type ServicesMaxAggregateInputType = {
    id?: true;
    serviceName?: true;
    description?: true;
    price?: true;
    category?: true;
    duration?: true;
    isAvailable?: true;
    createdAt?: true;
    updatedAt?: true;
};

export type ServicesCountAggregateInputType = {
    id?: true;
    serviceName?: true;
    description?: true;
    price?: true;
    category?: true;
    duration?: true;
    isAvailable?: true;
    createdAt?: true;
    updatedAt?: true;
    _all?: true;
};

export type ServicesAggregateArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Filter which Services to aggregate.
     */
    where?: Prisma.ServicesWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Services to fetch.
     */
    orderBy?: Prisma.ServicesOrderByWithRelationInput | Prisma.ServicesOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the start position
     */
    cursor?: Prisma.ServicesWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `Â±n` Services from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Services.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Count returned Services
     **/
    _count?: true | ServicesCountAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to average
     **/
    _avg?: ServicesAvgAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to sum
     **/
    _sum?: ServicesSumAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the minimum value
     **/
    _min?: ServicesMinAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the maximum value
     **/
    _max?: ServicesMaxAggregateInputType;
};

export type GetServicesAggregateType<T extends ServicesAggregateArgs> = {
    [P in keyof T & keyof AggregateServices]: P extends '_count' | 'count'
        ? T[P] extends true
            ? number
            : Prisma.GetScalarType<T[P], AggregateServices[P]>
        : Prisma.GetScalarType<T[P], AggregateServices[P]>;
};

export type ServicesGroupByArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    where?: Prisma.ServicesWhereInput;
    orderBy?: Prisma.ServicesOrderByWithAggregationInput | Prisma.ServicesOrderByWithAggregationInput[];
    by: Prisma.ServicesScalarFieldEnum[] | Prisma.ServicesScalarFieldEnum;
    having?: Prisma.ServicesScalarWhereWithAggregatesInput;
    take?: number;
    skip?: number;
    _count?: ServicesCountAggregateInputType | true;
    _avg?: ServicesAvgAggregateInputType;
    _sum?: ServicesSumAggregateInputType;
    _min?: ServicesMinAggregateInputType;
    _max?: ServicesMaxAggregateInputType;
};

export type ServicesGroupByOutputType = {
    id: number;
    serviceName: string;
    description: string;
    price: number;
    category: $Enums.ServiceCategory | null;
    duration: number | null;
    isAvailable: boolean;
    createdAt: Date;
    updatedAt: Date;
    _count: ServicesCountAggregateOutputType | null;
    _avg: ServicesAvgAggregateOutputType | null;
    _sum: ServicesSumAggregateOutputType | null;
    _min: ServicesMinAggregateOutputType | null;
    _max: ServicesMaxAggregateOutputType | null;
};

type GetServicesGroupByPayload<T extends ServicesGroupByArgs> = Prisma.PrismaPromise<
    Array<
        Prisma.PickEnumerable<ServicesGroupByOutputType, T['by']> & {
            [P in keyof T & keyof ServicesGroupByOutputType]: P extends '_count'
                ? T[P] extends boolean
                    ? number
                    : Prisma.GetScalarType<T[P], ServicesGroupByOutputType[P]>
                : Prisma.GetScalarType<T[P], ServicesGroupByOutputType[P]>;
        }
    >
>;

export type ServicesWhereInput = {
    AND?: Prisma.ServicesWhereInput | Prisma.ServicesWhereInput[];
    OR?: Prisma.ServicesWhereInput[];
    NOT?: Prisma.ServicesWhereInput | Prisma.ServicesWhereInput[];
    id?: Prisma.IntFilter<'Services'> | number;
    serviceName?: Prisma.StringFilter<'Services'> | string;
    description?: Prisma.StringFilter<'Services'> | string;
    price?: Prisma.FloatFilter<'Services'> | number;
    category?: Prisma.EnumServiceCategoryNullableFilter<'Services'> | $Enums.ServiceCategory | null;
    duration?: Prisma.IntNullableFilter<'Services'> | number | null;
    isAvailable?: Prisma.BoolFilter<'Services'> | boolean;
    createdAt?: Prisma.DateTimeFilter<'Services'> | Date | string;
    updatedAt?: Prisma.DateTimeFilter<'Services'> | Date | string;
    labtests?: Prisma.LabTestListRelationFilter;
    bills?: Prisma.PatientBillsListRelationFilter;
    appointments?: Prisma.AppointmentListRelationFilter;
};

export type ServicesOrderByWithRelationInput = {
    id?: Prisma.SortOrder;
    serviceName?: Prisma.SortOrder;
    description?: Prisma.SortOrder;
    price?: Prisma.SortOrder;
    category?: Prisma.SortOrderInput | Prisma.SortOrder;
    duration?: Prisma.SortOrderInput | Prisma.SortOrder;
    isAvailable?: Prisma.SortOrder;
    createdAt?: Prisma.SortOrder;
    updatedAt?: Prisma.SortOrder;
    labtests?: Prisma.LabTestOrderByRelationAggregateInput;
    bills?: Prisma.PatientBillsOrderByRelationAggregateInput;
    appointments?: Prisma.AppointmentOrderByRelationAggregateInput;
};

export type ServicesWhereUniqueInput = Prisma.AtLeast<
    {
        id?: number;
        AND?: Prisma.ServicesWhereInput | Prisma.ServicesWhereInput[];
        OR?: Prisma.ServicesWhereInput[];
        NOT?: Prisma.ServicesWhereInput | Prisma.ServicesWhereInput[];
        serviceName?: Prisma.StringFilter<'Services'> | string;
        description?: Prisma.StringFilter<'Services'> | string;
        price?: Prisma.FloatFilter<'Services'> | number;
        category?: Prisma.EnumServiceCategoryNullableFilter<'Services'> | $Enums.ServiceCategory | null;
        duration?: Prisma.IntNullableFilter<'Services'> | number | null;
        isAvailable?: Prisma.BoolFilter<'Services'> | boolean;
        createdAt?: Prisma.DateTimeFilter<'Services'> | Date | string;
        updatedAt?: Prisma.DateTimeFilter<'Services'> | Date | string;
        labtests?: Prisma.LabTestListRelationFilter;
        bills?: Prisma.PatientBillsListRelationFilter;
        appointments?: Prisma.AppointmentListRelationFilter;
    },
    'id'
>;

export type ServicesOrderByWithAggregationInput = {
    id?: Prisma.SortOrder;
    serviceName?: Prisma.SortOrder;
    description?: Prisma.SortOrder;
    price?: Prisma.SortOrder;
    category?: Prisma.SortOrderInput | Prisma.SortOrder;
    duration?: Prisma.SortOrderInput | Prisma.SortOrder;
    isAvailable?: Prisma.SortOrder;
    createdAt?: Prisma.SortOrder;
    updatedAt?: Prisma.SortOrder;
    _count?: Prisma.ServicesCountOrderByAggregateInput;
    _avg?: Prisma.ServicesAvgOrderByAggregateInput;
    _max?: Prisma.ServicesMaxOrderByAggregateInput;
    _min?: Prisma.ServicesMinOrderByAggregateInput;
    _sum?: Prisma.ServicesSumOrderByAggregateInput;
};

export type ServicesScalarWhereWithAggregatesInput = {
    AND?: Prisma.ServicesScalarWhereWithAggregatesInput | Prisma.ServicesScalarWhereWithAggregatesInput[];
    OR?: Prisma.ServicesScalarWhereWithAggregatesInput[];
    NOT?: Prisma.ServicesScalarWhereWithAggregatesInput | Prisma.ServicesScalarWhereWithAggregatesInput[];
    id?: Prisma.IntWithAggregatesFilter<'Services'> | number;
    serviceName?: Prisma.StringWithAggregatesFilter<'Services'> | string;
    description?: Prisma.StringWithAggregatesFilter<'Services'> | string;
    price?: Prisma.FloatWithAggregatesFilter<'Services'> | number;
    category?: Prisma.EnumServiceCategoryNullableWithAggregatesFilter<'Services'> | $Enums.ServiceCategory | null;
    duration?: Prisma.IntNullableWithAggregatesFilter<'Services'> | number | null;
    isAvailable?: Prisma.BoolWithAggregatesFilter<'Services'> | boolean;
    createdAt?: Prisma.DateTimeWithAggregatesFilter<'Services'> | Date | string;
    updatedAt?: Prisma.DateTimeWithAggregatesFilter<'Services'> | Date | string;
};

export type ServicesCreateInput = {
    serviceName: string;
    description: string;
    price: number;
    category?: $Enums.ServiceCategory | null;
    duration?: number | null;
    isAvailable?: boolean;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    labtests?: Prisma.LabTestCreateNestedManyWithoutServicesInput;
    bills?: Prisma.PatientBillsCreateNestedManyWithoutServiceInput;
    appointments?: Prisma.AppointmentCreateNestedManyWithoutServiceInput;
};

export type ServicesUncheckedCreateInput = {
    id?: number;
    serviceName: string;
    description: string;
    price: number;
    category?: $Enums.ServiceCategory | null;
    duration?: number | null;
    isAvailable?: boolean;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    labtests?: Prisma.LabTestUncheckedCreateNestedManyWithoutServicesInput;
    bills?: Prisma.PatientBillsUncheckedCreateNestedManyWithoutServiceInput;
    appointments?: Prisma.AppointmentUncheckedCreateNestedManyWithoutServiceInput;
};

export type ServicesUpdateInput = {
    serviceName?: Prisma.StringFieldUpdateOperationsInput | string;
    description?: Prisma.StringFieldUpdateOperationsInput | string;
    price?: Prisma.FloatFieldUpdateOperationsInput | number;
    category?: Prisma.NullableEnumServiceCategoryFieldUpdateOperationsInput | $Enums.ServiceCategory | null;
    duration?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
    isAvailable?: Prisma.BoolFieldUpdateOperationsInput | boolean;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    labtests?: Prisma.LabTestUpdateManyWithoutServicesNestedInput;
    bills?: Prisma.PatientBillsUpdateManyWithoutServiceNestedInput;
    appointments?: Prisma.AppointmentUpdateManyWithoutServiceNestedInput;
};

export type ServicesUncheckedUpdateInput = {
    id?: Prisma.IntFieldUpdateOperationsInput | number;
    serviceName?: Prisma.StringFieldUpdateOperationsInput | string;
    description?: Prisma.StringFieldUpdateOperationsInput | string;
    price?: Prisma.FloatFieldUpdateOperationsInput | number;
    category?: Prisma.NullableEnumServiceCategoryFieldUpdateOperationsInput | $Enums.ServiceCategory | null;
    duration?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
    isAvailable?: Prisma.BoolFieldUpdateOperationsInput | boolean;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    labtests?: Prisma.LabTestUncheckedUpdateManyWithoutServicesNestedInput;
    bills?: Prisma.PatientBillsUncheckedUpdateManyWithoutServiceNestedInput;
    appointments?: Prisma.AppointmentUncheckedUpdateManyWithoutServiceNestedInput;
};

export type ServicesCreateManyInput = {
    id?: number;
    serviceName: string;
    description: string;
    price: number;
    category?: $Enums.ServiceCategory | null;
    duration?: number | null;
    isAvailable?: boolean;
    createdAt?: Date | string;
    updatedAt?: Date | string;
};

export type ServicesUpdateManyMutationInput = {
    serviceName?: Prisma.StringFieldUpdateOperationsInput | string;
    description?: Prisma.StringFieldUpdateOperationsInput | string;
    price?: Prisma.FloatFieldUpdateOperationsInput | number;
    category?: Prisma.NullableEnumServiceCategoryFieldUpdateOperationsInput | $Enums.ServiceCategory | null;
    duration?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
    isAvailable?: Prisma.BoolFieldUpdateOperationsInput | boolean;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type ServicesUncheckedUpdateManyInput = {
    id?: Prisma.IntFieldUpdateOperationsInput | number;
    serviceName?: Prisma.StringFieldUpdateOperationsInput | string;
    description?: Prisma.StringFieldUpdateOperationsInput | string;
    price?: Prisma.FloatFieldUpdateOperationsInput | number;
    category?: Prisma.NullableEnumServiceCategoryFieldUpdateOperationsInput | $Enums.ServiceCategory | null;
    duration?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
    isAvailable?: Prisma.BoolFieldUpdateOperationsInput | boolean;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type ServicesNullableScalarRelationFilter = {
    is?: Prisma.ServicesWhereInput | null;
    isNot?: Prisma.ServicesWhereInput | null;
};

export type ServicesScalarRelationFilter = {
    is?: Prisma.ServicesWhereInput;
    isNot?: Prisma.ServicesWhereInput;
};

export type ServicesCountOrderByAggregateInput = {
    id?: Prisma.SortOrder;
    serviceName?: Prisma.SortOrder;
    description?: Prisma.SortOrder;
    price?: Prisma.SortOrder;
    category?: Prisma.SortOrder;
    duration?: Prisma.SortOrder;
    isAvailable?: Prisma.SortOrder;
    createdAt?: Prisma.SortOrder;
    updatedAt?: Prisma.SortOrder;
};

export type ServicesAvgOrderByAggregateInput = {
    id?: Prisma.SortOrder;
    price?: Prisma.SortOrder;
    duration?: Prisma.SortOrder;
};

export type ServicesMaxOrderByAggregateInput = {
    id?: Prisma.SortOrder;
    serviceName?: Prisma.SortOrder;
    description?: Prisma.SortOrder;
    price?: Prisma.SortOrder;
    category?: Prisma.SortOrder;
    duration?: Prisma.SortOrder;
    isAvailable?: Prisma.SortOrder;
    createdAt?: Prisma.SortOrder;
    updatedAt?: Prisma.SortOrder;
};

export type ServicesMinOrderByAggregateInput = {
    id?: Prisma.SortOrder;
    serviceName?: Prisma.SortOrder;
    description?: Prisma.SortOrder;
    price?: Prisma.SortOrder;
    category?: Prisma.SortOrder;
    duration?: Prisma.SortOrder;
    isAvailable?: Prisma.SortOrder;
    createdAt?: Prisma.SortOrder;
    updatedAt?: Prisma.SortOrder;
};

export type ServicesSumOrderByAggregateInput = {
    id?: Prisma.SortOrder;
    price?: Prisma.SortOrder;
    duration?: Prisma.SortOrder;
};

export type ServicesCreateNestedOneWithoutAppointmentsInput = {
    create?: Prisma.XOR<
        Prisma.ServicesCreateWithoutAppointmentsInput,
        Prisma.ServicesUncheckedCreateWithoutAppointmentsInput
    >;
    connectOrCreate?: Prisma.ServicesCreateOrConnectWithoutAppointmentsInput;
    connect?: Prisma.ServicesWhereUniqueInput;
};

export type ServicesUpdateOneWithoutAppointmentsNestedInput = {
    create?: Prisma.XOR<
        Prisma.ServicesCreateWithoutAppointmentsInput,
        Prisma.ServicesUncheckedCreateWithoutAppointmentsInput
    >;
    connectOrCreate?: Prisma.ServicesCreateOrConnectWithoutAppointmentsInput;
    upsert?: Prisma.ServicesUpsertWithoutAppointmentsInput;
    disconnect?: Prisma.ServicesWhereInput | boolean;
    delete?: Prisma.ServicesWhereInput | boolean;
    connect?: Prisma.ServicesWhereUniqueInput;
    update?: Prisma.XOR<
        Prisma.XOR<
            Prisma.ServicesUpdateToOneWithWhereWithoutAppointmentsInput,
            Prisma.ServicesUpdateWithoutAppointmentsInput
        >,
        Prisma.ServicesUncheckedUpdateWithoutAppointmentsInput
    >;
};

export type ServicesCreateNestedOneWithoutBillsInput = {
    create?: Prisma.XOR<Prisma.ServicesCreateWithoutBillsInput, Prisma.ServicesUncheckedCreateWithoutBillsInput>;
    connectOrCreate?: Prisma.ServicesCreateOrConnectWithoutBillsInput;
    connect?: Prisma.ServicesWhereUniqueInput;
};

export type ServicesUpdateOneRequiredWithoutBillsNestedInput = {
    create?: Prisma.XOR<Prisma.ServicesCreateWithoutBillsInput, Prisma.ServicesUncheckedCreateWithoutBillsInput>;
    connectOrCreate?: Prisma.ServicesCreateOrConnectWithoutBillsInput;
    upsert?: Prisma.ServicesUpsertWithoutBillsInput;
    connect?: Prisma.ServicesWhereUniqueInput;
    update?: Prisma.XOR<
        Prisma.XOR<Prisma.ServicesUpdateToOneWithWhereWithoutBillsInput, Prisma.ServicesUpdateWithoutBillsInput>,
        Prisma.ServicesUncheckedUpdateWithoutBillsInput
    >;
};

export type ServicesCreateNestedOneWithoutLabtestsInput = {
    create?: Prisma.XOR<Prisma.ServicesCreateWithoutLabtestsInput, Prisma.ServicesUncheckedCreateWithoutLabtestsInput>;
    connectOrCreate?: Prisma.ServicesCreateOrConnectWithoutLabtestsInput;
    connect?: Prisma.ServicesWhereUniqueInput;
};

export type ServicesUpdateOneWithoutLabtestsNestedInput = {
    create?: Prisma.XOR<Prisma.ServicesCreateWithoutLabtestsInput, Prisma.ServicesUncheckedCreateWithoutLabtestsInput>;
    connectOrCreate?: Prisma.ServicesCreateOrConnectWithoutLabtestsInput;
    upsert?: Prisma.ServicesUpsertWithoutLabtestsInput;
    disconnect?: Prisma.ServicesWhereInput | boolean;
    delete?: Prisma.ServicesWhereInput | boolean;
    connect?: Prisma.ServicesWhereUniqueInput;
    update?: Prisma.XOR<
        Prisma.XOR<Prisma.ServicesUpdateToOneWithWhereWithoutLabtestsInput, Prisma.ServicesUpdateWithoutLabtestsInput>,
        Prisma.ServicesUncheckedUpdateWithoutLabtestsInput
    >;
};

export type NullableEnumServiceCategoryFieldUpdateOperationsInput = {
    set?: $Enums.ServiceCategory | null;
};

export type ServicesCreateWithoutAppointmentsInput = {
    serviceName: string;
    description: string;
    price: number;
    category?: $Enums.ServiceCategory | null;
    duration?: number | null;
    isAvailable?: boolean;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    labtests?: Prisma.LabTestCreateNestedManyWithoutServicesInput;
    bills?: Prisma.PatientBillsCreateNestedManyWithoutServiceInput;
};

export type ServicesUncheckedCreateWithoutAppointmentsInput = {
    id?: number;
    serviceName: string;
    description: string;
    price: number;
    category?: $Enums.ServiceCategory | null;
    duration?: number | null;
    isAvailable?: boolean;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    labtests?: Prisma.LabTestUncheckedCreateNestedManyWithoutServicesInput;
    bills?: Prisma.PatientBillsUncheckedCreateNestedManyWithoutServiceInput;
};

export type ServicesCreateOrConnectWithoutAppointmentsInput = {
    where: Prisma.ServicesWhereUniqueInput;
    create: Prisma.XOR<
        Prisma.ServicesCreateWithoutAppointmentsInput,
        Prisma.ServicesUncheckedCreateWithoutAppointmentsInput
    >;
};

export type ServicesUpsertWithoutAppointmentsInput = {
    update: Prisma.XOR<
        Prisma.ServicesUpdateWithoutAppointmentsInput,
        Prisma.ServicesUncheckedUpdateWithoutAppointmentsInput
    >;
    create: Prisma.XOR<
        Prisma.ServicesCreateWithoutAppointmentsInput,
        Prisma.ServicesUncheckedCreateWithoutAppointmentsInput
    >;
    where?: Prisma.ServicesWhereInput;
};

export type ServicesUpdateToOneWithWhereWithoutAppointmentsInput = {
    where?: Prisma.ServicesWhereInput;
    data: Prisma.XOR<
        Prisma.ServicesUpdateWithoutAppointmentsInput,
        Prisma.ServicesUncheckedUpdateWithoutAppointmentsInput
    >;
};

export type ServicesUpdateWithoutAppointmentsInput = {
    serviceName?: Prisma.StringFieldUpdateOperationsInput | string;
    description?: Prisma.StringFieldUpdateOperationsInput | string;
    price?: Prisma.FloatFieldUpdateOperationsInput | number;
    category?: Prisma.NullableEnumServiceCategoryFieldUpdateOperationsInput | $Enums.ServiceCategory | null;
    duration?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
    isAvailable?: Prisma.BoolFieldUpdateOperationsInput | boolean;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    labtests?: Prisma.LabTestUpdateManyWithoutServicesNestedInput;
    bills?: Prisma.PatientBillsUpdateManyWithoutServiceNestedInput;
};

export type ServicesUncheckedUpdateWithoutAppointmentsInput = {
    id?: Prisma.IntFieldUpdateOperationsInput | number;
    serviceName?: Prisma.StringFieldUpdateOperationsInput | string;
    description?: Prisma.StringFieldUpdateOperationsInput | string;
    price?: Prisma.FloatFieldUpdateOperationsInput | number;
    category?: Prisma.NullableEnumServiceCategoryFieldUpdateOperationsInput | $Enums.ServiceCategory | null;
    duration?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
    isAvailable?: Prisma.BoolFieldUpdateOperationsInput | boolean;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    labtests?: Prisma.LabTestUncheckedUpdateManyWithoutServicesNestedInput;
    bills?: Prisma.PatientBillsUncheckedUpdateManyWithoutServiceNestedInput;
};

export type ServicesCreateWithoutBillsInput = {
    serviceName: string;
    description: string;
    price: number;
    category?: $Enums.ServiceCategory | null;
    duration?: number | null;
    isAvailable?: boolean;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    labtests?: Prisma.LabTestCreateNestedManyWithoutServicesInput;
    appointments?: Prisma.AppointmentCreateNestedManyWithoutServiceInput;
};

export type ServicesUncheckedCreateWithoutBillsInput = {
    id?: number;
    serviceName: string;
    description: string;
    price: number;
    category?: $Enums.ServiceCategory | null;
    duration?: number | null;
    isAvailable?: boolean;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    labtests?: Prisma.LabTestUncheckedCreateNestedManyWithoutServicesInput;
    appointments?: Prisma.AppointmentUncheckedCreateNestedManyWithoutServiceInput;
};

export type ServicesCreateOrConnectWithoutBillsInput = {
    where: Prisma.ServicesWhereUniqueInput;
    create: Prisma.XOR<Prisma.ServicesCreateWithoutBillsInput, Prisma.ServicesUncheckedCreateWithoutBillsInput>;
};

export type ServicesUpsertWithoutBillsInput = {
    update: Prisma.XOR<Prisma.ServicesUpdateWithoutBillsInput, Prisma.ServicesUncheckedUpdateWithoutBillsInput>;
    create: Prisma.XOR<Prisma.ServicesCreateWithoutBillsInput, Prisma.ServicesUncheckedCreateWithoutBillsInput>;
    where?: Prisma.ServicesWhereInput;
};

export type ServicesUpdateToOneWithWhereWithoutBillsInput = {
    where?: Prisma.ServicesWhereInput;
    data: Prisma.XOR<Prisma.ServicesUpdateWithoutBillsInput, Prisma.ServicesUncheckedUpdateWithoutBillsInput>;
};

export type ServicesUpdateWithoutBillsInput = {
    serviceName?: Prisma.StringFieldUpdateOperationsInput | string;
    description?: Prisma.StringFieldUpdateOperationsInput | string;
    price?: Prisma.FloatFieldUpdateOperationsInput | number;
    category?: Prisma.NullableEnumServiceCategoryFieldUpdateOperationsInput | $Enums.ServiceCategory | null;
    duration?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
    isAvailable?: Prisma.BoolFieldUpdateOperationsInput | boolean;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    labtests?: Prisma.LabTestUpdateManyWithoutServicesNestedInput;
    appointments?: Prisma.AppointmentUpdateManyWithoutServiceNestedInput;
};

export type ServicesUncheckedUpdateWithoutBillsInput = {
    id?: Prisma.IntFieldUpdateOperationsInput | number;
    serviceName?: Prisma.StringFieldUpdateOperationsInput | string;
    description?: Prisma.StringFieldUpdateOperationsInput | string;
    price?: Prisma.FloatFieldUpdateOperationsInput | number;
    category?: Prisma.NullableEnumServiceCategoryFieldUpdateOperationsInput | $Enums.ServiceCategory | null;
    duration?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
    isAvailable?: Prisma.BoolFieldUpdateOperationsInput | boolean;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    labtests?: Prisma.LabTestUncheckedUpdateManyWithoutServicesNestedInput;
    appointments?: Prisma.AppointmentUncheckedUpdateManyWithoutServiceNestedInput;
};

export type ServicesCreateWithoutLabtestsInput = {
    serviceName: string;
    description: string;
    price: number;
    category?: $Enums.ServiceCategory | null;
    duration?: number | null;
    isAvailable?: boolean;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    bills?: Prisma.PatientBillsCreateNestedManyWithoutServiceInput;
    appointments?: Prisma.AppointmentCreateNestedManyWithoutServiceInput;
};

export type ServicesUncheckedCreateWithoutLabtestsInput = {
    id?: number;
    serviceName: string;
    description: string;
    price: number;
    category?: $Enums.ServiceCategory | null;
    duration?: number | null;
    isAvailable?: boolean;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    bills?: Prisma.PatientBillsUncheckedCreateNestedManyWithoutServiceInput;
    appointments?: Prisma.AppointmentUncheckedCreateNestedManyWithoutServiceInput;
};

export type ServicesCreateOrConnectWithoutLabtestsInput = {
    where: Prisma.ServicesWhereUniqueInput;
    create: Prisma.XOR<Prisma.ServicesCreateWithoutLabtestsInput, Prisma.ServicesUncheckedCreateWithoutLabtestsInput>;
};

export type ServicesUpsertWithoutLabtestsInput = {
    update: Prisma.XOR<Prisma.ServicesUpdateWithoutLabtestsInput, Prisma.ServicesUncheckedUpdateWithoutLabtestsInput>;
    create: Prisma.XOR<Prisma.ServicesCreateWithoutLabtestsInput, Prisma.ServicesUncheckedCreateWithoutLabtestsInput>;
    where?: Prisma.ServicesWhereInput;
};

export type ServicesUpdateToOneWithWhereWithoutLabtestsInput = {
    where?: Prisma.ServicesWhereInput;
    data: Prisma.XOR<Prisma.ServicesUpdateWithoutLabtestsInput, Prisma.ServicesUncheckedUpdateWithoutLabtestsInput>;
};

export type ServicesUpdateWithoutLabtestsInput = {
    serviceName?: Prisma.StringFieldUpdateOperationsInput | string;
    description?: Prisma.StringFieldUpdateOperationsInput | string;
    price?: Prisma.FloatFieldUpdateOperationsInput | number;
    category?: Prisma.NullableEnumServiceCategoryFieldUpdateOperationsInput | $Enums.ServiceCategory | null;
    duration?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
    isAvailable?: Prisma.BoolFieldUpdateOperationsInput | boolean;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    bills?: Prisma.PatientBillsUpdateManyWithoutServiceNestedInput;
    appointments?: Prisma.AppointmentUpdateManyWithoutServiceNestedInput;
};

export type ServicesUncheckedUpdateWithoutLabtestsInput = {
    id?: Prisma.IntFieldUpdateOperationsInput | number;
    serviceName?: Prisma.StringFieldUpdateOperationsInput | string;
    description?: Prisma.StringFieldUpdateOperationsInput | string;
    price?: Prisma.FloatFieldUpdateOperationsInput | number;
    category?: Prisma.NullableEnumServiceCategoryFieldUpdateOperationsInput | $Enums.ServiceCategory | null;
    duration?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
    isAvailable?: Prisma.BoolFieldUpdateOperationsInput | boolean;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    bills?: Prisma.PatientBillsUncheckedUpdateManyWithoutServiceNestedInput;
    appointments?: Prisma.AppointmentUncheckedUpdateManyWithoutServiceNestedInput;
};

/**
 * Count Type ServicesCountOutputType
 */

export type ServicesCountOutputType = {
    labtests: number;
    bills: number;
    appointments: number;
};

export type ServicesCountOutputTypeSelect<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    labtests?: boolean | ServicesCountOutputTypeCountLabtestsArgs;
    bills?: boolean | ServicesCountOutputTypeCountBillsArgs;
    appointments?: boolean | ServicesCountOutputTypeCountAppointmentsArgs;
};

/**
 * ServicesCountOutputType without action
 */
export type ServicesCountOutputTypeDefaultArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the ServicesCountOutputType
     */
    select?: Prisma.ServicesCountOutputTypeSelect<ExtArgs> | null;
};

/**
 * ServicesCountOutputType without action
 */
export type ServicesCountOutputTypeCountLabtestsArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    where?: Prisma.LabTestWhereInput;
};

/**
 * ServicesCountOutputType without action
 */
export type ServicesCountOutputTypeCountBillsArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    where?: Prisma.PatientBillsWhereInput;
};

/**
 * ServicesCountOutputType without action
 */
export type ServicesCountOutputTypeCountAppointmentsArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    where?: Prisma.AppointmentWhereInput;
};

export type ServicesSelect<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
    {
        id?: boolean;
        serviceName?: boolean;
        description?: boolean;
        price?: boolean;
        category?: boolean;
        duration?: boolean;
        isAvailable?: boolean;
        createdAt?: boolean;
        updatedAt?: boolean;
        labtests?: boolean | Prisma.Services$labtestsArgs<ExtArgs>;
        bills?: boolean | Prisma.Services$billsArgs<ExtArgs>;
        appointments?: boolean | Prisma.Services$appointmentsArgs<ExtArgs>;
        _count?: boolean | Prisma.ServicesCountOutputTypeDefaultArgs<ExtArgs>;
    },
    ExtArgs['result']['services']
>;

export type ServicesSelectCreateManyAndReturn<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
    {
        id?: boolean;
        serviceName?: boolean;
        description?: boolean;
        price?: boolean;
        category?: boolean;
        duration?: boolean;
        isAvailable?: boolean;
        createdAt?: boolean;
        updatedAt?: boolean;
    },
    ExtArgs['result']['services']
>;

export type ServicesSelectUpdateManyAndReturn<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
    {
        id?: boolean;
        serviceName?: boolean;
        description?: boolean;
        price?: boolean;
        category?: boolean;
        duration?: boolean;
        isAvailable?: boolean;
        createdAt?: boolean;
        updatedAt?: boolean;
    },
    ExtArgs['result']['services']
>;

export type ServicesSelectScalar = {
    id?: boolean;
    serviceName?: boolean;
    description?: boolean;
    price?: boolean;
    category?: boolean;
    duration?: boolean;
    isAvailable?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
};

export type ServicesOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
    runtime.Types.Extensions.GetOmit<
        | 'id'
        | 'serviceName'
        | 'description'
        | 'price'
        | 'category'
        | 'duration'
        | 'isAvailable'
        | 'createdAt'
        | 'updatedAt',
        ExtArgs['result']['services']
    >;
export type ServicesInclude<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    labtests?: boolean | Prisma.Services$labtestsArgs<ExtArgs>;
    bills?: boolean | Prisma.Services$billsArgs<ExtArgs>;
    appointments?: boolean | Prisma.Services$appointmentsArgs<ExtArgs>;
    _count?: boolean | Prisma.ServicesCountOutputTypeDefaultArgs<ExtArgs>;
};
export type ServicesIncludeCreateManyAndReturn<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {};
export type ServicesIncludeUpdateManyAndReturn<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {};

export type $ServicesPayload<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    name: 'Services';
    objects: {
        labtests: Prisma.$LabTestPayload<ExtArgs>[];
        bills: Prisma.$PatientBillsPayload<ExtArgs>[];
        appointments: Prisma.$AppointmentPayload<ExtArgs>[];
    };
    scalars: runtime.Types.Extensions.GetPayloadResult<
        {
            id: number;
            serviceName: string;
            description: string;
            price: number;
            category: $Enums.ServiceCategory | null;
            duration: number | null;
            isAvailable: boolean;
            createdAt: Date;
            updatedAt: Date;
        },
        ExtArgs['result']['services']
    >;
    composites: {};
};

export type ServicesGetPayload<S extends boolean | null | undefined | ServicesDefaultArgs> =
    runtime.Types.Result.GetResult<Prisma.$ServicesPayload, S>;

export type ServicesCountArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = Omit<ServicesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ServicesCountAggregateInputType | true;
};

export interface ServicesDelegate<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
    GlobalOmitOptions = {}
> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Services']; meta: { name: 'Services' } };
    /**
     * Find zero or one Services that matches the filter.
     * @param {ServicesFindUniqueArgs} args - Arguments to find a Services
     * @example
     * // Get one Services
     * const services = await prisma.services.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ServicesFindUniqueArgs>(
        args: Prisma.SelectSubset<T, ServicesFindUniqueArgs<ExtArgs>>
    ): Prisma.Prisma__ServicesClient<
        runtime.Types.Result.GetResult<Prisma.$ServicesPayload<ExtArgs>, T, 'findUnique', GlobalOmitOptions> | null,
        null,
        ExtArgs,
        GlobalOmitOptions
    >;

    /**
     * Find one Services that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ServicesFindUniqueOrThrowArgs} args - Arguments to find a Services
     * @example
     * // Get one Services
     * const services = await prisma.services.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ServicesFindUniqueOrThrowArgs>(
        args: Prisma.SelectSubset<T, ServicesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma.Prisma__ServicesClient<
        runtime.Types.Result.GetResult<Prisma.$ServicesPayload<ExtArgs>, T, 'findUniqueOrThrow', GlobalOmitOptions>,
        never,
        ExtArgs,
        GlobalOmitOptions
    >;

    /**
     * Find the first Services that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServicesFindFirstArgs} args - Arguments to find a Services
     * @example
     * // Get one Services
     * const services = await prisma.services.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ServicesFindFirstArgs>(
        args?: Prisma.SelectSubset<T, ServicesFindFirstArgs<ExtArgs>>
    ): Prisma.Prisma__ServicesClient<
        runtime.Types.Result.GetResult<Prisma.$ServicesPayload<ExtArgs>, T, 'findFirst', GlobalOmitOptions> | null,
        null,
        ExtArgs,
        GlobalOmitOptions
    >;

    /**
     * Find the first Services that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServicesFindFirstOrThrowArgs} args - Arguments to find a Services
     * @example
     * // Get one Services
     * const services = await prisma.services.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ServicesFindFirstOrThrowArgs>(
        args?: Prisma.SelectSubset<T, ServicesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma.Prisma__ServicesClient<
        runtime.Types.Result.GetResult<Prisma.$ServicesPayload<ExtArgs>, T, 'findFirstOrThrow', GlobalOmitOptions>,
        never,
        ExtArgs,
        GlobalOmitOptions
    >;

    /**
     * Find zero or more Services that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServicesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Services
     * const services = await prisma.services.findMany()
     *
     * // Get first 10 Services
     * const services = await prisma.services.findMany({ take: 10 })
     *
     * // Only select the `id`
     * const servicesWithIdOnly = await prisma.services.findMany({ select: { id: true } })
     *
     */
    findMany<T extends ServicesFindManyArgs>(
        args?: Prisma.SelectSubset<T, ServicesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<
        runtime.Types.Result.GetResult<Prisma.$ServicesPayload<ExtArgs>, T, 'findMany', GlobalOmitOptions>
    >;

    /**
     * Create a Services.
     * @param {ServicesCreateArgs} args - Arguments to create a Services.
     * @example
     * // Create one Services
     * const Services = await prisma.services.create({
     *   data: {
     *     // ... data to create a Services
     *   }
     * })
     *
     */
    create<T extends ServicesCreateArgs>(
        args: Prisma.SelectSubset<T, ServicesCreateArgs<ExtArgs>>
    ): Prisma.Prisma__ServicesClient<
        runtime.Types.Result.GetResult<Prisma.$ServicesPayload<ExtArgs>, T, 'create', GlobalOmitOptions>,
        never,
        ExtArgs,
        GlobalOmitOptions
    >;

    /**
     * Create many Services.
     * @param {ServicesCreateManyArgs} args - Arguments to create many Services.
     * @example
     * // Create many Services
     * const services = await prisma.services.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     */
    createMany<T extends ServicesCreateManyArgs>(
        args?: Prisma.SelectSubset<T, ServicesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<Prisma.BatchPayload>;

    /**
     * Create many Services and returns the data saved in the database.
     * @param {ServicesCreateManyAndReturnArgs} args - Arguments to create many Services.
     * @example
     * // Create many Services
     * const services = await prisma.services.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     * // Create many Services and only return the `id`
     * const servicesWithIdOnly = await prisma.services.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     *
     */
    createManyAndReturn<T extends ServicesCreateManyAndReturnArgs>(
        args?: Prisma.SelectSubset<T, ServicesCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<
        runtime.Types.Result.GetResult<Prisma.$ServicesPayload<ExtArgs>, T, 'createManyAndReturn', GlobalOmitOptions>
    >;

    /**
     * Delete a Services.
     * @param {ServicesDeleteArgs} args - Arguments to delete one Services.
     * @example
     * // Delete one Services
     * const Services = await prisma.services.delete({
     *   where: {
     *     // ... filter to delete one Services
     *   }
     * })
     *
     */
    delete<T extends ServicesDeleteArgs>(
        args: Prisma.SelectSubset<T, ServicesDeleteArgs<ExtArgs>>
    ): Prisma.Prisma__ServicesClient<
        runtime.Types.Result.GetResult<Prisma.$ServicesPayload<ExtArgs>, T, 'delete', GlobalOmitOptions>,
        never,
        ExtArgs,
        GlobalOmitOptions
    >;

    /**
     * Update one Services.
     * @param {ServicesUpdateArgs} args - Arguments to update one Services.
     * @example
     * // Update one Services
     * const services = await prisma.services.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     */
    update<T extends ServicesUpdateArgs>(
        args: Prisma.SelectSubset<T, ServicesUpdateArgs<ExtArgs>>
    ): Prisma.Prisma__ServicesClient<
        runtime.Types.Result.GetResult<Prisma.$ServicesPayload<ExtArgs>, T, 'update', GlobalOmitOptions>,
        never,
        ExtArgs,
        GlobalOmitOptions
    >;

    /**
     * Delete zero or more Services.
     * @param {ServicesDeleteManyArgs} args - Arguments to filter Services to delete.
     * @example
     * // Delete a few Services
     * const { count } = await prisma.services.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     *
     */
    deleteMany<T extends ServicesDeleteManyArgs>(
        args?: Prisma.SelectSubset<T, ServicesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<Prisma.BatchPayload>;

    /**
     * Update zero or more Services.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServicesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Services
     * const services = await prisma.services.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     */
    updateMany<T extends ServicesUpdateManyArgs>(
        args: Prisma.SelectSubset<T, ServicesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<Prisma.BatchPayload>;

    /**
     * Update zero or more Services and returns the data updated in the database.
     * @param {ServicesUpdateManyAndReturnArgs} args - Arguments to update many Services.
     * @example
     * // Update many Services
     * const services = await prisma.services.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     * // Update zero or more Services and only return the `id`
     * const servicesWithIdOnly = await prisma.services.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     *
     */
    updateManyAndReturn<T extends ServicesUpdateManyAndReturnArgs>(
        args: Prisma.SelectSubset<T, ServicesUpdateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<
        runtime.Types.Result.GetResult<Prisma.$ServicesPayload<ExtArgs>, T, 'updateManyAndReturn', GlobalOmitOptions>
    >;

    /**
     * Create or update one Services.
     * @param {ServicesUpsertArgs} args - Arguments to update or create a Services.
     * @example
     * // Update or create a Services
     * const services = await prisma.services.upsert({
     *   create: {
     *     // ... data to create a Services
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Services we want to update
     *   }
     * })
     */
    upsert<T extends ServicesUpsertArgs>(
        args: Prisma.SelectSubset<T, ServicesUpsertArgs<ExtArgs>>
    ): Prisma.Prisma__ServicesClient<
        runtime.Types.Result.GetResult<Prisma.$ServicesPayload<ExtArgs>, T, 'upsert', GlobalOmitOptions>,
        never,
        ExtArgs,
        GlobalOmitOptions
    >;

    /**
     * Count the number of Services.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServicesCountArgs} args - Arguments to filter Services to count.
     * @example
     * // Count the number of Services
     * const count = await prisma.services.count({
     *   where: {
     *     // ... the filter for the Services we want to count
     *   }
     * })
     **/
    count<T extends ServicesCountArgs>(
        args?: Prisma.Subset<T, ServicesCountArgs>
    ): Prisma.PrismaPromise<
        T extends runtime.Types.Utils.Record<'select', any>
            ? T['select'] extends true
                ? number
                : Prisma.GetScalarType<T['select'], ServicesCountAggregateOutputType>
            : number
    >;

    /**
     * Allows you to perform aggregations operations on a Services.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServicesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
     **/
    aggregate<T extends ServicesAggregateArgs>(
        args: Prisma.Subset<T, ServicesAggregateArgs>
    ): Prisma.PrismaPromise<GetServicesAggregateType<T>>;

    /**
     * Group by Services.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServicesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     *
     **/
    groupBy<
        T extends ServicesGroupByArgs,
        HasSelectOrTake extends Prisma.Or<
            Prisma.Extends<'skip', Prisma.Keys<T>>,
            Prisma.Extends<'take', Prisma.Keys<T>>
        >,
        OrderByArg extends Prisma.True extends HasSelectOrTake
            ? { orderBy: ServicesGroupByArgs['orderBy'] }
            : { orderBy?: ServicesGroupByArgs['orderBy'] },
        OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
        ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
        ByValid extends Prisma.Has<ByFields, OrderFields>,
        HavingFields extends Prisma.GetHavingFields<T['having']>,
        HavingValid extends Prisma.Has<ByFields, HavingFields>,
        ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
        InputErrors extends ByEmpty extends Prisma.True
            ? `Error: "by" must not be empty.`
            : HavingValid extends Prisma.False
              ? {
                    [P in HavingFields]: P extends ByFields
                        ? never
                        : P extends string
                          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                          : [Error, 'Field ', P, ` in "having" needs to be provided in "by"`];
                }[HavingFields]
              : 'take' extends Prisma.Keys<T>
                ? 'orderBy' extends Prisma.Keys<T>
                    ? ByValid extends Prisma.True
                        ? {}
                        : {
                              [P in OrderFields]: P extends ByFields
                                  ? never
                                  : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                          }[OrderFields]
                    : 'Error: If you provide "take", you also need to provide "orderBy"'
                : 'skip' extends Prisma.Keys<T>
                  ? 'orderBy' extends Prisma.Keys<T>
                      ? ByValid extends Prisma.True
                          ? {}
                          : {
                                [P in OrderFields]: P extends ByFields
                                    ? never
                                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                            }[OrderFields]
                      : 'Error: If you provide "skip", you also need to provide "orderBy"'
                  : ByValid extends Prisma.True
                    ? {}
                    : {
                          [P in OrderFields]: P extends ByFields
                              ? never
                              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                      }[OrderFields]
    >(
        args: Prisma.SubsetIntersection<T, ServicesGroupByArgs, OrderByArg> & InputErrors
    ): {} extends InputErrors ? GetServicesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>;
    /**
     * Fields of the Services model
     */
    readonly fields: ServicesFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Services.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ServicesClient<
    T,
    Null = never,
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
    GlobalOmitOptions = {}
> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    labtests<T extends Prisma.Services$labtestsArgs<ExtArgs> = {}>(
        args?: Prisma.Subset<T, Prisma.Services$labtestsArgs<ExtArgs>>
    ): Prisma.PrismaPromise<
        runtime.Types.Result.GetResult<Prisma.$LabTestPayload<ExtArgs>, T, 'findMany', GlobalOmitOptions> | Null
    >;
    bills<T extends Prisma.Services$billsArgs<ExtArgs> = {}>(
        args?: Prisma.Subset<T, Prisma.Services$billsArgs<ExtArgs>>
    ): Prisma.PrismaPromise<
        runtime.Types.Result.GetResult<Prisma.$PatientBillsPayload<ExtArgs>, T, 'findMany', GlobalOmitOptions> | Null
    >;
    appointments<T extends Prisma.Services$appointmentsArgs<ExtArgs> = {}>(
        args?: Prisma.Subset<T, Prisma.Services$appointmentsArgs<ExtArgs>>
    ): Prisma.PrismaPromise<
        runtime.Types.Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, 'findMany', GlobalOmitOptions> | Null
    >;
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(
        onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null,
        onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null
    ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(
        onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null
    ): runtime.Types.Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the Services model
 */
export interface ServicesFieldRefs {
    readonly id: Prisma.FieldRef<'Services', 'Int'>;
    readonly serviceName: Prisma.FieldRef<'Services', 'String'>;
    readonly description: Prisma.FieldRef<'Services', 'String'>;
    readonly price: Prisma.FieldRef<'Services', 'Float'>;
    readonly category: Prisma.FieldRef<'Services', 'ServiceCategory'>;
    readonly duration: Prisma.FieldRef<'Services', 'Int'>;
    readonly isAvailable: Prisma.FieldRef<'Services', 'Boolean'>;
    readonly createdAt: Prisma.FieldRef<'Services', 'DateTime'>;
    readonly updatedAt: Prisma.FieldRef<'Services', 'DateTime'>;
}

// Custom InputTypes
/**
 * Services findUnique
 */
export type ServicesFindUniqueArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the Services
     */
    select?: Prisma.ServicesSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Services
     */
    omit?: Prisma.ServicesOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.ServicesInclude<ExtArgs> | null;
    /**
     * Filter, which Services to fetch.
     */
    where: Prisma.ServicesWhereUniqueInput;
};

/**
 * Services findUniqueOrThrow
 */
export type ServicesFindUniqueOrThrowArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the Services
     */
    select?: Prisma.ServicesSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Services
     */
    omit?: Prisma.ServicesOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.ServicesInclude<ExtArgs> | null;
    /**
     * Filter, which Services to fetch.
     */
    where: Prisma.ServicesWhereUniqueInput;
};

/**
 * Services findFirst
 */
export type ServicesFindFirstArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the Services
     */
    select?: Prisma.ServicesSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Services
     */
    omit?: Prisma.ServicesOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.ServicesInclude<ExtArgs> | null;
    /**
     * Filter, which Services to fetch.
     */
    where?: Prisma.ServicesWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Services to fetch.
     */
    orderBy?: Prisma.ServicesOrderByWithRelationInput | Prisma.ServicesOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for Services.
     */
    cursor?: Prisma.ServicesWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `Â±n` Services from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Services.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of Services.
     */
    distinct?: Prisma.ServicesScalarFieldEnum | Prisma.ServicesScalarFieldEnum[];
};

/**
 * Services findFirstOrThrow
 */
export type ServicesFindFirstOrThrowArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the Services
     */
    select?: Prisma.ServicesSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Services
     */
    omit?: Prisma.ServicesOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.ServicesInclude<ExtArgs> | null;
    /**
     * Filter, which Services to fetch.
     */
    where?: Prisma.ServicesWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Services to fetch.
     */
    orderBy?: Prisma.ServicesOrderByWithRelationInput | Prisma.ServicesOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for Services.
     */
    cursor?: Prisma.ServicesWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `Â±n` Services from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Services.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of Services.
     */
    distinct?: Prisma.ServicesScalarFieldEnum | Prisma.ServicesScalarFieldEnum[];
};

/**
 * Services findMany
 */
export type ServicesFindManyArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the Services
     */
    select?: Prisma.ServicesSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Services
     */
    omit?: Prisma.ServicesOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.ServicesInclude<ExtArgs> | null;
    /**
     * Filter, which Services to fetch.
     */
    where?: Prisma.ServicesWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Services to fetch.
     */
    orderBy?: Prisma.ServicesOrderByWithRelationInput | Prisma.ServicesOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for listing Services.
     */
    cursor?: Prisma.ServicesWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `Â±n` Services from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Services.
     */
    skip?: number;
    distinct?: Prisma.ServicesScalarFieldEnum | Prisma.ServicesScalarFieldEnum[];
};

/**
 * Services create
 */
export type ServicesCreateArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the Services
     */
    select?: Prisma.ServicesSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Services
     */
    omit?: Prisma.ServicesOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.ServicesInclude<ExtArgs> | null;
    /**
     * The data needed to create a Services.
     */
    data: Prisma.XOR<Prisma.ServicesCreateInput, Prisma.ServicesUncheckedCreateInput>;
};

/**
 * Services createMany
 */
export type ServicesCreateManyArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * The data used to create many Services.
     */
    data: Prisma.ServicesCreateManyInput | Prisma.ServicesCreateManyInput[];
    skipDuplicates?: boolean;
};

/**
 * Services createManyAndReturn
 */
export type ServicesCreateManyAndReturnArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the Services
     */
    select?: Prisma.ServicesSelectCreateManyAndReturn<ExtArgs> | null;
    /**
     * Omit specific fields from the Services
     */
    omit?: Prisma.ServicesOmit<ExtArgs> | null;
    /**
     * The data used to create many Services.
     */
    data: Prisma.ServicesCreateManyInput | Prisma.ServicesCreateManyInput[];
    skipDuplicates?: boolean;
};

/**
 * Services update
 */
export type ServicesUpdateArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the Services
     */
    select?: Prisma.ServicesSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Services
     */
    omit?: Prisma.ServicesOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.ServicesInclude<ExtArgs> | null;
    /**
     * The data needed to update a Services.
     */
    data: Prisma.XOR<Prisma.ServicesUpdateInput, Prisma.ServicesUncheckedUpdateInput>;
    /**
     * Choose, which Services to update.
     */
    where: Prisma.ServicesWhereUniqueInput;
};

/**
 * Services updateMany
 */
export type ServicesUpdateManyArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * The data used to update Services.
     */
    data: Prisma.XOR<Prisma.ServicesUpdateManyMutationInput, Prisma.ServicesUncheckedUpdateManyInput>;
    /**
     * Filter which Services to update
     */
    where?: Prisma.ServicesWhereInput;
    /**
     * Limit how many Services to update.
     */
    limit?: number;
};

/**
 * Services updateManyAndReturn
 */
export type ServicesUpdateManyAndReturnArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the Services
     */
    select?: Prisma.ServicesSelectUpdateManyAndReturn<ExtArgs> | null;
    /**
     * Omit specific fields from the Services
     */
    omit?: Prisma.ServicesOmit<ExtArgs> | null;
    /**
     * The data used to update Services.
     */
    data: Prisma.XOR<Prisma.ServicesUpdateManyMutationInput, Prisma.ServicesUncheckedUpdateManyInput>;
    /**
     * Filter which Services to update
     */
    where?: Prisma.ServicesWhereInput;
    /**
     * Limit how many Services to update.
     */
    limit?: number;
};

/**
 * Services upsert
 */
export type ServicesUpsertArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the Services
     */
    select?: Prisma.ServicesSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Services
     */
    omit?: Prisma.ServicesOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.ServicesInclude<ExtArgs> | null;
    /**
     * The filter to search for the Services to update in case it exists.
     */
    where: Prisma.ServicesWhereUniqueInput;
    /**
     * In case the Services found by the `where` argument doesn't exist, create a new Services with this data.
     */
    create: Prisma.XOR<Prisma.ServicesCreateInput, Prisma.ServicesUncheckedCreateInput>;
    /**
     * In case the Services was found with the provided `where` argument, update it with this data.
     */
    update: Prisma.XOR<Prisma.ServicesUpdateInput, Prisma.ServicesUncheckedUpdateInput>;
};

/**
 * Services delete
 */
export type ServicesDeleteArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the Services
     */
    select?: Prisma.ServicesSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Services
     */
    omit?: Prisma.ServicesOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.ServicesInclude<ExtArgs> | null;
    /**
     * Filter which Services to delete.
     */
    where: Prisma.ServicesWhereUniqueInput;
};

/**
 * Services deleteMany
 */
export type ServicesDeleteManyArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Filter which Services to delete
     */
    where?: Prisma.ServicesWhereInput;
    /**
     * Limit how many Services to delete.
     */
    limit?: number;
};

/**
 * Services.labtests
 */
export type Services$labtestsArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the LabTest
     */
    select?: Prisma.LabTestSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the LabTest
     */
    omit?: Prisma.LabTestOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.LabTestInclude<ExtArgs> | null;
    where?: Prisma.LabTestWhereInput;
    orderBy?: Prisma.LabTestOrderByWithRelationInput | Prisma.LabTestOrderByWithRelationInput[];
    cursor?: Prisma.LabTestWhereUniqueInput;
    take?: number;
    skip?: number;
    distinct?: Prisma.LabTestScalarFieldEnum | Prisma.LabTestScalarFieldEnum[];
};

/**
 * Services.bills
 */
export type Services$billsArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the PatientBills
     */
    select?: Prisma.PatientBillsSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the PatientBills
     */
    omit?: Prisma.PatientBillsOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.PatientBillsInclude<ExtArgs> | null;
    where?: Prisma.PatientBillsWhereInput;
    orderBy?: Prisma.PatientBillsOrderByWithRelationInput | Prisma.PatientBillsOrderByWithRelationInput[];
    cursor?: Prisma.PatientBillsWhereUniqueInput;
    take?: number;
    skip?: number;
    distinct?: Prisma.PatientBillsScalarFieldEnum | Prisma.PatientBillsScalarFieldEnum[];
};

/**
 * Services.appointments
 */
export type Services$appointmentsArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: Prisma.AppointmentSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Appointment
     */
    omit?: Prisma.AppointmentOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.AppointmentInclude<ExtArgs> | null;
    where?: Prisma.AppointmentWhereInput;
    orderBy?: Prisma.AppointmentOrderByWithRelationInput | Prisma.AppointmentOrderByWithRelationInput[];
    cursor?: Prisma.AppointmentWhereUniqueInput;
    take?: number;
    skip?: number;
    distinct?: Prisma.AppointmentScalarFieldEnum | Prisma.AppointmentScalarFieldEnum[];
};

/**
 * Services without action
 */
export type ServicesDefaultArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the Services
     */
    select?: Prisma.ServicesSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Services
     */
    omit?: Prisma.ServicesOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.ServicesInclude<ExtArgs> | null;
};
