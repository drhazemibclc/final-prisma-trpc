/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/**
 * This file exports the `Appointment` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from '@prisma/client/runtime/library';
import type * as $Enums from '../enums';
import type * as Prisma from '../internal/prismaNamespace';

/**
 * Model Appointment
 *
 */
export type AppointmentModel = runtime.Types.Result.DefaultSelection<Prisma.$AppointmentPayload>;

export type AggregateAppointment = {
    _count: AppointmentCountAggregateOutputType | null;
    _avg: AppointmentAvgAggregateOutputType | null;
    _sum: AppointmentSumAggregateOutputType | null;
    _min: AppointmentMinAggregateOutputType | null;
    _max: AppointmentMaxAggregateOutputType | null;
};

export type AppointmentAvgAggregateOutputType = {
    id: number | null;
    serviceId: number | null;
};

export type AppointmentSumAggregateOutputType = {
    id: number | null;
    serviceId: number | null;
};

export type AppointmentMinAggregateOutputType = {
    id: number | null;
    patientId: string | null;
    doctorId: string | null;
    serviceId: number | null;
    appointmentDate: Date | null;
    time: string | null;
    status: $Enums.AppointmentStatus | null;
    type: string | null;
    note: string | null;
    reason: string | null;
    createdAt: Date | null;
    updatedAt: Date | null;
};

export type AppointmentMaxAggregateOutputType = {
    id: number | null;
    patientId: string | null;
    doctorId: string | null;
    serviceId: number | null;
    appointmentDate: Date | null;
    time: string | null;
    status: $Enums.AppointmentStatus | null;
    type: string | null;
    note: string | null;
    reason: string | null;
    createdAt: Date | null;
    updatedAt: Date | null;
};

export type AppointmentCountAggregateOutputType = {
    id: number;
    patientId: number;
    doctorId: number;
    serviceId: number;
    appointmentDate: number;
    time: number;
    status: number;
    type: number;
    note: number;
    reason: number;
    createdAt: number;
    updatedAt: number;
    _all: number;
};

export type AppointmentAvgAggregateInputType = {
    id?: true;
    serviceId?: true;
};

export type AppointmentSumAggregateInputType = {
    id?: true;
    serviceId?: true;
};

export type AppointmentMinAggregateInputType = {
    id?: true;
    patientId?: true;
    doctorId?: true;
    serviceId?: true;
    appointmentDate?: true;
    time?: true;
    status?: true;
    type?: true;
    note?: true;
    reason?: true;
    createdAt?: true;
    updatedAt?: true;
};

export type AppointmentMaxAggregateInputType = {
    id?: true;
    patientId?: true;
    doctorId?: true;
    serviceId?: true;
    appointmentDate?: true;
    time?: true;
    status?: true;
    type?: true;
    note?: true;
    reason?: true;
    createdAt?: true;
    updatedAt?: true;
};

export type AppointmentCountAggregateInputType = {
    id?: true;
    patientId?: true;
    doctorId?: true;
    serviceId?: true;
    appointmentDate?: true;
    time?: true;
    status?: true;
    type?: true;
    note?: true;
    reason?: true;
    createdAt?: true;
    updatedAt?: true;
    _all?: true;
};

export type AppointmentAggregateArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Filter which Appointment to aggregate.
     */
    where?: Prisma.AppointmentWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Appointments to fetch.
     */
    orderBy?: Prisma.AppointmentOrderByWithRelationInput | Prisma.AppointmentOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the start position
     */
    cursor?: Prisma.AppointmentWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `Â±n` Appointments from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Appointments.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Count returned Appointments
     **/
    _count?: true | AppointmentCountAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to average
     **/
    _avg?: AppointmentAvgAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to sum
     **/
    _sum?: AppointmentSumAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the minimum value
     **/
    _min?: AppointmentMinAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the maximum value
     **/
    _max?: AppointmentMaxAggregateInputType;
};

export type GetAppointmentAggregateType<T extends AppointmentAggregateArgs> = {
    [P in keyof T & keyof AggregateAppointment]: P extends '_count' | 'count'
        ? T[P] extends true
            ? number
            : Prisma.GetScalarType<T[P], AggregateAppointment[P]>
        : Prisma.GetScalarType<T[P], AggregateAppointment[P]>;
};

export type AppointmentGroupByArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    where?: Prisma.AppointmentWhereInput;
    orderBy?: Prisma.AppointmentOrderByWithAggregationInput | Prisma.AppointmentOrderByWithAggregationInput[];
    by: Prisma.AppointmentScalarFieldEnum[] | Prisma.AppointmentScalarFieldEnum;
    having?: Prisma.AppointmentScalarWhereWithAggregatesInput;
    take?: number;
    skip?: number;
    _count?: AppointmentCountAggregateInputType | true;
    _avg?: AppointmentAvgAggregateInputType;
    _sum?: AppointmentSumAggregateInputType;
    _min?: AppointmentMinAggregateInputType;
    _max?: AppointmentMaxAggregateInputType;
};

export type AppointmentGroupByOutputType = {
    id: number;
    patientId: string;
    doctorId: string;
    serviceId: number | null;
    appointmentDate: Date;
    time: string;
    status: $Enums.AppointmentStatus | null;
    type: string;
    note: string | null;
    reason: string | null;
    createdAt: Date;
    updatedAt: Date;
    _count: AppointmentCountAggregateOutputType | null;
    _avg: AppointmentAvgAggregateOutputType | null;
    _sum: AppointmentSumAggregateOutputType | null;
    _min: AppointmentMinAggregateOutputType | null;
    _max: AppointmentMaxAggregateOutputType | null;
};

type GetAppointmentGroupByPayload<T extends AppointmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
        Prisma.PickEnumerable<AppointmentGroupByOutputType, T['by']> & {
            [P in keyof T & keyof AppointmentGroupByOutputType]: P extends '_count'
                ? T[P] extends boolean
                    ? number
                    : Prisma.GetScalarType<T[P], AppointmentGroupByOutputType[P]>
                : Prisma.GetScalarType<T[P], AppointmentGroupByOutputType[P]>;
        }
    >
>;

export type AppointmentWhereInput = {
    AND?: Prisma.AppointmentWhereInput | Prisma.AppointmentWhereInput[];
    OR?: Prisma.AppointmentWhereInput[];
    NOT?: Prisma.AppointmentWhereInput | Prisma.AppointmentWhereInput[];
    id?: Prisma.IntFilter<'Appointment'> | number;
    patientId?: Prisma.StringFilter<'Appointment'> | string;
    doctorId?: Prisma.StringFilter<'Appointment'> | string;
    serviceId?: Prisma.IntNullableFilter<'Appointment'> | number | null;
    appointmentDate?: Prisma.DateTimeFilter<'Appointment'> | Date | string;
    time?: Prisma.StringFilter<'Appointment'> | string;
    status?: Prisma.EnumAppointmentStatusNullableFilter<'Appointment'> | $Enums.AppointmentStatus | null;
    type?: Prisma.StringFilter<'Appointment'> | string;
    note?: Prisma.StringNullableFilter<'Appointment'> | string | null;
    reason?: Prisma.StringNullableFilter<'Appointment'> | string | null;
    createdAt?: Prisma.DateTimeFilter<'Appointment'> | Date | string;
    updatedAt?: Prisma.DateTimeFilter<'Appointment'> | Date | string;
    patient?: Prisma.XOR<Prisma.PatientScalarRelationFilter, Prisma.PatientWhereInput>;
    doctor?: Prisma.XOR<Prisma.DoctorScalarRelationFilter, Prisma.DoctorWhereInput>;
    service?: Prisma.XOR<Prisma.ServicesNullableScalarRelationFilter, Prisma.ServicesWhereInput> | null;
    bills?: Prisma.PaymentListRelationFilter;
    medical?: Prisma.MedicalRecordsListRelationFilter;
};

export type AppointmentOrderByWithRelationInput = {
    id?: Prisma.SortOrder;
    patientId?: Prisma.SortOrder;
    doctorId?: Prisma.SortOrder;
    serviceId?: Prisma.SortOrderInput | Prisma.SortOrder;
    appointmentDate?: Prisma.SortOrder;
    time?: Prisma.SortOrder;
    status?: Prisma.SortOrderInput | Prisma.SortOrder;
    type?: Prisma.SortOrder;
    note?: Prisma.SortOrderInput | Prisma.SortOrder;
    reason?: Prisma.SortOrderInput | Prisma.SortOrder;
    createdAt?: Prisma.SortOrder;
    updatedAt?: Prisma.SortOrder;
    patient?: Prisma.PatientOrderByWithRelationInput;
    doctor?: Prisma.DoctorOrderByWithRelationInput;
    service?: Prisma.ServicesOrderByWithRelationInput;
    bills?: Prisma.PaymentOrderByRelationAggregateInput;
    medical?: Prisma.MedicalRecordsOrderByRelationAggregateInput;
};

export type AppointmentWhereUniqueInput = Prisma.AtLeast<
    {
        id?: number;
        AND?: Prisma.AppointmentWhereInput | Prisma.AppointmentWhereInput[];
        OR?: Prisma.AppointmentWhereInput[];
        NOT?: Prisma.AppointmentWhereInput | Prisma.AppointmentWhereInput[];
        patientId?: Prisma.StringFilter<'Appointment'> | string;
        doctorId?: Prisma.StringFilter<'Appointment'> | string;
        serviceId?: Prisma.IntNullableFilter<'Appointment'> | number | null;
        appointmentDate?: Prisma.DateTimeFilter<'Appointment'> | Date | string;
        time?: Prisma.StringFilter<'Appointment'> | string;
        status?: Prisma.EnumAppointmentStatusNullableFilter<'Appointment'> | $Enums.AppointmentStatus | null;
        type?: Prisma.StringFilter<'Appointment'> | string;
        note?: Prisma.StringNullableFilter<'Appointment'> | string | null;
        reason?: Prisma.StringNullableFilter<'Appointment'> | string | null;
        createdAt?: Prisma.DateTimeFilter<'Appointment'> | Date | string;
        updatedAt?: Prisma.DateTimeFilter<'Appointment'> | Date | string;
        patient?: Prisma.XOR<Prisma.PatientScalarRelationFilter, Prisma.PatientWhereInput>;
        doctor?: Prisma.XOR<Prisma.DoctorScalarRelationFilter, Prisma.DoctorWhereInput>;
        service?: Prisma.XOR<Prisma.ServicesNullableScalarRelationFilter, Prisma.ServicesWhereInput> | null;
        bills?: Prisma.PaymentListRelationFilter;
        medical?: Prisma.MedicalRecordsListRelationFilter;
    },
    'id'
>;

export type AppointmentOrderByWithAggregationInput = {
    id?: Prisma.SortOrder;
    patientId?: Prisma.SortOrder;
    doctorId?: Prisma.SortOrder;
    serviceId?: Prisma.SortOrderInput | Prisma.SortOrder;
    appointmentDate?: Prisma.SortOrder;
    time?: Prisma.SortOrder;
    status?: Prisma.SortOrderInput | Prisma.SortOrder;
    type?: Prisma.SortOrder;
    note?: Prisma.SortOrderInput | Prisma.SortOrder;
    reason?: Prisma.SortOrderInput | Prisma.SortOrder;
    createdAt?: Prisma.SortOrder;
    updatedAt?: Prisma.SortOrder;
    _count?: Prisma.AppointmentCountOrderByAggregateInput;
    _avg?: Prisma.AppointmentAvgOrderByAggregateInput;
    _max?: Prisma.AppointmentMaxOrderByAggregateInput;
    _min?: Prisma.AppointmentMinOrderByAggregateInput;
    _sum?: Prisma.AppointmentSumOrderByAggregateInput;
};

export type AppointmentScalarWhereWithAggregatesInput = {
    AND?: Prisma.AppointmentScalarWhereWithAggregatesInput | Prisma.AppointmentScalarWhereWithAggregatesInput[];
    OR?: Prisma.AppointmentScalarWhereWithAggregatesInput[];
    NOT?: Prisma.AppointmentScalarWhereWithAggregatesInput | Prisma.AppointmentScalarWhereWithAggregatesInput[];
    id?: Prisma.IntWithAggregatesFilter<'Appointment'> | number;
    patientId?: Prisma.StringWithAggregatesFilter<'Appointment'> | string;
    doctorId?: Prisma.StringWithAggregatesFilter<'Appointment'> | string;
    serviceId?: Prisma.IntNullableWithAggregatesFilter<'Appointment'> | number | null;
    appointmentDate?: Prisma.DateTimeWithAggregatesFilter<'Appointment'> | Date | string;
    time?: Prisma.StringWithAggregatesFilter<'Appointment'> | string;
    status?: Prisma.EnumAppointmentStatusNullableWithAggregatesFilter<'Appointment'> | $Enums.AppointmentStatus | null;
    type?: Prisma.StringWithAggregatesFilter<'Appointment'> | string;
    note?: Prisma.StringNullableWithAggregatesFilter<'Appointment'> | string | null;
    reason?: Prisma.StringNullableWithAggregatesFilter<'Appointment'> | string | null;
    createdAt?: Prisma.DateTimeWithAggregatesFilter<'Appointment'> | Date | string;
    updatedAt?: Prisma.DateTimeWithAggregatesFilter<'Appointment'> | Date | string;
};

export type AppointmentCreateInput = {
    appointmentDate: Date | string;
    time: string;
    status?: $Enums.AppointmentStatus | null;
    type: string;
    note?: string | null;
    reason?: string | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    patient: Prisma.PatientCreateNestedOneWithoutAppointmentsInput;
    doctor: Prisma.DoctorCreateNestedOneWithoutAppointmentsInput;
    service?: Prisma.ServicesCreateNestedOneWithoutAppointmentsInput;
    bills?: Prisma.PaymentCreateNestedManyWithoutAppointmentInput;
    medical?: Prisma.MedicalRecordsCreateNestedManyWithoutAppointmentInput;
};

export type AppointmentUncheckedCreateInput = {
    id?: number;
    patientId: string;
    doctorId: string;
    serviceId?: number | null;
    appointmentDate: Date | string;
    time: string;
    status?: $Enums.AppointmentStatus | null;
    type: string;
    note?: string | null;
    reason?: string | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    bills?: Prisma.PaymentUncheckedCreateNestedManyWithoutAppointmentInput;
    medical?: Prisma.MedicalRecordsUncheckedCreateNestedManyWithoutAppointmentInput;
};

export type AppointmentUpdateInput = {
    appointmentDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    time?: Prisma.StringFieldUpdateOperationsInput | string;
    status?: Prisma.NullableEnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus | null;
    type?: Prisma.StringFieldUpdateOperationsInput | string;
    note?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    reason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    patient?: Prisma.PatientUpdateOneRequiredWithoutAppointmentsNestedInput;
    doctor?: Prisma.DoctorUpdateOneRequiredWithoutAppointmentsNestedInput;
    service?: Prisma.ServicesUpdateOneWithoutAppointmentsNestedInput;
    bills?: Prisma.PaymentUpdateManyWithoutAppointmentNestedInput;
    medical?: Prisma.MedicalRecordsUpdateManyWithoutAppointmentNestedInput;
};

export type AppointmentUncheckedUpdateInput = {
    id?: Prisma.IntFieldUpdateOperationsInput | number;
    patientId?: Prisma.StringFieldUpdateOperationsInput | string;
    doctorId?: Prisma.StringFieldUpdateOperationsInput | string;
    serviceId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
    appointmentDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    time?: Prisma.StringFieldUpdateOperationsInput | string;
    status?: Prisma.NullableEnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus | null;
    type?: Prisma.StringFieldUpdateOperationsInput | string;
    note?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    reason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    bills?: Prisma.PaymentUncheckedUpdateManyWithoutAppointmentNestedInput;
    medical?: Prisma.MedicalRecordsUncheckedUpdateManyWithoutAppointmentNestedInput;
};

export type AppointmentCreateManyInput = {
    id?: number;
    patientId: string;
    doctorId: string;
    serviceId?: number | null;
    appointmentDate: Date | string;
    time: string;
    status?: $Enums.AppointmentStatus | null;
    type: string;
    note?: string | null;
    reason?: string | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
};

export type AppointmentUpdateManyMutationInput = {
    appointmentDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    time?: Prisma.StringFieldUpdateOperationsInput | string;
    status?: Prisma.NullableEnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus | null;
    type?: Prisma.StringFieldUpdateOperationsInput | string;
    note?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    reason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type AppointmentUncheckedUpdateManyInput = {
    id?: Prisma.IntFieldUpdateOperationsInput | number;
    patientId?: Prisma.StringFieldUpdateOperationsInput | string;
    doctorId?: Prisma.StringFieldUpdateOperationsInput | string;
    serviceId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
    appointmentDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    time?: Prisma.StringFieldUpdateOperationsInput | string;
    status?: Prisma.NullableEnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus | null;
    type?: Prisma.StringFieldUpdateOperationsInput | string;
    note?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    reason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type AppointmentListRelationFilter = {
    every?: Prisma.AppointmentWhereInput;
    some?: Prisma.AppointmentWhereInput;
    none?: Prisma.AppointmentWhereInput;
};

export type AppointmentOrderByRelationAggregateInput = {
    _count?: Prisma.SortOrder;
};

export type AppointmentCountOrderByAggregateInput = {
    id?: Prisma.SortOrder;
    patientId?: Prisma.SortOrder;
    doctorId?: Prisma.SortOrder;
    serviceId?: Prisma.SortOrder;
    appointmentDate?: Prisma.SortOrder;
    time?: Prisma.SortOrder;
    status?: Prisma.SortOrder;
    type?: Prisma.SortOrder;
    note?: Prisma.SortOrder;
    reason?: Prisma.SortOrder;
    createdAt?: Prisma.SortOrder;
    updatedAt?: Prisma.SortOrder;
};

export type AppointmentAvgOrderByAggregateInput = {
    id?: Prisma.SortOrder;
    serviceId?: Prisma.SortOrder;
};

export type AppointmentMaxOrderByAggregateInput = {
    id?: Prisma.SortOrder;
    patientId?: Prisma.SortOrder;
    doctorId?: Prisma.SortOrder;
    serviceId?: Prisma.SortOrder;
    appointmentDate?: Prisma.SortOrder;
    time?: Prisma.SortOrder;
    status?: Prisma.SortOrder;
    type?: Prisma.SortOrder;
    note?: Prisma.SortOrder;
    reason?: Prisma.SortOrder;
    createdAt?: Prisma.SortOrder;
    updatedAt?: Prisma.SortOrder;
};

export type AppointmentMinOrderByAggregateInput = {
    id?: Prisma.SortOrder;
    patientId?: Prisma.SortOrder;
    doctorId?: Prisma.SortOrder;
    serviceId?: Prisma.SortOrder;
    appointmentDate?: Prisma.SortOrder;
    time?: Prisma.SortOrder;
    status?: Prisma.SortOrder;
    type?: Prisma.SortOrder;
    note?: Prisma.SortOrder;
    reason?: Prisma.SortOrder;
    createdAt?: Prisma.SortOrder;
    updatedAt?: Prisma.SortOrder;
};

export type AppointmentSumOrderByAggregateInput = {
    id?: Prisma.SortOrder;
    serviceId?: Prisma.SortOrder;
};

export type AppointmentScalarRelationFilter = {
    is?: Prisma.AppointmentWhereInput;
    isNot?: Prisma.AppointmentWhereInput;
};

export type AppointmentCreateNestedManyWithoutPatientInput = {
    create?:
        | Prisma.XOR<Prisma.AppointmentCreateWithoutPatientInput, Prisma.AppointmentUncheckedCreateWithoutPatientInput>
        | Prisma.AppointmentCreateWithoutPatientInput[]
        | Prisma.AppointmentUncheckedCreateWithoutPatientInput[];
    connectOrCreate?:
        | Prisma.AppointmentCreateOrConnectWithoutPatientInput
        | Prisma.AppointmentCreateOrConnectWithoutPatientInput[];
    createMany?: Prisma.AppointmentCreateManyPatientInputEnvelope;
    connect?: Prisma.AppointmentWhereUniqueInput | Prisma.AppointmentWhereUniqueInput[];
};

export type AppointmentUncheckedCreateNestedManyWithoutPatientInput = {
    create?:
        | Prisma.XOR<Prisma.AppointmentCreateWithoutPatientInput, Prisma.AppointmentUncheckedCreateWithoutPatientInput>
        | Prisma.AppointmentCreateWithoutPatientInput[]
        | Prisma.AppointmentUncheckedCreateWithoutPatientInput[];
    connectOrCreate?:
        | Prisma.AppointmentCreateOrConnectWithoutPatientInput
        | Prisma.AppointmentCreateOrConnectWithoutPatientInput[];
    createMany?: Prisma.AppointmentCreateManyPatientInputEnvelope;
    connect?: Prisma.AppointmentWhereUniqueInput | Prisma.AppointmentWhereUniqueInput[];
};

export type AppointmentUpdateManyWithoutPatientNestedInput = {
    create?:
        | Prisma.XOR<Prisma.AppointmentCreateWithoutPatientInput, Prisma.AppointmentUncheckedCreateWithoutPatientInput>
        | Prisma.AppointmentCreateWithoutPatientInput[]
        | Prisma.AppointmentUncheckedCreateWithoutPatientInput[];
    connectOrCreate?:
        | Prisma.AppointmentCreateOrConnectWithoutPatientInput
        | Prisma.AppointmentCreateOrConnectWithoutPatientInput[];
    upsert?:
        | Prisma.AppointmentUpsertWithWhereUniqueWithoutPatientInput
        | Prisma.AppointmentUpsertWithWhereUniqueWithoutPatientInput[];
    createMany?: Prisma.AppointmentCreateManyPatientInputEnvelope;
    set?: Prisma.AppointmentWhereUniqueInput | Prisma.AppointmentWhereUniqueInput[];
    disconnect?: Prisma.AppointmentWhereUniqueInput | Prisma.AppointmentWhereUniqueInput[];
    delete?: Prisma.AppointmentWhereUniqueInput | Prisma.AppointmentWhereUniqueInput[];
    connect?: Prisma.AppointmentWhereUniqueInput | Prisma.AppointmentWhereUniqueInput[];
    update?:
        | Prisma.AppointmentUpdateWithWhereUniqueWithoutPatientInput
        | Prisma.AppointmentUpdateWithWhereUniqueWithoutPatientInput[];
    updateMany?:
        | Prisma.AppointmentUpdateManyWithWhereWithoutPatientInput
        | Prisma.AppointmentUpdateManyWithWhereWithoutPatientInput[];
    deleteMany?: Prisma.AppointmentScalarWhereInput | Prisma.AppointmentScalarWhereInput[];
};

export type AppointmentUncheckedUpdateManyWithoutPatientNestedInput = {
    create?:
        | Prisma.XOR<Prisma.AppointmentCreateWithoutPatientInput, Prisma.AppointmentUncheckedCreateWithoutPatientInput>
        | Prisma.AppointmentCreateWithoutPatientInput[]
        | Prisma.AppointmentUncheckedCreateWithoutPatientInput[];
    connectOrCreate?:
        | Prisma.AppointmentCreateOrConnectWithoutPatientInput
        | Prisma.AppointmentCreateOrConnectWithoutPatientInput[];
    upsert?:
        | Prisma.AppointmentUpsertWithWhereUniqueWithoutPatientInput
        | Prisma.AppointmentUpsertWithWhereUniqueWithoutPatientInput[];
    createMany?: Prisma.AppointmentCreateManyPatientInputEnvelope;
    set?: Prisma.AppointmentWhereUniqueInput | Prisma.AppointmentWhereUniqueInput[];
    disconnect?: Prisma.AppointmentWhereUniqueInput | Prisma.AppointmentWhereUniqueInput[];
    delete?: Prisma.AppointmentWhereUniqueInput | Prisma.AppointmentWhereUniqueInput[];
    connect?: Prisma.AppointmentWhereUniqueInput | Prisma.AppointmentWhereUniqueInput[];
    update?:
        | Prisma.AppointmentUpdateWithWhereUniqueWithoutPatientInput
        | Prisma.AppointmentUpdateWithWhereUniqueWithoutPatientInput[];
    updateMany?:
        | Prisma.AppointmentUpdateManyWithWhereWithoutPatientInput
        | Prisma.AppointmentUpdateManyWithWhereWithoutPatientInput[];
    deleteMany?: Prisma.AppointmentScalarWhereInput | Prisma.AppointmentScalarWhereInput[];
};

export type AppointmentCreateNestedManyWithoutDoctorInput = {
    create?:
        | Prisma.XOR<Prisma.AppointmentCreateWithoutDoctorInput, Prisma.AppointmentUncheckedCreateWithoutDoctorInput>
        | Prisma.AppointmentCreateWithoutDoctorInput[]
        | Prisma.AppointmentUncheckedCreateWithoutDoctorInput[];
    connectOrCreate?:
        | Prisma.AppointmentCreateOrConnectWithoutDoctorInput
        | Prisma.AppointmentCreateOrConnectWithoutDoctorInput[];
    createMany?: Prisma.AppointmentCreateManyDoctorInputEnvelope;
    connect?: Prisma.AppointmentWhereUniqueInput | Prisma.AppointmentWhereUniqueInput[];
};

export type AppointmentUncheckedCreateNestedManyWithoutDoctorInput = {
    create?:
        | Prisma.XOR<Prisma.AppointmentCreateWithoutDoctorInput, Prisma.AppointmentUncheckedCreateWithoutDoctorInput>
        | Prisma.AppointmentCreateWithoutDoctorInput[]
        | Prisma.AppointmentUncheckedCreateWithoutDoctorInput[];
    connectOrCreate?:
        | Prisma.AppointmentCreateOrConnectWithoutDoctorInput
        | Prisma.AppointmentCreateOrConnectWithoutDoctorInput[];
    createMany?: Prisma.AppointmentCreateManyDoctorInputEnvelope;
    connect?: Prisma.AppointmentWhereUniqueInput | Prisma.AppointmentWhereUniqueInput[];
};

export type AppointmentUpdateManyWithoutDoctorNestedInput = {
    create?:
        | Prisma.XOR<Prisma.AppointmentCreateWithoutDoctorInput, Prisma.AppointmentUncheckedCreateWithoutDoctorInput>
        | Prisma.AppointmentCreateWithoutDoctorInput[]
        | Prisma.AppointmentUncheckedCreateWithoutDoctorInput[];
    connectOrCreate?:
        | Prisma.AppointmentCreateOrConnectWithoutDoctorInput
        | Prisma.AppointmentCreateOrConnectWithoutDoctorInput[];
    upsert?:
        | Prisma.AppointmentUpsertWithWhereUniqueWithoutDoctorInput
        | Prisma.AppointmentUpsertWithWhereUniqueWithoutDoctorInput[];
    createMany?: Prisma.AppointmentCreateManyDoctorInputEnvelope;
    set?: Prisma.AppointmentWhereUniqueInput | Prisma.AppointmentWhereUniqueInput[];
    disconnect?: Prisma.AppointmentWhereUniqueInput | Prisma.AppointmentWhereUniqueInput[];
    delete?: Prisma.AppointmentWhereUniqueInput | Prisma.AppointmentWhereUniqueInput[];
    connect?: Prisma.AppointmentWhereUniqueInput | Prisma.AppointmentWhereUniqueInput[];
    update?:
        | Prisma.AppointmentUpdateWithWhereUniqueWithoutDoctorInput
        | Prisma.AppointmentUpdateWithWhereUniqueWithoutDoctorInput[];
    updateMany?:
        | Prisma.AppointmentUpdateManyWithWhereWithoutDoctorInput
        | Prisma.AppointmentUpdateManyWithWhereWithoutDoctorInput[];
    deleteMany?: Prisma.AppointmentScalarWhereInput | Prisma.AppointmentScalarWhereInput[];
};

export type AppointmentUncheckedUpdateManyWithoutDoctorNestedInput = {
    create?:
        | Prisma.XOR<Prisma.AppointmentCreateWithoutDoctorInput, Prisma.AppointmentUncheckedCreateWithoutDoctorInput>
        | Prisma.AppointmentCreateWithoutDoctorInput[]
        | Prisma.AppointmentUncheckedCreateWithoutDoctorInput[];
    connectOrCreate?:
        | Prisma.AppointmentCreateOrConnectWithoutDoctorInput
        | Prisma.AppointmentCreateOrConnectWithoutDoctorInput[];
    upsert?:
        | Prisma.AppointmentUpsertWithWhereUniqueWithoutDoctorInput
        | Prisma.AppointmentUpsertWithWhereUniqueWithoutDoctorInput[];
    createMany?: Prisma.AppointmentCreateManyDoctorInputEnvelope;
    set?: Prisma.AppointmentWhereUniqueInput | Prisma.AppointmentWhereUniqueInput[];
    disconnect?: Prisma.AppointmentWhereUniqueInput | Prisma.AppointmentWhereUniqueInput[];
    delete?: Prisma.AppointmentWhereUniqueInput | Prisma.AppointmentWhereUniqueInput[];
    connect?: Prisma.AppointmentWhereUniqueInput | Prisma.AppointmentWhereUniqueInput[];
    update?:
        | Prisma.AppointmentUpdateWithWhereUniqueWithoutDoctorInput
        | Prisma.AppointmentUpdateWithWhereUniqueWithoutDoctorInput[];
    updateMany?:
        | Prisma.AppointmentUpdateManyWithWhereWithoutDoctorInput
        | Prisma.AppointmentUpdateManyWithWhereWithoutDoctorInput[];
    deleteMany?: Prisma.AppointmentScalarWhereInput | Prisma.AppointmentScalarWhereInput[];
};

export type NullableEnumAppointmentStatusFieldUpdateOperationsInput = {
    set?: $Enums.AppointmentStatus | null;
};

export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null;
    increment?: number;
    decrement?: number;
    multiply?: number;
    divide?: number;
};

export type AppointmentCreateNestedOneWithoutBillsInput = {
    create?: Prisma.XOR<Prisma.AppointmentCreateWithoutBillsInput, Prisma.AppointmentUncheckedCreateWithoutBillsInput>;
    connectOrCreate?: Prisma.AppointmentCreateOrConnectWithoutBillsInput;
    connect?: Prisma.AppointmentWhereUniqueInput;
};

export type AppointmentUpdateOneRequiredWithoutBillsNestedInput = {
    create?: Prisma.XOR<Prisma.AppointmentCreateWithoutBillsInput, Prisma.AppointmentUncheckedCreateWithoutBillsInput>;
    connectOrCreate?: Prisma.AppointmentCreateOrConnectWithoutBillsInput;
    upsert?: Prisma.AppointmentUpsertWithoutBillsInput;
    connect?: Prisma.AppointmentWhereUniqueInput;
    update?: Prisma.XOR<
        Prisma.XOR<Prisma.AppointmentUpdateToOneWithWhereWithoutBillsInput, Prisma.AppointmentUpdateWithoutBillsInput>,
        Prisma.AppointmentUncheckedUpdateWithoutBillsInput
    >;
};

export type AppointmentCreateNestedOneWithoutMedicalInput = {
    create?: Prisma.XOR<
        Prisma.AppointmentCreateWithoutMedicalInput,
        Prisma.AppointmentUncheckedCreateWithoutMedicalInput
    >;
    connectOrCreate?: Prisma.AppointmentCreateOrConnectWithoutMedicalInput;
    connect?: Prisma.AppointmentWhereUniqueInput;
};

export type AppointmentUpdateOneRequiredWithoutMedicalNestedInput = {
    create?: Prisma.XOR<
        Prisma.AppointmentCreateWithoutMedicalInput,
        Prisma.AppointmentUncheckedCreateWithoutMedicalInput
    >;
    connectOrCreate?: Prisma.AppointmentCreateOrConnectWithoutMedicalInput;
    upsert?: Prisma.AppointmentUpsertWithoutMedicalInput;
    connect?: Prisma.AppointmentWhereUniqueInput;
    update?: Prisma.XOR<
        Prisma.XOR<
            Prisma.AppointmentUpdateToOneWithWhereWithoutMedicalInput,
            Prisma.AppointmentUpdateWithoutMedicalInput
        >,
        Prisma.AppointmentUncheckedUpdateWithoutMedicalInput
    >;
};

export type AppointmentCreateNestedManyWithoutServiceInput = {
    create?:
        | Prisma.XOR<Prisma.AppointmentCreateWithoutServiceInput, Prisma.AppointmentUncheckedCreateWithoutServiceInput>
        | Prisma.AppointmentCreateWithoutServiceInput[]
        | Prisma.AppointmentUncheckedCreateWithoutServiceInput[];
    connectOrCreate?:
        | Prisma.AppointmentCreateOrConnectWithoutServiceInput
        | Prisma.AppointmentCreateOrConnectWithoutServiceInput[];
    createMany?: Prisma.AppointmentCreateManyServiceInputEnvelope;
    connect?: Prisma.AppointmentWhereUniqueInput | Prisma.AppointmentWhereUniqueInput[];
};

export type AppointmentUncheckedCreateNestedManyWithoutServiceInput = {
    create?:
        | Prisma.XOR<Prisma.AppointmentCreateWithoutServiceInput, Prisma.AppointmentUncheckedCreateWithoutServiceInput>
        | Prisma.AppointmentCreateWithoutServiceInput[]
        | Prisma.AppointmentUncheckedCreateWithoutServiceInput[];
    connectOrCreate?:
        | Prisma.AppointmentCreateOrConnectWithoutServiceInput
        | Prisma.AppointmentCreateOrConnectWithoutServiceInput[];
    createMany?: Prisma.AppointmentCreateManyServiceInputEnvelope;
    connect?: Prisma.AppointmentWhereUniqueInput | Prisma.AppointmentWhereUniqueInput[];
};

export type AppointmentUpdateManyWithoutServiceNestedInput = {
    create?:
        | Prisma.XOR<Prisma.AppointmentCreateWithoutServiceInput, Prisma.AppointmentUncheckedCreateWithoutServiceInput>
        | Prisma.AppointmentCreateWithoutServiceInput[]
        | Prisma.AppointmentUncheckedCreateWithoutServiceInput[];
    connectOrCreate?:
        | Prisma.AppointmentCreateOrConnectWithoutServiceInput
        | Prisma.AppointmentCreateOrConnectWithoutServiceInput[];
    upsert?:
        | Prisma.AppointmentUpsertWithWhereUniqueWithoutServiceInput
        | Prisma.AppointmentUpsertWithWhereUniqueWithoutServiceInput[];
    createMany?: Prisma.AppointmentCreateManyServiceInputEnvelope;
    set?: Prisma.AppointmentWhereUniqueInput | Prisma.AppointmentWhereUniqueInput[];
    disconnect?: Prisma.AppointmentWhereUniqueInput | Prisma.AppointmentWhereUniqueInput[];
    delete?: Prisma.AppointmentWhereUniqueInput | Prisma.AppointmentWhereUniqueInput[];
    connect?: Prisma.AppointmentWhereUniqueInput | Prisma.AppointmentWhereUniqueInput[];
    update?:
        | Prisma.AppointmentUpdateWithWhereUniqueWithoutServiceInput
        | Prisma.AppointmentUpdateWithWhereUniqueWithoutServiceInput[];
    updateMany?:
        | Prisma.AppointmentUpdateManyWithWhereWithoutServiceInput
        | Prisma.AppointmentUpdateManyWithWhereWithoutServiceInput[];
    deleteMany?: Prisma.AppointmentScalarWhereInput | Prisma.AppointmentScalarWhereInput[];
};

export type AppointmentUncheckedUpdateManyWithoutServiceNestedInput = {
    create?:
        | Prisma.XOR<Prisma.AppointmentCreateWithoutServiceInput, Prisma.AppointmentUncheckedCreateWithoutServiceInput>
        | Prisma.AppointmentCreateWithoutServiceInput[]
        | Prisma.AppointmentUncheckedCreateWithoutServiceInput[];
    connectOrCreate?:
        | Prisma.AppointmentCreateOrConnectWithoutServiceInput
        | Prisma.AppointmentCreateOrConnectWithoutServiceInput[];
    upsert?:
        | Prisma.AppointmentUpsertWithWhereUniqueWithoutServiceInput
        | Prisma.AppointmentUpsertWithWhereUniqueWithoutServiceInput[];
    createMany?: Prisma.AppointmentCreateManyServiceInputEnvelope;
    set?: Prisma.AppointmentWhereUniqueInput | Prisma.AppointmentWhereUniqueInput[];
    disconnect?: Prisma.AppointmentWhereUniqueInput | Prisma.AppointmentWhereUniqueInput[];
    delete?: Prisma.AppointmentWhereUniqueInput | Prisma.AppointmentWhereUniqueInput[];
    connect?: Prisma.AppointmentWhereUniqueInput | Prisma.AppointmentWhereUniqueInput[];
    update?:
        | Prisma.AppointmentUpdateWithWhereUniqueWithoutServiceInput
        | Prisma.AppointmentUpdateWithWhereUniqueWithoutServiceInput[];
    updateMany?:
        | Prisma.AppointmentUpdateManyWithWhereWithoutServiceInput
        | Prisma.AppointmentUpdateManyWithWhereWithoutServiceInput[];
    deleteMany?: Prisma.AppointmentScalarWhereInput | Prisma.AppointmentScalarWhereInput[];
};

export type AppointmentCreateWithoutPatientInput = {
    appointmentDate: Date | string;
    time: string;
    status?: $Enums.AppointmentStatus | null;
    type: string;
    note?: string | null;
    reason?: string | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    doctor: Prisma.DoctorCreateNestedOneWithoutAppointmentsInput;
    service?: Prisma.ServicesCreateNestedOneWithoutAppointmentsInput;
    bills?: Prisma.PaymentCreateNestedManyWithoutAppointmentInput;
    medical?: Prisma.MedicalRecordsCreateNestedManyWithoutAppointmentInput;
};

export type AppointmentUncheckedCreateWithoutPatientInput = {
    id?: number;
    doctorId: string;
    serviceId?: number | null;
    appointmentDate: Date | string;
    time: string;
    status?: $Enums.AppointmentStatus | null;
    type: string;
    note?: string | null;
    reason?: string | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    bills?: Prisma.PaymentUncheckedCreateNestedManyWithoutAppointmentInput;
    medical?: Prisma.MedicalRecordsUncheckedCreateNestedManyWithoutAppointmentInput;
};

export type AppointmentCreateOrConnectWithoutPatientInput = {
    where: Prisma.AppointmentWhereUniqueInput;
    create: Prisma.XOR<
        Prisma.AppointmentCreateWithoutPatientInput,
        Prisma.AppointmentUncheckedCreateWithoutPatientInput
    >;
};

export type AppointmentCreateManyPatientInputEnvelope = {
    data: Prisma.AppointmentCreateManyPatientInput | Prisma.AppointmentCreateManyPatientInput[];
    skipDuplicates?: boolean;
};

export type AppointmentUpsertWithWhereUniqueWithoutPatientInput = {
    where: Prisma.AppointmentWhereUniqueInput;
    update: Prisma.XOR<
        Prisma.AppointmentUpdateWithoutPatientInput,
        Prisma.AppointmentUncheckedUpdateWithoutPatientInput
    >;
    create: Prisma.XOR<
        Prisma.AppointmentCreateWithoutPatientInput,
        Prisma.AppointmentUncheckedCreateWithoutPatientInput
    >;
};

export type AppointmentUpdateWithWhereUniqueWithoutPatientInput = {
    where: Prisma.AppointmentWhereUniqueInput;
    data: Prisma.XOR<Prisma.AppointmentUpdateWithoutPatientInput, Prisma.AppointmentUncheckedUpdateWithoutPatientInput>;
};

export type AppointmentUpdateManyWithWhereWithoutPatientInput = {
    where: Prisma.AppointmentScalarWhereInput;
    data: Prisma.XOR<
        Prisma.AppointmentUpdateManyMutationInput,
        Prisma.AppointmentUncheckedUpdateManyWithoutPatientInput
    >;
};

export type AppointmentScalarWhereInput = {
    AND?: Prisma.AppointmentScalarWhereInput | Prisma.AppointmentScalarWhereInput[];
    OR?: Prisma.AppointmentScalarWhereInput[];
    NOT?: Prisma.AppointmentScalarWhereInput | Prisma.AppointmentScalarWhereInput[];
    id?: Prisma.IntFilter<'Appointment'> | number;
    patientId?: Prisma.StringFilter<'Appointment'> | string;
    doctorId?: Prisma.StringFilter<'Appointment'> | string;
    serviceId?: Prisma.IntNullableFilter<'Appointment'> | number | null;
    appointmentDate?: Prisma.DateTimeFilter<'Appointment'> | Date | string;
    time?: Prisma.StringFilter<'Appointment'> | string;
    status?: Prisma.EnumAppointmentStatusNullableFilter<'Appointment'> | $Enums.AppointmentStatus | null;
    type?: Prisma.StringFilter<'Appointment'> | string;
    note?: Prisma.StringNullableFilter<'Appointment'> | string | null;
    reason?: Prisma.StringNullableFilter<'Appointment'> | string | null;
    createdAt?: Prisma.DateTimeFilter<'Appointment'> | Date | string;
    updatedAt?: Prisma.DateTimeFilter<'Appointment'> | Date | string;
};

export type AppointmentCreateWithoutDoctorInput = {
    appointmentDate: Date | string;
    time: string;
    status?: $Enums.AppointmentStatus | null;
    type: string;
    note?: string | null;
    reason?: string | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    patient: Prisma.PatientCreateNestedOneWithoutAppointmentsInput;
    service?: Prisma.ServicesCreateNestedOneWithoutAppointmentsInput;
    bills?: Prisma.PaymentCreateNestedManyWithoutAppointmentInput;
    medical?: Prisma.MedicalRecordsCreateNestedManyWithoutAppointmentInput;
};

export type AppointmentUncheckedCreateWithoutDoctorInput = {
    id?: number;
    patientId: string;
    serviceId?: number | null;
    appointmentDate: Date | string;
    time: string;
    status?: $Enums.AppointmentStatus | null;
    type: string;
    note?: string | null;
    reason?: string | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    bills?: Prisma.PaymentUncheckedCreateNestedManyWithoutAppointmentInput;
    medical?: Prisma.MedicalRecordsUncheckedCreateNestedManyWithoutAppointmentInput;
};

export type AppointmentCreateOrConnectWithoutDoctorInput = {
    where: Prisma.AppointmentWhereUniqueInput;
    create: Prisma.XOR<Prisma.AppointmentCreateWithoutDoctorInput, Prisma.AppointmentUncheckedCreateWithoutDoctorInput>;
};

export type AppointmentCreateManyDoctorInputEnvelope = {
    data: Prisma.AppointmentCreateManyDoctorInput | Prisma.AppointmentCreateManyDoctorInput[];
    skipDuplicates?: boolean;
};

export type AppointmentUpsertWithWhereUniqueWithoutDoctorInput = {
    where: Prisma.AppointmentWhereUniqueInput;
    update: Prisma.XOR<Prisma.AppointmentUpdateWithoutDoctorInput, Prisma.AppointmentUncheckedUpdateWithoutDoctorInput>;
    create: Prisma.XOR<Prisma.AppointmentCreateWithoutDoctorInput, Prisma.AppointmentUncheckedCreateWithoutDoctorInput>;
};

export type AppointmentUpdateWithWhereUniqueWithoutDoctorInput = {
    where: Prisma.AppointmentWhereUniqueInput;
    data: Prisma.XOR<Prisma.AppointmentUpdateWithoutDoctorInput, Prisma.AppointmentUncheckedUpdateWithoutDoctorInput>;
};

export type AppointmentUpdateManyWithWhereWithoutDoctorInput = {
    where: Prisma.AppointmentScalarWhereInput;
    data: Prisma.XOR<
        Prisma.AppointmentUpdateManyMutationInput,
        Prisma.AppointmentUncheckedUpdateManyWithoutDoctorInput
    >;
};

export type AppointmentCreateWithoutBillsInput = {
    appointmentDate: Date | string;
    time: string;
    status?: $Enums.AppointmentStatus | null;
    type: string;
    note?: string | null;
    reason?: string | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    patient: Prisma.PatientCreateNestedOneWithoutAppointmentsInput;
    doctor: Prisma.DoctorCreateNestedOneWithoutAppointmentsInput;
    service?: Prisma.ServicesCreateNestedOneWithoutAppointmentsInput;
    medical?: Prisma.MedicalRecordsCreateNestedManyWithoutAppointmentInput;
};

export type AppointmentUncheckedCreateWithoutBillsInput = {
    id?: number;
    patientId: string;
    doctorId: string;
    serviceId?: number | null;
    appointmentDate: Date | string;
    time: string;
    status?: $Enums.AppointmentStatus | null;
    type: string;
    note?: string | null;
    reason?: string | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    medical?: Prisma.MedicalRecordsUncheckedCreateNestedManyWithoutAppointmentInput;
};

export type AppointmentCreateOrConnectWithoutBillsInput = {
    where: Prisma.AppointmentWhereUniqueInput;
    create: Prisma.XOR<Prisma.AppointmentCreateWithoutBillsInput, Prisma.AppointmentUncheckedCreateWithoutBillsInput>;
};

export type AppointmentUpsertWithoutBillsInput = {
    update: Prisma.XOR<Prisma.AppointmentUpdateWithoutBillsInput, Prisma.AppointmentUncheckedUpdateWithoutBillsInput>;
    create: Prisma.XOR<Prisma.AppointmentCreateWithoutBillsInput, Prisma.AppointmentUncheckedCreateWithoutBillsInput>;
    where?: Prisma.AppointmentWhereInput;
};

export type AppointmentUpdateToOneWithWhereWithoutBillsInput = {
    where?: Prisma.AppointmentWhereInput;
    data: Prisma.XOR<Prisma.AppointmentUpdateWithoutBillsInput, Prisma.AppointmentUncheckedUpdateWithoutBillsInput>;
};

export type AppointmentUpdateWithoutBillsInput = {
    appointmentDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    time?: Prisma.StringFieldUpdateOperationsInput | string;
    status?: Prisma.NullableEnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus | null;
    type?: Prisma.StringFieldUpdateOperationsInput | string;
    note?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    reason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    patient?: Prisma.PatientUpdateOneRequiredWithoutAppointmentsNestedInput;
    doctor?: Prisma.DoctorUpdateOneRequiredWithoutAppointmentsNestedInput;
    service?: Prisma.ServicesUpdateOneWithoutAppointmentsNestedInput;
    medical?: Prisma.MedicalRecordsUpdateManyWithoutAppointmentNestedInput;
};

export type AppointmentUncheckedUpdateWithoutBillsInput = {
    id?: Prisma.IntFieldUpdateOperationsInput | number;
    patientId?: Prisma.StringFieldUpdateOperationsInput | string;
    doctorId?: Prisma.StringFieldUpdateOperationsInput | string;
    serviceId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
    appointmentDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    time?: Prisma.StringFieldUpdateOperationsInput | string;
    status?: Prisma.NullableEnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus | null;
    type?: Prisma.StringFieldUpdateOperationsInput | string;
    note?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    reason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    medical?: Prisma.MedicalRecordsUncheckedUpdateManyWithoutAppointmentNestedInput;
};

export type AppointmentCreateWithoutMedicalInput = {
    appointmentDate: Date | string;
    time: string;
    status?: $Enums.AppointmentStatus | null;
    type: string;
    note?: string | null;
    reason?: string | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    patient: Prisma.PatientCreateNestedOneWithoutAppointmentsInput;
    doctor: Prisma.DoctorCreateNestedOneWithoutAppointmentsInput;
    service?: Prisma.ServicesCreateNestedOneWithoutAppointmentsInput;
    bills?: Prisma.PaymentCreateNestedManyWithoutAppointmentInput;
};

export type AppointmentUncheckedCreateWithoutMedicalInput = {
    id?: number;
    patientId: string;
    doctorId: string;
    serviceId?: number | null;
    appointmentDate: Date | string;
    time: string;
    status?: $Enums.AppointmentStatus | null;
    type: string;
    note?: string | null;
    reason?: string | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    bills?: Prisma.PaymentUncheckedCreateNestedManyWithoutAppointmentInput;
};

export type AppointmentCreateOrConnectWithoutMedicalInput = {
    where: Prisma.AppointmentWhereUniqueInput;
    create: Prisma.XOR<
        Prisma.AppointmentCreateWithoutMedicalInput,
        Prisma.AppointmentUncheckedCreateWithoutMedicalInput
    >;
};

export type AppointmentUpsertWithoutMedicalInput = {
    update: Prisma.XOR<
        Prisma.AppointmentUpdateWithoutMedicalInput,
        Prisma.AppointmentUncheckedUpdateWithoutMedicalInput
    >;
    create: Prisma.XOR<
        Prisma.AppointmentCreateWithoutMedicalInput,
        Prisma.AppointmentUncheckedCreateWithoutMedicalInput
    >;
    where?: Prisma.AppointmentWhereInput;
};

export type AppointmentUpdateToOneWithWhereWithoutMedicalInput = {
    where?: Prisma.AppointmentWhereInput;
    data: Prisma.XOR<Prisma.AppointmentUpdateWithoutMedicalInput, Prisma.AppointmentUncheckedUpdateWithoutMedicalInput>;
};

export type AppointmentUpdateWithoutMedicalInput = {
    appointmentDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    time?: Prisma.StringFieldUpdateOperationsInput | string;
    status?: Prisma.NullableEnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus | null;
    type?: Prisma.StringFieldUpdateOperationsInput | string;
    note?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    reason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    patient?: Prisma.PatientUpdateOneRequiredWithoutAppointmentsNestedInput;
    doctor?: Prisma.DoctorUpdateOneRequiredWithoutAppointmentsNestedInput;
    service?: Prisma.ServicesUpdateOneWithoutAppointmentsNestedInput;
    bills?: Prisma.PaymentUpdateManyWithoutAppointmentNestedInput;
};

export type AppointmentUncheckedUpdateWithoutMedicalInput = {
    id?: Prisma.IntFieldUpdateOperationsInput | number;
    patientId?: Prisma.StringFieldUpdateOperationsInput | string;
    doctorId?: Prisma.StringFieldUpdateOperationsInput | string;
    serviceId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
    appointmentDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    time?: Prisma.StringFieldUpdateOperationsInput | string;
    status?: Prisma.NullableEnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus | null;
    type?: Prisma.StringFieldUpdateOperationsInput | string;
    note?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    reason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    bills?: Prisma.PaymentUncheckedUpdateManyWithoutAppointmentNestedInput;
};

export type AppointmentCreateWithoutServiceInput = {
    appointmentDate: Date | string;
    time: string;
    status?: $Enums.AppointmentStatus | null;
    type: string;
    note?: string | null;
    reason?: string | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    patient: Prisma.PatientCreateNestedOneWithoutAppointmentsInput;
    doctor: Prisma.DoctorCreateNestedOneWithoutAppointmentsInput;
    bills?: Prisma.PaymentCreateNestedManyWithoutAppointmentInput;
    medical?: Prisma.MedicalRecordsCreateNestedManyWithoutAppointmentInput;
};

export type AppointmentUncheckedCreateWithoutServiceInput = {
    id?: number;
    patientId: string;
    doctorId: string;
    appointmentDate: Date | string;
    time: string;
    status?: $Enums.AppointmentStatus | null;
    type: string;
    note?: string | null;
    reason?: string | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    bills?: Prisma.PaymentUncheckedCreateNestedManyWithoutAppointmentInput;
    medical?: Prisma.MedicalRecordsUncheckedCreateNestedManyWithoutAppointmentInput;
};

export type AppointmentCreateOrConnectWithoutServiceInput = {
    where: Prisma.AppointmentWhereUniqueInput;
    create: Prisma.XOR<
        Prisma.AppointmentCreateWithoutServiceInput,
        Prisma.AppointmentUncheckedCreateWithoutServiceInput
    >;
};

export type AppointmentCreateManyServiceInputEnvelope = {
    data: Prisma.AppointmentCreateManyServiceInput | Prisma.AppointmentCreateManyServiceInput[];
    skipDuplicates?: boolean;
};

export type AppointmentUpsertWithWhereUniqueWithoutServiceInput = {
    where: Prisma.AppointmentWhereUniqueInput;
    update: Prisma.XOR<
        Prisma.AppointmentUpdateWithoutServiceInput,
        Prisma.AppointmentUncheckedUpdateWithoutServiceInput
    >;
    create: Prisma.XOR<
        Prisma.AppointmentCreateWithoutServiceInput,
        Prisma.AppointmentUncheckedCreateWithoutServiceInput
    >;
};

export type AppointmentUpdateWithWhereUniqueWithoutServiceInput = {
    where: Prisma.AppointmentWhereUniqueInput;
    data: Prisma.XOR<Prisma.AppointmentUpdateWithoutServiceInput, Prisma.AppointmentUncheckedUpdateWithoutServiceInput>;
};

export type AppointmentUpdateManyWithWhereWithoutServiceInput = {
    where: Prisma.AppointmentScalarWhereInput;
    data: Prisma.XOR<
        Prisma.AppointmentUpdateManyMutationInput,
        Prisma.AppointmentUncheckedUpdateManyWithoutServiceInput
    >;
};

export type AppointmentCreateManyPatientInput = {
    id?: number;
    doctorId: string;
    serviceId?: number | null;
    appointmentDate: Date | string;
    time: string;
    status?: $Enums.AppointmentStatus | null;
    type: string;
    note?: string | null;
    reason?: string | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
};

export type AppointmentUpdateWithoutPatientInput = {
    appointmentDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    time?: Prisma.StringFieldUpdateOperationsInput | string;
    status?: Prisma.NullableEnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus | null;
    type?: Prisma.StringFieldUpdateOperationsInput | string;
    note?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    reason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    doctor?: Prisma.DoctorUpdateOneRequiredWithoutAppointmentsNestedInput;
    service?: Prisma.ServicesUpdateOneWithoutAppointmentsNestedInput;
    bills?: Prisma.PaymentUpdateManyWithoutAppointmentNestedInput;
    medical?: Prisma.MedicalRecordsUpdateManyWithoutAppointmentNestedInput;
};

export type AppointmentUncheckedUpdateWithoutPatientInput = {
    id?: Prisma.IntFieldUpdateOperationsInput | number;
    doctorId?: Prisma.StringFieldUpdateOperationsInput | string;
    serviceId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
    appointmentDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    time?: Prisma.StringFieldUpdateOperationsInput | string;
    status?: Prisma.NullableEnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus | null;
    type?: Prisma.StringFieldUpdateOperationsInput | string;
    note?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    reason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    bills?: Prisma.PaymentUncheckedUpdateManyWithoutAppointmentNestedInput;
    medical?: Prisma.MedicalRecordsUncheckedUpdateManyWithoutAppointmentNestedInput;
};

export type AppointmentUncheckedUpdateManyWithoutPatientInput = {
    id?: Prisma.IntFieldUpdateOperationsInput | number;
    doctorId?: Prisma.StringFieldUpdateOperationsInput | string;
    serviceId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
    appointmentDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    time?: Prisma.StringFieldUpdateOperationsInput | string;
    status?: Prisma.NullableEnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus | null;
    type?: Prisma.StringFieldUpdateOperationsInput | string;
    note?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    reason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type AppointmentCreateManyDoctorInput = {
    id?: number;
    patientId: string;
    serviceId?: number | null;
    appointmentDate: Date | string;
    time: string;
    status?: $Enums.AppointmentStatus | null;
    type: string;
    note?: string | null;
    reason?: string | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
};

export type AppointmentUpdateWithoutDoctorInput = {
    appointmentDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    time?: Prisma.StringFieldUpdateOperationsInput | string;
    status?: Prisma.NullableEnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus | null;
    type?: Prisma.StringFieldUpdateOperationsInput | string;
    note?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    reason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    patient?: Prisma.PatientUpdateOneRequiredWithoutAppointmentsNestedInput;
    service?: Prisma.ServicesUpdateOneWithoutAppointmentsNestedInput;
    bills?: Prisma.PaymentUpdateManyWithoutAppointmentNestedInput;
    medical?: Prisma.MedicalRecordsUpdateManyWithoutAppointmentNestedInput;
};

export type AppointmentUncheckedUpdateWithoutDoctorInput = {
    id?: Prisma.IntFieldUpdateOperationsInput | number;
    patientId?: Prisma.StringFieldUpdateOperationsInput | string;
    serviceId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
    appointmentDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    time?: Prisma.StringFieldUpdateOperationsInput | string;
    status?: Prisma.NullableEnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus | null;
    type?: Prisma.StringFieldUpdateOperationsInput | string;
    note?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    reason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    bills?: Prisma.PaymentUncheckedUpdateManyWithoutAppointmentNestedInput;
    medical?: Prisma.MedicalRecordsUncheckedUpdateManyWithoutAppointmentNestedInput;
};

export type AppointmentUncheckedUpdateManyWithoutDoctorInput = {
    id?: Prisma.IntFieldUpdateOperationsInput | number;
    patientId?: Prisma.StringFieldUpdateOperationsInput | string;
    serviceId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
    appointmentDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    time?: Prisma.StringFieldUpdateOperationsInput | string;
    status?: Prisma.NullableEnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus | null;
    type?: Prisma.StringFieldUpdateOperationsInput | string;
    note?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    reason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type AppointmentCreateManyServiceInput = {
    id?: number;
    patientId: string;
    doctorId: string;
    appointmentDate: Date | string;
    time: string;
    status?: $Enums.AppointmentStatus | null;
    type: string;
    note?: string | null;
    reason?: string | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
};

export type AppointmentUpdateWithoutServiceInput = {
    appointmentDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    time?: Prisma.StringFieldUpdateOperationsInput | string;
    status?: Prisma.NullableEnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus | null;
    type?: Prisma.StringFieldUpdateOperationsInput | string;
    note?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    reason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    patient?: Prisma.PatientUpdateOneRequiredWithoutAppointmentsNestedInput;
    doctor?: Prisma.DoctorUpdateOneRequiredWithoutAppointmentsNestedInput;
    bills?: Prisma.PaymentUpdateManyWithoutAppointmentNestedInput;
    medical?: Prisma.MedicalRecordsUpdateManyWithoutAppointmentNestedInput;
};

export type AppointmentUncheckedUpdateWithoutServiceInput = {
    id?: Prisma.IntFieldUpdateOperationsInput | number;
    patientId?: Prisma.StringFieldUpdateOperationsInput | string;
    doctorId?: Prisma.StringFieldUpdateOperationsInput | string;
    appointmentDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    time?: Prisma.StringFieldUpdateOperationsInput | string;
    status?: Prisma.NullableEnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus | null;
    type?: Prisma.StringFieldUpdateOperationsInput | string;
    note?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    reason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    bills?: Prisma.PaymentUncheckedUpdateManyWithoutAppointmentNestedInput;
    medical?: Prisma.MedicalRecordsUncheckedUpdateManyWithoutAppointmentNestedInput;
};

export type AppointmentUncheckedUpdateManyWithoutServiceInput = {
    id?: Prisma.IntFieldUpdateOperationsInput | number;
    patientId?: Prisma.StringFieldUpdateOperationsInput | string;
    doctorId?: Prisma.StringFieldUpdateOperationsInput | string;
    appointmentDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    time?: Prisma.StringFieldUpdateOperationsInput | string;
    status?: Prisma.NullableEnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus | null;
    type?: Prisma.StringFieldUpdateOperationsInput | string;
    note?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    reason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

/**
 * Count Type AppointmentCountOutputType
 */

export type AppointmentCountOutputType = {
    bills: number;
    medical: number;
};

export type AppointmentCountOutputTypeSelect<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    bills?: boolean | AppointmentCountOutputTypeCountBillsArgs;
    medical?: boolean | AppointmentCountOutputTypeCountMedicalArgs;
};

/**
 * AppointmentCountOutputType without action
 */
export type AppointmentCountOutputTypeDefaultArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the AppointmentCountOutputType
     */
    select?: Prisma.AppointmentCountOutputTypeSelect<ExtArgs> | null;
};

/**
 * AppointmentCountOutputType without action
 */
export type AppointmentCountOutputTypeCountBillsArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    where?: Prisma.PaymentWhereInput;
};

/**
 * AppointmentCountOutputType without action
 */
export type AppointmentCountOutputTypeCountMedicalArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    where?: Prisma.MedicalRecordsWhereInput;
};

export type AppointmentSelect<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
    {
        id?: boolean;
        patientId?: boolean;
        doctorId?: boolean;
        serviceId?: boolean;
        appointmentDate?: boolean;
        time?: boolean;
        status?: boolean;
        type?: boolean;
        note?: boolean;
        reason?: boolean;
        createdAt?: boolean;
        updatedAt?: boolean;
        patient?: boolean | Prisma.PatientDefaultArgs<ExtArgs>;
        doctor?: boolean | Prisma.DoctorDefaultArgs<ExtArgs>;
        service?: boolean | Prisma.Appointment$serviceArgs<ExtArgs>;
        bills?: boolean | Prisma.Appointment$billsArgs<ExtArgs>;
        medical?: boolean | Prisma.Appointment$medicalArgs<ExtArgs>;
        _count?: boolean | Prisma.AppointmentCountOutputTypeDefaultArgs<ExtArgs>;
    },
    ExtArgs['result']['appointment']
>;

export type AppointmentSelectCreateManyAndReturn<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
    {
        id?: boolean;
        patientId?: boolean;
        doctorId?: boolean;
        serviceId?: boolean;
        appointmentDate?: boolean;
        time?: boolean;
        status?: boolean;
        type?: boolean;
        note?: boolean;
        reason?: boolean;
        createdAt?: boolean;
        updatedAt?: boolean;
        patient?: boolean | Prisma.PatientDefaultArgs<ExtArgs>;
        doctor?: boolean | Prisma.DoctorDefaultArgs<ExtArgs>;
        service?: boolean | Prisma.Appointment$serviceArgs<ExtArgs>;
    },
    ExtArgs['result']['appointment']
>;

export type AppointmentSelectUpdateManyAndReturn<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
    {
        id?: boolean;
        patientId?: boolean;
        doctorId?: boolean;
        serviceId?: boolean;
        appointmentDate?: boolean;
        time?: boolean;
        status?: boolean;
        type?: boolean;
        note?: boolean;
        reason?: boolean;
        createdAt?: boolean;
        updatedAt?: boolean;
        patient?: boolean | Prisma.PatientDefaultArgs<ExtArgs>;
        doctor?: boolean | Prisma.DoctorDefaultArgs<ExtArgs>;
        service?: boolean | Prisma.Appointment$serviceArgs<ExtArgs>;
    },
    ExtArgs['result']['appointment']
>;

export type AppointmentSelectScalar = {
    id?: boolean;
    patientId?: boolean;
    doctorId?: boolean;
    serviceId?: boolean;
    appointmentDate?: boolean;
    time?: boolean;
    status?: boolean;
    type?: boolean;
    note?: boolean;
    reason?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
};

export type AppointmentOmit<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetOmit<
    | 'id'
    | 'patientId'
    | 'doctorId'
    | 'serviceId'
    | 'appointmentDate'
    | 'time'
    | 'status'
    | 'type'
    | 'note'
    | 'reason'
    | 'createdAt'
    | 'updatedAt',
    ExtArgs['result']['appointment']
>;
export type AppointmentInclude<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    patient?: boolean | Prisma.PatientDefaultArgs<ExtArgs>;
    doctor?: boolean | Prisma.DoctorDefaultArgs<ExtArgs>;
    service?: boolean | Prisma.Appointment$serviceArgs<ExtArgs>;
    bills?: boolean | Prisma.Appointment$billsArgs<ExtArgs>;
    medical?: boolean | Prisma.Appointment$medicalArgs<ExtArgs>;
    _count?: boolean | Prisma.AppointmentCountOutputTypeDefaultArgs<ExtArgs>;
};
export type AppointmentIncludeCreateManyAndReturn<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    patient?: boolean | Prisma.PatientDefaultArgs<ExtArgs>;
    doctor?: boolean | Prisma.DoctorDefaultArgs<ExtArgs>;
    service?: boolean | Prisma.Appointment$serviceArgs<ExtArgs>;
};
export type AppointmentIncludeUpdateManyAndReturn<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    patient?: boolean | Prisma.PatientDefaultArgs<ExtArgs>;
    doctor?: boolean | Prisma.DoctorDefaultArgs<ExtArgs>;
    service?: boolean | Prisma.Appointment$serviceArgs<ExtArgs>;
};

export type $AppointmentPayload<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    name: 'Appointment';
    objects: {
        patient: Prisma.$PatientPayload<ExtArgs>;
        doctor: Prisma.$DoctorPayload<ExtArgs>;
        service: Prisma.$ServicesPayload<ExtArgs> | null;
        bills: Prisma.$PaymentPayload<ExtArgs>[];
        medical: Prisma.$MedicalRecordsPayload<ExtArgs>[];
    };
    scalars: runtime.Types.Extensions.GetPayloadResult<
        {
            id: number;
            patientId: string;
            doctorId: string;
            serviceId: number | null;
            appointmentDate: Date;
            time: string;
            status: $Enums.AppointmentStatus | null;
            type: string;
            note: string | null;
            reason: string | null;
            createdAt: Date;
            updatedAt: Date;
        },
        ExtArgs['result']['appointment']
    >;
    composites: {};
};

export type AppointmentGetPayload<S extends boolean | null | undefined | AppointmentDefaultArgs> =
    runtime.Types.Result.GetResult<Prisma.$AppointmentPayload, S>;

export type AppointmentCountArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = Omit<AppointmentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: AppointmentCountAggregateInputType | true;
};

export interface AppointmentDelegate<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
    GlobalOmitOptions = {}
> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Appointment']; meta: { name: 'Appointment' } };
    /**
     * Find zero or one Appointment that matches the filter.
     * @param {AppointmentFindUniqueArgs} args - Arguments to find a Appointment
     * @example
     * // Get one Appointment
     * const appointment = await prisma.appointment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AppointmentFindUniqueArgs>(
        args: Prisma.SelectSubset<T, AppointmentFindUniqueArgs<ExtArgs>>
    ): Prisma.Prisma__AppointmentClient<
        runtime.Types.Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, 'findUnique', GlobalOmitOptions> | null,
        null,
        ExtArgs,
        GlobalOmitOptions
    >;

    /**
     * Find one Appointment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AppointmentFindUniqueOrThrowArgs} args - Arguments to find a Appointment
     * @example
     * // Get one Appointment
     * const appointment = await prisma.appointment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AppointmentFindUniqueOrThrowArgs>(
        args: Prisma.SelectSubset<T, AppointmentFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma.Prisma__AppointmentClient<
        runtime.Types.Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, 'findUniqueOrThrow', GlobalOmitOptions>,
        never,
        ExtArgs,
        GlobalOmitOptions
    >;

    /**
     * Find the first Appointment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentFindFirstArgs} args - Arguments to find a Appointment
     * @example
     * // Get one Appointment
     * const appointment = await prisma.appointment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AppointmentFindFirstArgs>(
        args?: Prisma.SelectSubset<T, AppointmentFindFirstArgs<ExtArgs>>
    ): Prisma.Prisma__AppointmentClient<
        runtime.Types.Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, 'findFirst', GlobalOmitOptions> | null,
        null,
        ExtArgs,
        GlobalOmitOptions
    >;

    /**
     * Find the first Appointment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentFindFirstOrThrowArgs} args - Arguments to find a Appointment
     * @example
     * // Get one Appointment
     * const appointment = await prisma.appointment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AppointmentFindFirstOrThrowArgs>(
        args?: Prisma.SelectSubset<T, AppointmentFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma.Prisma__AppointmentClient<
        runtime.Types.Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, 'findFirstOrThrow', GlobalOmitOptions>,
        never,
        ExtArgs,
        GlobalOmitOptions
    >;

    /**
     * Find zero or more Appointments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Appointments
     * const appointments = await prisma.appointment.findMany()
     *
     * // Get first 10 Appointments
     * const appointments = await prisma.appointment.findMany({ take: 10 })
     *
     * // Only select the `id`
     * const appointmentWithIdOnly = await prisma.appointment.findMany({ select: { id: true } })
     *
     */
    findMany<T extends AppointmentFindManyArgs>(
        args?: Prisma.SelectSubset<T, AppointmentFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<
        runtime.Types.Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, 'findMany', GlobalOmitOptions>
    >;

    /**
     * Create a Appointment.
     * @param {AppointmentCreateArgs} args - Arguments to create a Appointment.
     * @example
     * // Create one Appointment
     * const Appointment = await prisma.appointment.create({
     *   data: {
     *     // ... data to create a Appointment
     *   }
     * })
     *
     */
    create<T extends AppointmentCreateArgs>(
        args: Prisma.SelectSubset<T, AppointmentCreateArgs<ExtArgs>>
    ): Prisma.Prisma__AppointmentClient<
        runtime.Types.Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, 'create', GlobalOmitOptions>,
        never,
        ExtArgs,
        GlobalOmitOptions
    >;

    /**
     * Create many Appointments.
     * @param {AppointmentCreateManyArgs} args - Arguments to create many Appointments.
     * @example
     * // Create many Appointments
     * const appointment = await prisma.appointment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     */
    createMany<T extends AppointmentCreateManyArgs>(
        args?: Prisma.SelectSubset<T, AppointmentCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<Prisma.BatchPayload>;

    /**
     * Create many Appointments and returns the data saved in the database.
     * @param {AppointmentCreateManyAndReturnArgs} args - Arguments to create many Appointments.
     * @example
     * // Create many Appointments
     * const appointment = await prisma.appointment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     * // Create many Appointments and only return the `id`
     * const appointmentWithIdOnly = await prisma.appointment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     *
     */
    createManyAndReturn<T extends AppointmentCreateManyAndReturnArgs>(
        args?: Prisma.SelectSubset<T, AppointmentCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<
        runtime.Types.Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, 'createManyAndReturn', GlobalOmitOptions>
    >;

    /**
     * Delete a Appointment.
     * @param {AppointmentDeleteArgs} args - Arguments to delete one Appointment.
     * @example
     * // Delete one Appointment
     * const Appointment = await prisma.appointment.delete({
     *   where: {
     *     // ... filter to delete one Appointment
     *   }
     * })
     *
     */
    delete<T extends AppointmentDeleteArgs>(
        args: Prisma.SelectSubset<T, AppointmentDeleteArgs<ExtArgs>>
    ): Prisma.Prisma__AppointmentClient<
        runtime.Types.Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, 'delete', GlobalOmitOptions>,
        never,
        ExtArgs,
        GlobalOmitOptions
    >;

    /**
     * Update one Appointment.
     * @param {AppointmentUpdateArgs} args - Arguments to update one Appointment.
     * @example
     * // Update one Appointment
     * const appointment = await prisma.appointment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     */
    update<T extends AppointmentUpdateArgs>(
        args: Prisma.SelectSubset<T, AppointmentUpdateArgs<ExtArgs>>
    ): Prisma.Prisma__AppointmentClient<
        runtime.Types.Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, 'update', GlobalOmitOptions>,
        never,
        ExtArgs,
        GlobalOmitOptions
    >;

    /**
     * Delete zero or more Appointments.
     * @param {AppointmentDeleteManyArgs} args - Arguments to filter Appointments to delete.
     * @example
     * // Delete a few Appointments
     * const { count } = await prisma.appointment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     *
     */
    deleteMany<T extends AppointmentDeleteManyArgs>(
        args?: Prisma.SelectSubset<T, AppointmentDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<Prisma.BatchPayload>;

    /**
     * Update zero or more Appointments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Appointments
     * const appointment = await prisma.appointment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     */
    updateMany<T extends AppointmentUpdateManyArgs>(
        args: Prisma.SelectSubset<T, AppointmentUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<Prisma.BatchPayload>;

    /**
     * Update zero or more Appointments and returns the data updated in the database.
     * @param {AppointmentUpdateManyAndReturnArgs} args - Arguments to update many Appointments.
     * @example
     * // Update many Appointments
     * const appointment = await prisma.appointment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     * // Update zero or more Appointments and only return the `id`
     * const appointmentWithIdOnly = await prisma.appointment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     *
     */
    updateManyAndReturn<T extends AppointmentUpdateManyAndReturnArgs>(
        args: Prisma.SelectSubset<T, AppointmentUpdateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<
        runtime.Types.Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, 'updateManyAndReturn', GlobalOmitOptions>
    >;

    /**
     * Create or update one Appointment.
     * @param {AppointmentUpsertArgs} args - Arguments to update or create a Appointment.
     * @example
     * // Update or create a Appointment
     * const appointment = await prisma.appointment.upsert({
     *   create: {
     *     // ... data to create a Appointment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Appointment we want to update
     *   }
     * })
     */
    upsert<T extends AppointmentUpsertArgs>(
        args: Prisma.SelectSubset<T, AppointmentUpsertArgs<ExtArgs>>
    ): Prisma.Prisma__AppointmentClient<
        runtime.Types.Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, 'upsert', GlobalOmitOptions>,
        never,
        ExtArgs,
        GlobalOmitOptions
    >;

    /**
     * Count the number of Appointments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentCountArgs} args - Arguments to filter Appointments to count.
     * @example
     * // Count the number of Appointments
     * const count = await prisma.appointment.count({
     *   where: {
     *     // ... the filter for the Appointments we want to count
     *   }
     * })
     **/
    count<T extends AppointmentCountArgs>(
        args?: Prisma.Subset<T, AppointmentCountArgs>
    ): Prisma.PrismaPromise<
        T extends runtime.Types.Utils.Record<'select', any>
            ? T['select'] extends true
                ? number
                : Prisma.GetScalarType<T['select'], AppointmentCountAggregateOutputType>
            : number
    >;

    /**
     * Allows you to perform aggregations operations on a Appointment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
     **/
    aggregate<T extends AppointmentAggregateArgs>(
        args: Prisma.Subset<T, AppointmentAggregateArgs>
    ): Prisma.PrismaPromise<GetAppointmentAggregateType<T>>;

    /**
     * Group by Appointment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     *
     **/
    groupBy<
        T extends AppointmentGroupByArgs,
        HasSelectOrTake extends Prisma.Or<
            Prisma.Extends<'skip', Prisma.Keys<T>>,
            Prisma.Extends<'take', Prisma.Keys<T>>
        >,
        OrderByArg extends Prisma.True extends HasSelectOrTake
            ? { orderBy: AppointmentGroupByArgs['orderBy'] }
            : { orderBy?: AppointmentGroupByArgs['orderBy'] },
        OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
        ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
        ByValid extends Prisma.Has<ByFields, OrderFields>,
        HavingFields extends Prisma.GetHavingFields<T['having']>,
        HavingValid extends Prisma.Has<ByFields, HavingFields>,
        ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
        InputErrors extends ByEmpty extends Prisma.True
            ? `Error: "by" must not be empty.`
            : HavingValid extends Prisma.False
              ? {
                    [P in HavingFields]: P extends ByFields
                        ? never
                        : P extends string
                          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                          : [Error, 'Field ', P, ` in "having" needs to be provided in "by"`];
                }[HavingFields]
              : 'take' extends Prisma.Keys<T>
                ? 'orderBy' extends Prisma.Keys<T>
                    ? ByValid extends Prisma.True
                        ? {}
                        : {
                              [P in OrderFields]: P extends ByFields
                                  ? never
                                  : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                          }[OrderFields]
                    : 'Error: If you provide "take", you also need to provide "orderBy"'
                : 'skip' extends Prisma.Keys<T>
                  ? 'orderBy' extends Prisma.Keys<T>
                      ? ByValid extends Prisma.True
                          ? {}
                          : {
                                [P in OrderFields]: P extends ByFields
                                    ? never
                                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                            }[OrderFields]
                      : 'Error: If you provide "skip", you also need to provide "orderBy"'
                  : ByValid extends Prisma.True
                    ? {}
                    : {
                          [P in OrderFields]: P extends ByFields
                              ? never
                              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                      }[OrderFields]
    >(
        args: Prisma.SubsetIntersection<T, AppointmentGroupByArgs, OrderByArg> & InputErrors
    ): {} extends InputErrors ? GetAppointmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>;
    /**
     * Fields of the Appointment model
     */
    readonly fields: AppointmentFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Appointment.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__AppointmentClient<
    T,
    Null = never,
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
    GlobalOmitOptions = {}
> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    patient<T extends Prisma.PatientDefaultArgs<ExtArgs> = {}>(
        args?: Prisma.Subset<T, Prisma.PatientDefaultArgs<ExtArgs>>
    ): Prisma.Prisma__PatientClient<
        | runtime.Types.Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, 'findUniqueOrThrow', GlobalOmitOptions>
        | Null,
        Null,
        ExtArgs,
        GlobalOmitOptions
    >;
    doctor<T extends Prisma.DoctorDefaultArgs<ExtArgs> = {}>(
        args?: Prisma.Subset<T, Prisma.DoctorDefaultArgs<ExtArgs>>
    ): Prisma.Prisma__DoctorClient<
        | runtime.Types.Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, 'findUniqueOrThrow', GlobalOmitOptions>
        | Null,
        Null,
        ExtArgs,
        GlobalOmitOptions
    >;
    service<T extends Prisma.Appointment$serviceArgs<ExtArgs> = {}>(
        args?: Prisma.Subset<T, Prisma.Appointment$serviceArgs<ExtArgs>>
    ): Prisma.Prisma__ServicesClient<
        runtime.Types.Result.GetResult<
            Prisma.$ServicesPayload<ExtArgs>,
            T,
            'findUniqueOrThrow',
            GlobalOmitOptions
        > | null,
        null,
        ExtArgs,
        GlobalOmitOptions
    >;
    bills<T extends Prisma.Appointment$billsArgs<ExtArgs> = {}>(
        args?: Prisma.Subset<T, Prisma.Appointment$billsArgs<ExtArgs>>
    ): Prisma.PrismaPromise<
        runtime.Types.Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, 'findMany', GlobalOmitOptions> | Null
    >;
    medical<T extends Prisma.Appointment$medicalArgs<ExtArgs> = {}>(
        args?: Prisma.Subset<T, Prisma.Appointment$medicalArgs<ExtArgs>>
    ): Prisma.PrismaPromise<
        runtime.Types.Result.GetResult<Prisma.$MedicalRecordsPayload<ExtArgs>, T, 'findMany', GlobalOmitOptions> | Null
    >;
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(
        onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null,
        onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null
    ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(
        onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null
    ): runtime.Types.Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the Appointment model
 */
export interface AppointmentFieldRefs {
    readonly id: Prisma.FieldRef<'Appointment', 'Int'>;
    readonly patientId: Prisma.FieldRef<'Appointment', 'String'>;
    readonly doctorId: Prisma.FieldRef<'Appointment', 'String'>;
    readonly serviceId: Prisma.FieldRef<'Appointment', 'Int'>;
    readonly appointmentDate: Prisma.FieldRef<'Appointment', 'DateTime'>;
    readonly time: Prisma.FieldRef<'Appointment', 'String'>;
    readonly status: Prisma.FieldRef<'Appointment', 'AppointmentStatus'>;
    readonly type: Prisma.FieldRef<'Appointment', 'String'>;
    readonly note: Prisma.FieldRef<'Appointment', 'String'>;
    readonly reason: Prisma.FieldRef<'Appointment', 'String'>;
    readonly createdAt: Prisma.FieldRef<'Appointment', 'DateTime'>;
    readonly updatedAt: Prisma.FieldRef<'Appointment', 'DateTime'>;
}

// Custom InputTypes
/**
 * Appointment findUnique
 */
export type AppointmentFindUniqueArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: Prisma.AppointmentSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Appointment
     */
    omit?: Prisma.AppointmentOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.AppointmentInclude<ExtArgs> | null;
    /**
     * Filter, which Appointment to fetch.
     */
    where: Prisma.AppointmentWhereUniqueInput;
};

/**
 * Appointment findUniqueOrThrow
 */
export type AppointmentFindUniqueOrThrowArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: Prisma.AppointmentSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Appointment
     */
    omit?: Prisma.AppointmentOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.AppointmentInclude<ExtArgs> | null;
    /**
     * Filter, which Appointment to fetch.
     */
    where: Prisma.AppointmentWhereUniqueInput;
};

/**
 * Appointment findFirst
 */
export type AppointmentFindFirstArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: Prisma.AppointmentSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Appointment
     */
    omit?: Prisma.AppointmentOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.AppointmentInclude<ExtArgs> | null;
    /**
     * Filter, which Appointment to fetch.
     */
    where?: Prisma.AppointmentWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Appointments to fetch.
     */
    orderBy?: Prisma.AppointmentOrderByWithRelationInput | Prisma.AppointmentOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for Appointments.
     */
    cursor?: Prisma.AppointmentWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `Â±n` Appointments from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Appointments.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of Appointments.
     */
    distinct?: Prisma.AppointmentScalarFieldEnum | Prisma.AppointmentScalarFieldEnum[];
};

/**
 * Appointment findFirstOrThrow
 */
export type AppointmentFindFirstOrThrowArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: Prisma.AppointmentSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Appointment
     */
    omit?: Prisma.AppointmentOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.AppointmentInclude<ExtArgs> | null;
    /**
     * Filter, which Appointment to fetch.
     */
    where?: Prisma.AppointmentWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Appointments to fetch.
     */
    orderBy?: Prisma.AppointmentOrderByWithRelationInput | Prisma.AppointmentOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for Appointments.
     */
    cursor?: Prisma.AppointmentWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `Â±n` Appointments from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Appointments.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of Appointments.
     */
    distinct?: Prisma.AppointmentScalarFieldEnum | Prisma.AppointmentScalarFieldEnum[];
};

/**
 * Appointment findMany
 */
export type AppointmentFindManyArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: Prisma.AppointmentSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Appointment
     */
    omit?: Prisma.AppointmentOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.AppointmentInclude<ExtArgs> | null;
    /**
     * Filter, which Appointments to fetch.
     */
    where?: Prisma.AppointmentWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Appointments to fetch.
     */
    orderBy?: Prisma.AppointmentOrderByWithRelationInput | Prisma.AppointmentOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for listing Appointments.
     */
    cursor?: Prisma.AppointmentWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `Â±n` Appointments from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Appointments.
     */
    skip?: number;
    distinct?: Prisma.AppointmentScalarFieldEnum | Prisma.AppointmentScalarFieldEnum[];
};

/**
 * Appointment create
 */
export type AppointmentCreateArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: Prisma.AppointmentSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Appointment
     */
    omit?: Prisma.AppointmentOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.AppointmentInclude<ExtArgs> | null;
    /**
     * The data needed to create a Appointment.
     */
    data: Prisma.XOR<Prisma.AppointmentCreateInput, Prisma.AppointmentUncheckedCreateInput>;
};

/**
 * Appointment createMany
 */
export type AppointmentCreateManyArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * The data used to create many Appointments.
     */
    data: Prisma.AppointmentCreateManyInput | Prisma.AppointmentCreateManyInput[];
    skipDuplicates?: boolean;
};

/**
 * Appointment createManyAndReturn
 */
export type AppointmentCreateManyAndReturnArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: Prisma.AppointmentSelectCreateManyAndReturn<ExtArgs> | null;
    /**
     * Omit specific fields from the Appointment
     */
    omit?: Prisma.AppointmentOmit<ExtArgs> | null;
    /**
     * The data used to create many Appointments.
     */
    data: Prisma.AppointmentCreateManyInput | Prisma.AppointmentCreateManyInput[];
    skipDuplicates?: boolean;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.AppointmentIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * Appointment update
 */
export type AppointmentUpdateArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: Prisma.AppointmentSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Appointment
     */
    omit?: Prisma.AppointmentOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.AppointmentInclude<ExtArgs> | null;
    /**
     * The data needed to update a Appointment.
     */
    data: Prisma.XOR<Prisma.AppointmentUpdateInput, Prisma.AppointmentUncheckedUpdateInput>;
    /**
     * Choose, which Appointment to update.
     */
    where: Prisma.AppointmentWhereUniqueInput;
};

/**
 * Appointment updateMany
 */
export type AppointmentUpdateManyArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * The data used to update Appointments.
     */
    data: Prisma.XOR<Prisma.AppointmentUpdateManyMutationInput, Prisma.AppointmentUncheckedUpdateManyInput>;
    /**
     * Filter which Appointments to update
     */
    where?: Prisma.AppointmentWhereInput;
    /**
     * Limit how many Appointments to update.
     */
    limit?: number;
};

/**
 * Appointment updateManyAndReturn
 */
export type AppointmentUpdateManyAndReturnArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: Prisma.AppointmentSelectUpdateManyAndReturn<ExtArgs> | null;
    /**
     * Omit specific fields from the Appointment
     */
    omit?: Prisma.AppointmentOmit<ExtArgs> | null;
    /**
     * The data used to update Appointments.
     */
    data: Prisma.XOR<Prisma.AppointmentUpdateManyMutationInput, Prisma.AppointmentUncheckedUpdateManyInput>;
    /**
     * Filter which Appointments to update
     */
    where?: Prisma.AppointmentWhereInput;
    /**
     * Limit how many Appointments to update.
     */
    limit?: number;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.AppointmentIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * Appointment upsert
 */
export type AppointmentUpsertArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: Prisma.AppointmentSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Appointment
     */
    omit?: Prisma.AppointmentOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.AppointmentInclude<ExtArgs> | null;
    /**
     * The filter to search for the Appointment to update in case it exists.
     */
    where: Prisma.AppointmentWhereUniqueInput;
    /**
     * In case the Appointment found by the `where` argument doesn't exist, create a new Appointment with this data.
     */
    create: Prisma.XOR<Prisma.AppointmentCreateInput, Prisma.AppointmentUncheckedCreateInput>;
    /**
     * In case the Appointment was found with the provided `where` argument, update it with this data.
     */
    update: Prisma.XOR<Prisma.AppointmentUpdateInput, Prisma.AppointmentUncheckedUpdateInput>;
};

/**
 * Appointment delete
 */
export type AppointmentDeleteArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: Prisma.AppointmentSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Appointment
     */
    omit?: Prisma.AppointmentOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.AppointmentInclude<ExtArgs> | null;
    /**
     * Filter which Appointment to delete.
     */
    where: Prisma.AppointmentWhereUniqueInput;
};

/**
 * Appointment deleteMany
 */
export type AppointmentDeleteManyArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Filter which Appointments to delete
     */
    where?: Prisma.AppointmentWhereInput;
    /**
     * Limit how many Appointments to delete.
     */
    limit?: number;
};

/**
 * Appointment.service
 */
export type Appointment$serviceArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the Services
     */
    select?: Prisma.ServicesSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Services
     */
    omit?: Prisma.ServicesOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.ServicesInclude<ExtArgs> | null;
    where?: Prisma.ServicesWhereInput;
};

/**
 * Appointment.bills
 */
export type Appointment$billsArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: Prisma.PaymentSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Payment
     */
    omit?: Prisma.PaymentOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.PaymentInclude<ExtArgs> | null;
    where?: Prisma.PaymentWhereInput;
    orderBy?: Prisma.PaymentOrderByWithRelationInput | Prisma.PaymentOrderByWithRelationInput[];
    cursor?: Prisma.PaymentWhereUniqueInput;
    take?: number;
    skip?: number;
    distinct?: Prisma.PaymentScalarFieldEnum | Prisma.PaymentScalarFieldEnum[];
};

/**
 * Appointment.medical
 */
export type Appointment$medicalArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the MedicalRecords
     */
    select?: Prisma.MedicalRecordsSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the MedicalRecords
     */
    omit?: Prisma.MedicalRecordsOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.MedicalRecordsInclude<ExtArgs> | null;
    where?: Prisma.MedicalRecordsWhereInput;
    orderBy?: Prisma.MedicalRecordsOrderByWithRelationInput | Prisma.MedicalRecordsOrderByWithRelationInput[];
    cursor?: Prisma.MedicalRecordsWhereUniqueInput;
    take?: number;
    skip?: number;
    distinct?: Prisma.MedicalRecordsScalarFieldEnum | Prisma.MedicalRecordsScalarFieldEnum[];
};

/**
 * Appointment without action
 */
export type AppointmentDefaultArgs<
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: Prisma.AppointmentSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Appointment
     */
    omit?: Prisma.AppointmentOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Prisma.AppointmentInclude<ExtArgs> | null;
};
