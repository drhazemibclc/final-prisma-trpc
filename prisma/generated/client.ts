/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/**
 * This file should be your main import to use Prisma. Through it you get access to all the models, enums, and input types.
 *
 * ðŸŸ¢ You can import this file directly.
 */

import * as path from 'node:path';
import * as process from 'node:process';
import { fileURLToPath } from 'node:url';

const __dirname = path.dirname(fileURLToPath(import.meta.url));

import type * as runtime from '@prisma/client/runtime/library';
import * as $Enums from './enums';
import * as $Class from './internal/class';
import * as Prisma from './internal/prismaNamespace';

export * as $Enums from './enums';
/**
 * ## Prisma Client
 *
 * Type-safe database client for TypeScript
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export const PrismaClient = $Class.getPrismaClientClass(__dirname);
export type PrismaClient<
    LogOpts extends Prisma.LogLevel = never,
    OmitOpts extends Prisma.PrismaClientOptions['omit'] = Prisma.PrismaClientOptions['omit'],
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = $Class.PrismaClient<LogOpts, OmitOpts, ExtArgs>;
export { Prisma };

// file annotations for bundling tools to include these files
path.join(__dirname, 'libquery_engine-debian-openssl-3.0.x.so.node');
path.join(process.cwd(), 'prisma/generated/libquery_engine-debian-openssl-3.0.x.so.node');

/**
 * Model User
 *
 */
export type User = Prisma.UserModel;
/**
 * Model Session
 *
 */
export type Session = Prisma.SessionModel;
/**
 * Model Account
 *
 */
export type Account = Prisma.AccountModel;
/**
 * Model Verification
 *
 */
export type Verification = Prisma.VerificationModel;
/**
 * Model Patient
 *
 */
export type Patient = Prisma.PatientModel;
/**
 * Model Doctor
 *
 */
export type Doctor = Prisma.DoctorModel;
/**
 * Model WorkingDays
 *
 */
export type WorkingDays = Prisma.WorkingDaysModel;
/**
 * Model Staff
 *
 */
export type Staff = Prisma.StaffModel;
/**
 * Model Appointment
 *
 */
export type Appointment = Prisma.AppointmentModel;
/**
 * Model Payment
 *
 */
export type Payment = Prisma.PaymentModel;
/**
 * Model PatientBills
 *
 */
export type PatientBills = Prisma.PatientBillsModel;
/**
 * Model LabTest
 *
 */
export type LabTest = Prisma.LabTestModel;
/**
 * Model MedicalRecords
 *
 */
export type MedicalRecords = Prisma.MedicalRecordsModel;
/**
 * Model VitalSigns
 *
 */
export type VitalSigns = Prisma.VitalSignsModel;
/**
 * Model Diagnosis
 *
 */
export type Diagnosis = Prisma.DiagnosisModel;
/**
 * Model AuditLog
 *
 */
export type AuditLog = Prisma.AuditLogModel;
/**
 * Model Rating
 *
 */
export type Rating = Prisma.RatingModel;
/**
 * Model Services
 *
 */
export type Services = Prisma.ServicesModel;
/**
 * Model Prescription
 *
 */
export type Prescription = Prisma.PrescriptionModel;
/**
 * Model Vaccination
 *
 */
export type Vaccination = Prisma.VaccinationModel;
/**
 * Model WHOGrowthStandard
 *
 */
export type WHOGrowthStandard = Prisma.WHOGrowthStandardModel;

export type Role = $Enums.Role;
export const Role = $Enums.Role;

export type Status = $Enums.Status;
export const Status = $Enums.Status;

export type JOBTYPE = $Enums.JOBTYPE;
export const JOBTYPE = $Enums.JOBTYPE;

export type Gender = $Enums.Gender;
export const Gender = $Enums.Gender;

export type AppointmentStatus = $Enums.AppointmentStatus;
export const AppointmentStatus = $Enums.AppointmentStatus;

export type PaymentMethod = $Enums.PaymentMethod;
export const PaymentMethod = $Enums.PaymentMethod;

export type PaymentStatus = $Enums.PaymentStatus;
export const PaymentStatus = $Enums.PaymentStatus;

export type ServiceCategory = $Enums.ServiceCategory;
export const ServiceCategory = $Enums.ServiceCategory;

export type MeasurementType = $Enums.MeasurementType;
export const MeasurementType = $Enums.MeasurementType;

export type ChatRole = $Enums.ChatRole;
export const ChatRole = $Enums.ChatRole;
